(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* :Title: Fretica Usages *) 
    (* :Author: Daniel Nettels *)
    (* :Summary: Summary goes here. *)
    (* :History:  Version 1.0 October 29 2020 *)
    (* :Mathematica version: 12.1.1 for Microsoft Windows (64-bit) (June 19, 2020) *)
    


BeginPackage["Fretica`"];


FAboutFretica  ::usage="FAboutFretica[] returns version information about Fretica. ";


FUnlinkFretica  ::usage="FUnlinkFretica[] unlinks Fretica. ";


$FreticaExamples::usage="Directory in which example data are saved. ";


Histo  ::usage="Histo[ dat, \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)min, max, dx\!\(\*FormBox[\(}\),
TraditionalForm]\), opts ] returns a histogram of the values in the list dat. The range and bin width are given by \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)min, max, dx\!\(\*FormBox[\(}\),
TraditionalForm]\).
Options are:
\!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)FOutput\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FGraph (default)
\!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)FOutput\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FData
and all options of Histogram. ";


Histo2D  ::usage="Histo2D[dat,\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)min1\!\(\*FormBox[\(_\),
TraditionalForm]\), max1\!\(\*FormBox[\(_\),
TraditionalForm]\), d1\!\(\*FormBox[\(\(_\)\(}\)\),
TraditionalForm]\), \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)min2\!\(\*FormBox[\(_\),
TraditionalForm]\), max2\!\(\*FormBox[\(_\),
TraditionalForm]\), d2\!\(\*FormBox[\(\(_\)\(}\)\),
TraditionalForm]\), opts] returns a 2D histogram (contour plot) of the value pairs listed in dat. The range and bin width are given by \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)min, max, dx\!\(\*FormBox[\(}\),
TraditionalForm]\).
Options are:
\!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)FOutput\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FGraph (default)
\!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)FOutput\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FData
\!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)FOutput\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FGraph3D
and all options of ListContourPlot and ListPlot3D. ";


FPlotHisto  ::usage="FPlotHisto[histodat] plots a histogram. Use this command if you want to plot histogram data returned, e.g., by
histodat\[LongEqual]Histo[..., FOutput\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FData].
All graphical options of Histogram can be used to modify the appearance. ";


FPowerSpectrum  ::usage="FPowerSpectrum[xydat\!\(\*FormBox[\(_\),
TraditionalForm]\),first\!\(\*FormBox[\(\[Nu]  _\),
TraditionalForm]\)] or FPowerSpectrum[xydat\!\(\*FormBox[\(_\),
TraditionalForm]\)] ";


FFindGlobalFit  ::usage="FFindGlobalFit[ \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)dat1,dat2,...\!\(\*FormBox[\(}\),
TraditionalForm]\), \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)model1,model2,...\!\(\*FormBox[\(}\),
TraditionalForm]\), pars, vars ] or
FFindGlobalFit[ \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)dat1,dat2,...\!\(\*FormBox[\(}\),
TraditionalForm]\), \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)model1,model2,...\!\(\*FormBox[\(}\),
TraditionalForm]\), constraints, pars,vars ]
allow to fit several data sets simultaneously with shared (and individual) model parameters. pars is a list of the fit parameters paired with initial guess values of the form pars\[LongEqual]\!\(\*FormBox[\({{\[Null]\),
TraditionalForm]\)par1,val1\!\(\*FormBox[\(}\),
TraditionalForm]\),\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)par1,val2\!\(\*FormBox[\(}\),
TraditionalForm]\),...\!\(\*FormBox[\(}\),
TraditionalForm]\)
The rest is identical to FindFit.
All Options of FindFit can be used for FindGlobalFit. ";


FNonlinearModelGlobalFit  ::usage="FNonlinearModelGlobalFit[ \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)dat1, dat2,...\!\(\*FormBox[\(}\),
TraditionalForm]\), \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)model1, model2,...\!\(\*FormBox[\(}\),
TraditionalForm]\), pars, vars ] or
FNonlinearModelGlobalFit[ \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)dat1, dat2,...\!\(\*FormBox[\(}\),
TraditionalForm]\), \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)model1, model2,...\!\(\*FormBox[\(}\),
TraditionalForm]\), constraints, pars, vars ]
pars is a list of the fit parameters paired with initial guess values of the form pars\[LongEqual]\!\(\*FormBox[\({{\[Null]\),
TraditionalForm]\)par1, val1\!\(\*FormBox[\(}\),
TraditionalForm]\),\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)par2,val2\!\(\*FormBox[\(}\),
TraditionalForm]\),...\!\(\*FormBox[\(}\),
TraditionalForm]\)
The rest is identical to NonlinearModelFit.
All Options of NonlinearModelFit can be passed to FNonlinearModelGlobalFit. ";


FLMFit  ::usage="Levenberg\[Hyphen]Marquardt fitting of a histogram.
FLMFit[dat:\!\(\*FormBox[\({{_\),
TraditionalForm]\)?NumberQ,\!\(\*FormBox[\(_\),
TraditionalForm]\)?NumberQ\!\(\*FormBox[\(}\),
TraditionalForm]\)..\!\(\*FormBox[\(}\),
TraditionalForm]\),modelfunc\!\(\*FormBox[\(_\),
TraditionalForm]\),guess:\!\(\*FormBox[\({{_\),
TraditionalForm]\),\!\(\*FormBox[\(_\),
TraditionalForm]\)?NumberQ\!\(\*FormBox[\(}\),
TraditionalForm]\)..\!\(\*FormBox[\(}\),
TraditionalForm]\)] or
FLMFit[dat:\!\(\*FormBox[\({{{_\),
TraditionalForm]\)?NumberQ,\!\(\*FormBox[\(_\),
TraditionalForm]\)?NumberQ\!\(\*FormBox[\(}\),
TraditionalForm]\)..\!\(\*FormBox[\(}\),
TraditionalForm]\)..\!\(\*FormBox[\(}\),
TraditionalForm]\),modelfunc\!\(\*FormBox[\(_\),
TraditionalForm]\),guess:\!\(\*FormBox[\({{_\),
TraditionalForm]\),\!\(\*FormBox[\(_\),
TraditionalForm]\)?NumberQ\!\(\*FormBox[\(}\),
TraditionalForm]\)..\!\(\*FormBox[\(}\),
TraditionalForm]\)]
return
\!\(\*FormBox[\({\*SuperscriptBox[\(\[Chi]\), \(2\)]\),
TraditionalForm]\), bestfitparameters\!\(\*FormBox[\(}\),
TraditionalForm]\)
The variances in \!\(\*FormBox[SuperscriptBox[\(\[Chi]\), \(2\)],
TraditionalForm]\) are approximated as \!\(\*FormBox[SuperscriptBox[\(\[Sigma]\), \(2\)],
TraditionalForm]\)\[LongEqual]modfunc[\!\(\*FormBox[
StyleBox[\"x\", \"TI\"],
TraditionalForm]\)], i.e. a Poisson\[Hyphen]distributed number of occurrences are assumed. ";


FReadCoordinatesFromImage  ::usage="FReadCoordinatesFromImage[outputcurve,diagramimage] opens interactive control for reading coordinates from an image (e.g. a scanned plot from a publication). The coordinates are stored in outputcurve, which must be a valid variable name. ";


FConvolve  ::usage="FConvolve[irf, timeshift, modelfunc][times]

FConvolve returns the discrete cyclic convolution of a list of values calculated from modelfunc[times] with the kernel irf[[All,2]]. times is a list of values that must be of equal or greater length than irf.
irf is supplied in the form \!\(\*FormBox[\({{\[Null]\),
TraditionalForm]\)t1,y1\!\(\*FormBox[\(}\),
TraditionalForm]\),\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)t2,y2\!\(\*FormBox[\(}\),
TraditionalForm]\)..\!\(\*FormBox[\(}\),
TraditionalForm]\). modelfunc[times] must return a list of values.
Before convolution, irf[[All,2]] is cyclically rotated to the right by the number of steps defined by the integer timeshift. 
In sumary, the result of \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)times, ListConvolve[N@RotateRight[ irf[[All,2]], timeshift], model[ times], 1]\!\(\*FormBox[SuperscriptBox[\"}\", 
StyleBox[\"T\",\nFontSlant->\"Plain\"]],
TraditionalForm]\) is returned.
";


FGetMaxChannel  ::usage="Returns maximal lifetime channel used ";


FNumericMatrixQ  ::usage="FNumericMatrixQ[m\!\(\*FormBox[\(_\),
TraditionalForm]\)]:\[LongEqual]MatrixQ[m,NumericQ] ";


FNumericSquareMatrixQ  ::usage="FNumericSquareMatrixQ[m\!\(\*FormBox[\(_\),
TraditionalForm]\)]:\[LongEqual]SquareMatrixQ[m] \!\(\*FormBox[\(&&\),
TraditionalForm]\) MatrixQ[m,NumericQ] ";


FPlotContourHisto  ::usage="FPlotContourHisto[histodat:\!\(\*FormBox[\({{_\),
TraditionalForm]\),\!\(\*FormBox[\(_\),
TraditionalForm]\),\!\(\*FormBox[\(\(_\)\(}\)\),
TraditionalForm]\)...\!\(\*FormBox[\(}\),
TraditionalForm]\),opts:OptionsPattern[]] or
FPlotContourHisto[histodat:\!\(\*FormBox[\({{{_\),
TraditionalForm]\),\!\(\*FormBox[\(_\),
TraditionalForm]\),\!\(\*FormBox[\(\(_\)\(}\)\),
TraditionalForm]\)...\!\(\*FormBox[\(}\),
TraditionalForm]\)..\!\(\*FormBox[\(}\),
TraditionalForm]\),opts:OptionsPattern[]] ";


IsInPolygonQ  ::usage="IsInPolygonQ[\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)testx,testy\!\(\*FormBox[\(}\),
TraditionalForm]\),\!\(\*FormBox[\({{\[Null]\),
TraditionalForm]\)x1,y1\!\(\*FormBox[\(}\),
TraditionalForm]\),\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)x2,y2\!\(\*FormBox[\(}\),
TraditionalForm]\),...\!\(\*FormBox[\(}\),
TraditionalForm]\)] returns true if \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)testx,testy\!\(\*FormBox[\(}\),
TraditionalForm]\) is inside a polygon defined by the points \!\(\*FormBox[\({{\[Null]\),
TraditionalForm]\)x1,y1\!\(\*FormBox[\(}\),
TraditionalForm]\),\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)x2,y2\!\(\*FormBox[\(}\),
TraditionalForm]\),...\!\(\*FormBox[\(}\),
TraditionalForm]\). 
The polygon can be closed or not. C\[Hyphen]code by W. Randolph Franklin
(http://www.ecse.rpi.edu/Homepages/wrf/Research/Short\!\(\*FormBox[\(_\),
TraditionalForm]\)Notes/pnpoly.html). 
J. Wesenberg, 2008 ";


FOpenTTTR  ::usage="FOpenTTTR[filename] opens a .tr3, .pt2, .pt3, .ht2, .ht3, or .ptu file given by filename. All TTTR\[Hyphen]Records are read into memory.
FOpenTTTR[] opens an dialog window for choosing the TTTR file to be read in.
FOpenTTTR[filename,\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)t1,t2\!\(\*FormBox[\(}\),
TraditionalForm]\)] opens the file filename and reads only the TTTR records measured between times t1 and t2 into memory. t1 and t2 are given in seconds.
Options:
 FCopyToLocalDisk\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)False (default)
If the option value is set to True, the file is copied into a temporary directory (\!\(\*FormBox[\($\),
TraditionalForm]\)TemporaryDirectory) before being opened. This might be faster if the original file is located on a network drive.
";


FShowHeader  ::usage="FShowHeader[] returns the header information of the last TTTR file opened. ";


FTTTRCreationTime  ::usage="FTTTRCreationTime[] returns the creation time of the current TTTR file as recorded in its header. ";


FGetT3rFilename  ::usage="FGetT3rFilename[] returns the filename of the last TTTR file opened. ";


FGetFromHeader  ::usage="FGetFromHeader[parametername\!\(\*FormBox[\(_\),
TraditionalForm]\)String] returns the value of the header parameter named by the string parametername. E.g., FGetFromHeader[\"TTResult\!\(\*FormBox[\(_\),
TraditionalForm]\)StopAfter\"] returns the total measurement time (in ms). ";


FGetStartTime  ::usage="FGetStartTime[] returns start time of TTTR data in milliseconds. ";


FGetStopTime  ::usage="FGetStopTime[] returns stop time of TTTR data in milliseconds. ";


FSaveAsHT3  ::usage="FSaveAsHT3[filename\!\(\*FormBox[\(_\),
TraditionalForm]\)String] saves the current TTTR data in ht3 format. ";


FOutput  ::usage="FOutput is an option for defining the output of some Fretica functions. In gerneral, the option value can be Foutput\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FGraph for graphical output or Foutput\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FData for numerical output. ";


FData  ::usage="FData is an option value for FOutput. ";


FGraph  ::usage="FGraph is an option value for FOutput. ";


FValidChannelQ  ::usage="FValidChannelQ[ch] returns True if ch is a valid lifetime channel, i.e., if ch is an integer with 1\!\(\*FormBox[\(<\),
TraditionalForm]\)\[LongEqual]ch\!\(\*FormBox[\(<\),
TraditionalForm]\)\[LongEqual]FMaxChannel. ";


FRealNumberQ  ::usage="FRealNumberQ[expr] returns True if expr is a real\[Hyphen]valued number and False otherwise. ";


FRouteList  ::usage="Pattern for selecting detection routes (e.g., \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)1,0,1,0\!\(\*FormBox[\(}\),
TraditionalForm]\) signifies detection routes 1 and 3). ";


FTimeWindow  ::usage="Option for defining a time window; can be All or \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)t1,t2\!\(\*FormBox[\(}\),
TraditionalForm]\) in seconds. ";


FChannelConstraints  ::usage="Option for specifying lifetime channel constraints. Possible values: Automatic, None, \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)c1,c2\!\(\*FormBox[\(}\),
TraditionalForm]\), or \!\(\*FormBox[\({{\[Null]\),
TraditionalForm]\)c1,c2\!\(\*FormBox[\(}\),
TraditionalForm]\)..\!\(\*FormBox[\(}\),
TraditionalForm]\). ";


FOpenHistoData  ::usage="FOpenHistoData[filename] returns a list of histograms stored in filename. filename must be of type .phu, .phd, or .hhd.
FOpenHistoData[] opens a dialog window for choosing the histogram file to be opened. ";


FGetRCM  ::usage="FGetRCM[] returns the currently used detection route correction matrix. ";


FSetRCM  ::usage="FSetRCM[rcm] sets the detection route correction matrix (RCM) used for photon burst identification and photon burst count correction for quantum yields, detection efficiency, and detection route crosstalk.
FSetRCM[filename] sets the RCM saved in filename
FSetRCM[] opens a dialog window for choosing RCM file. ";


FGetActiveRoutes  ::usage="FGetActiveRoutes[] returns the list of active detection routes. Photons in inactive detection routes are ignored in photon burst identification. ";


FSetActiveRoutes  ::usage="FSetActiveRoutes[routelist] sets the active detection routes. routelist must match FRouteList. Photons in inactive detection routes are ignored in photon burst identification. ";


FGetDirectAcceptorExcitation  ::usage="FGetDirectAcceptorExcitation[] returns the fraction \!\(\*FormBox[\(\[Alpha]\),
TraditionalForm]\) of direct acceptor excitation, i.e. \!\(\*FormBox[\(\[Alpha]\),
TraditionalForm]\)\[LongEqual]\!\(\*FormBox[\(\[Epsilon]\),
TraditionalForm]\)A/(\!\(\*FormBox[\(\[Epsilon]\),
TraditionalForm]\)D+\!\(\*FormBox[\(\[Epsilon]\),
TraditionalForm]\)A), where \!\(\*FormBox[\(\[Epsilon]\),
TraditionalForm]\)D and \!\(\*FormBox[\(\[Epsilon]\),
TraditionalForm]\)A are the donor and acceptor extinction coefficients, respectively, at the wavelength of donor excitation. ";


FSetDirectAcceptorExcitation  ::usage="FSetDirectAcceptorExcitation[\!\(\*FormBox[\(\[Alpha]\),
TraditionalForm]\)] sets the fraction of direct acceptor excitation to \!\(\*FormBox[\(\[Alpha]\),
TraditionalForm]\). \!\(\*FormBox[\(\[Alpha]\),
TraditionalForm]\) is defined by \!\(\*FormBox[\(\[Alpha]\),
TraditionalForm]\)\[LongEqual]\!\(\*FormBox[\(\[Epsilon]\),
TraditionalForm]\)A/(\!\(\*FormBox[\(\[Epsilon]\),
TraditionalForm]\)D+\!\(\*FormBox[\(\[Epsilon]\),
TraditionalForm]\)A), where \!\(\*FormBox[\(\[Epsilon]\),
TraditionalForm]\)D and \!\(\*FormBox[\(\[Epsilon]\),
TraditionalForm]\)A are the donor and acceptor extinction coefficients, respectively, at the wavelength of donor excitation. ";


FGetAnisotropyL1  ::usage="FGetAnisotropyL1[] returns the anisotropy correction factor L1. ";


FGetAnisotropyL2  ::usage="FGetAnisotropyL2[] returns the anisotropy correction factor L2. ";


FSetAnisotropyL1  ::usage="FSetAnisotropyL1[value] sets the anisotropy correction factor L1. ";


FSetAnisotropyL2  ::usage="FSetAnisotropyL2[value] sets the anisotropy correction factor L2. ";


FSetFRETRoutes  ::usage="FSetFRETRoutes[\!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"r\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"r\", \"TI\"], \"2\"], \*SubscriptBox[
StyleBox[\"r\", \"TI\"], \"3\"], \[Ellipsis]}\),
TraditionalForm]\)] sets which detection routes are used as donor or acceptor detection routes in a FRET measurement. For each detection channel \!\(\*FormBox[
StyleBox[\"i\", \"TI\"],
TraditionalForm]\) the possible values of \!\(\*FormBox[SubscriptBox[
StyleBox[\"r\", \"TI\"], 
StyleBox[\"i\", \"TI\"]],
TraditionalForm]\) are: \"D\", \"A\", or 0. Example: FSetFRETRoutes[\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)\"A\", \"D\",\"A\",\"D\",0 ,0 \!\(\*FormBox[\(}\),
TraditionalForm]\)]. ";


FGetFRETRoutes  ::usage="FGetFRETRoutes[] returns \!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"r\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"r\", \"TI\"], \"2\"], \*SubscriptBox[
StyleBox[\"r\", \"TI\"], \"3\"], \[Ellipsis]}\),
TraditionalForm]\), where for each detection channel \!\(\*FormBox[
StyleBox[\"i\", \"TI\"],
TraditionalForm]\), the possible values for \!\(\*FormBox[SubscriptBox[
StyleBox[\"r\", \"TI\"], 
StyleBox[\"i\", \"TI\"]],
TraditionalForm]\) are: \"D\", \"A\", or 0. ";


FGetDonorRoutes  ::usage="FGetDonorRoutes[] returns \!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"r\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"r\", \"TI\"], \"2\"], \*SubscriptBox[
StyleBox[\"r\", \"TI\"], \"3\"], \[Ellipsis]}\),
TraditionalForm]\), where for each detection channel \!\(\*FormBox[
StyleBox[\"i\", \"TI\"],
TraditionalForm]\), the value of \!\(\*FormBox[SubscriptBox[
StyleBox[\"r\", \"TI\"], 
StyleBox[\"i\", \"TI\"]],
TraditionalForm]\) is 1 if \!\(\*FormBox[
StyleBox[\"i\", \"TI\"],
TraditionalForm]\) is a donor detection route or 0 elsewise. ";


FGetAcceptorRoutes  ::usage="FGetAcceptorRoutes[] returns \!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"r\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"r\", \"TI\"], \"2\"], \*SubscriptBox[
StyleBox[\"r\", \"TI\"], \"3\"], \[Ellipsis]}\),
TraditionalForm]\), where for each detection channel \!\(\*FormBox[
StyleBox[\"i\", \"TI\"],
TraditionalForm]\), the value of \!\(\*FormBox[SubscriptBox[
StyleBox[\"r\", \"TI\"], 
StyleBox[\"i\", \"TI\"]],
TraditionalForm]\) is 1 if \!\(\*FormBox[
StyleBox[\"i\", \"TI\"],
TraditionalForm]\) is an acceptor detection route or 0 otherwise. ";


FSetAnisotropyRoutes  ::usage="FSetAnisotropyRoutes[\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)r1, r2, r3, \!\(\*FormBox[\(\(\[Ellipsis]\)\(}\)\),
TraditionalForm]\)] sets which detection routes are used for parallel (\"P\") or orthogonal (\"S\") detection routes in a FRET measurement. For each detection channel \!\(\*FormBox[
StyleBox[\"i\", \"TI\"],
TraditionalForm]\), the possible values for \!\(\*FormBox[SubscriptBox[
StyleBox[\"r\", \"TI\"], 
StyleBox[\"i\", \"TI\"]],
TraditionalForm]\) are: \"P\", \"S\", or 0. Example: FSetAnisotropyRoutes[\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)\"P\", \"P\",\"S\",\"S\",0 ,0 \!\(\*FormBox[\(}\),
TraditionalForm]\)]. 
In PIE/Alex measurements the polarization of the donor and acceptor excitation laser beams may differ. In this case one can use FSetAnisotropyRoutes[\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)r1, r2, r3, \!\(\*FormBox[\(\(\[Ellipsis]\)\(}\)\),
TraditionalForm]\), \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)rpie1, rpie2, rpie3, \!\(\*FormBox[\(\(\[Ellipsis]\)\(}\)\),
TraditionalForm]\)] to set the relative polarization for each laser separately. ";


FGetAnisotropyRoutes  ::usage="FGetAnisotropyRoutes[] returns \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)r1, r2, r3, \!\(\*FormBox[\(\(\[Ellipsis]\)\(}\)\),
TraditionalForm]\), where for each detection channel \!\(\*FormBox[
StyleBox[\"i\", \"TI\"],
TraditionalForm]\), the possible values for \!\(\*FormBox[SubscriptBox[
StyleBox[\"r\", \"TI\"], 
StyleBox[\"i\", \"TI\"]],
TraditionalForm]\) are: \"P\", \"S\", or 0. In PIE/Alex mode these are the assumed settings for the detection of photons after donor excitation. Call FGetPIEAnisotropyRoutes[] to get the settings for the detection after acceptor excitation. ";


FGetPIEAnisotropyRoutes  ::usage="FGetPIEAnisotropyRoutes[] returns \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)r1, r2, r3, \!\(\*FormBox[\(\(\[Ellipsis]\)\(}\)\),
TraditionalForm]\), where for each detection channel \!\(\*FormBox[
StyleBox[\"i\", \"TI\"],
TraditionalForm]\), the possible values for \!\(\*FormBox[SubscriptBox[
StyleBox[\"r\", \"TI\"], 
StyleBox[\"i\", \"TI\"]],
TraditionalForm]\) are: \"P\", \"S\", or 0. These settings apply in PIE/Alex mode and define which detection routes are considered to be parallel (\"P\") or orthogonal (\"S\") with respect to the polarization of the acceptor excitation light. Call FGetAnisotropyRoutes[] to get the settings for the detection after donor excitation. ";


FGetMarkerList  ::usage="FGetMarkerList[] returns a list of the special markers that are embedded in the TTTR records of the currently opened TTTR file. ";


FEnableChannelConstraints  ::usage="FEnableChannelConstraints[boolean] enables/disables channel\[Hyphen]constraining depending on whether boolean is True or False. ";


FGetChannelConstraints  ::usage="FGetChannelConstraints[route] returns the lifetime channel constraints of route.
 FGetChannelConstraints[] returns a list of lifetime channel constraints of all detection routes. ";


FSetChannelConstraints  ::usage="FSetChannelConstraints[route,\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)ch1,ch2\!\(\*FormBox[\(}\),
TraditionalForm]\)] sets the lifetime channel constraints of route to \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)ch1,ch2\!\(\*FormBox[\(}\),
TraditionalForm]\).
 FSetChannelConstraints[\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)ch1,ch2\!\(\*FormBox[\(}\),
TraditionalForm]\)] sets the lifetime channel constraints of all detection routes to \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)ch1,ch2\!\(\*FormBox[\(}\),
TraditionalForm]\). ";


FEnablePie  ::usage="FEnablePie[boolean] enables/disables pulsed interleaved excitation (PIE), depending on whether boolean is True or False. ";


FGetPIERoutes  ::usage="FGetPIERoutes[] returns the PIE detection route list. ";


FSetPIERoutes  ::usage="FSetPIERoutes[routelist] sets the PIE detection routes. routelist must match the FRouteList pattern. ";


FGetPIEChannelConstraints  ::usage="FGetPIEChannelConstraints[route] returns the PIE lifetime channel constraints of route.
 FGetPIEChannelConstraints[] returns a list of PIE lifetime channel constraints of all detection routes. ";


FSetPIEChannelConstraints  ::usage="FSetPIEChannelConstraints[route,\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)ch1,ch2\!\(\*FormBox[\(}\),
TraditionalForm]\)] sets the PIE lifetime channel constraints of route to \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)ch1,ch2\!\(\*FormBox[\(}\),
TraditionalForm]\).
 FSetPIEChannelConstraints[\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)ch1,ch2\!\(\*FormBox[\(}\),
TraditionalForm]\)] sets the PIE lifetime channel constraints of all detection routes to \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)ch1,ch2\!\(\*FormBox[\(}\),
TraditionalForm]\). ";


FSetPIEGamma  ::usage="FSetPIEGamma[value] sets \!\(\*FormBox[SubscriptBox[\(\[Gamma]\), \(PIE\)],
TraditionalForm]\), the factor by which the PIE channel photon counts are weighted in the formula of the stoichiometry ratio and transfer efficiency (\!\(\*SubscriptBox[\(S\), \(PIE\)]\) and \!\(\*SubscriptBox[\(E\), \(PIE\)]\)). ";


FGetPIEGamma  ::usage="FGetPIEGamma[] returns \!\(\*FormBox[SubscriptBox[\(\[Gamma]\), \(PIE\)],
TraditionalForm]\), the factor by which the PIE channel photon counts are weighted in the formula of the stoichiometry ratio and transfer efficiency (\!\(\*SubscriptBox[\(S\), \(PIE\)]\) and \!\(\*SubscriptBox[\(E\), \(PIE\)]\)). ";


FPIEChannelSelector  ::usage="FPIEChannelSelector[routelist] starts an interactive selection tool for setting the lifetime channel constraints used in PIE. routelist is a list of detection routes (e.g., routelist\[LongEqual]\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)1,2,3,4\!\(\*FormBox[\(}\),
TraditionalForm]\) represents detection routes 1,2,3, and 4.). ";


FShiftPhotonTimesByPicoseconds  ::usage="FShiftPhotonTimesByPicoseconds[dt\!\(\*FormBox[\(_\),
TraditionalForm]\)Integer,route\!\(\*FormBox[\(_\),
TraditionalForm]\)Integer] adds dt picoseconds to the time tags of all photons detected in route.
FShiftPhotonTimesByPicoseconds[\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)dt1, dt2 ..\!\(\*FormBox[\(}\),
TraditionalForm]\)] shifts route 1 by dt1, route 2 by dt2, etc.
";


FPCH  ::usage="FPCH[routelist, binning, opts] returns a photon counting histogram (PCH). Only detection routes specified in routelist are used. routelist must match the FRouteList pattern. binning is the bin width given in milliseconds.
 FPCH[binning, opts] returns a PCH of all photons.
 FPCH[\!\(\*FormBox[\({\*SubscriptBox[\(rl\), \(1\)], \*SubscriptBox[\(rl\), \(2\)],  ... }\),
TraditionalForm]\), binning, opts] returns PCHs for each routelist \!\(\*FormBox[SubscriptBox[\(rl\), \(1\)],
TraditionalForm]\), \!\(\*FormBox[\(\*SubscriptBox[\(rl\), \(2\)] ... \),
TraditionalForm]\)
 If the option FOutput is set to FOutput\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FGraph (default), FPCH returs a plot of the PCH data.
 If FOutput\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FData, the PCH data are returned as lists of \!\(\*FormBox[\({\*
StyleBox[\"x\", \"TI\"], \*
StyleBox[\"y\", \"TI\"]}\),
TraditionalForm]\) values.
 With the option FTimeWindow\!\(\*FormBox[\(\(\[Rule]\)\({\*SubscriptBox[
StyleBox[\"t\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"t\", \"TI\"], \"2\"]}\)\),
TraditionalForm]\), the PCH is calculated for photons measured in time interval \!\(\*FormBox[\((\*SubscriptBox[
StyleBox[\"t\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"t\", \"TI\"], \"2\"])\),
TraditionalForm]\).
 With the option FChannelConstraints\!\(\*FormBox[\(\(\[Rule]\)\({\*SubscriptBox[
StyleBox[\"c\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"c\", \"TI\"], \"2\"]}\)\),
TraditionalForm]\), only photons in the lifetime channel range \!\(\*FormBox[\((\*SubscriptBox[
StyleBox[\"c\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"c\", \"TI\"], \"2\"])\),
TraditionalForm]\) are used.
 All options of ListLogPlot can be used in FPCH for changing the graphical output.
  ";


FPCH3DG  ::usage="FPCH3DG[nmax,\!\(\*FormBox[\({{\[Null]\),
TraditionalForm]\)brightness1,nmean1\!\(\*FormBox[\(}\),
TraditionalForm]\),\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)brightness2,nmean2\!\(\*FormBox[\(}\),
TraditionalForm]\),..\!\(\*FormBox[\(}\),
TraditionalForm]\),\!\(\*FormBox[SubscriptBox[
StyleBox[\"n\", \"TI\"], \"bg\"],
TraditionalForm]\),F1,F2] calculates model PCH data assuming a 3D Gaussian confocal volume and a static distribution of particles.
nmax: maximum value of photon counts per bin up to which the model PCH is calculated
brightnessn: mean number of photons per bin for species n if the particle is located at the center of the confocal volume
nmeann: mean number of molecules of species n in the confocal volume
\!\(\*FormBox[SubscriptBox[
StyleBox[\"n\", \"TI\"], \"bg\"],
TraditionalForm]\): mean number of background photons per bin
F1, F2: correction factors (see Bo Huang et al., ChemPhysChem 2004, 5, 1523\[Hyphen]1531) 
";


FPCHFida  ::usage="FPCHFida[nmax, \!\(\*FormBox[\({{\*SubscriptBox[
StyleBox[\"B\", \"TI\"], \"1\"]\),
TraditionalForm]\), \!\(\*FormBox[\(\*SubscriptBox[
StyleBox[\"n\", \"TI\"], \"1\"]\(}\)\),
TraditionalForm]\), \!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"B\", \"TI\"], \"2\"]\),
TraditionalForm]\), \!\(\*FormBox[\(\*SubscriptBox[
StyleBox[\"n\", \"TI\"], \"2\"]\(}\)\),
TraditionalForm]\),..\!\(\*FormBox[\(}\),
TraditionalForm]\), \!\(\*FormBox[SubscriptBox[
StyleBox[\"n\", \"TI\"], \"bg\"],
TraditionalForm]\), \!\(\*FormBox[\({{\*SubscriptBox[
StyleBox[\"a\", \"TI\"], 
StyleBox[\"i\", \"TI\"]], \*
StyleBox[\"i\", \"TI\"]} ... }\),
TraditionalForm]\)]
calculates a model PCH as introduced in FIDA*, where the confocal volume is described generically by the function \!\(\*FormBox[\(\*
StyleBox[\"d\", \"TI\"] \*
StyleBox[\"V\", \"TI\"]/\*
StyleBox[\"d\", \"TI\"] \*
StyleBox[\"x\", \"TI\"] \[LongEqual] \*UnderscriptBox[\"\[Sum]\", 
StyleBox[\"i\", \"TI\"],\nLimitsPositioning->True]\*SubscriptBox[
StyleBox[\"a\", \"TI\"], 
StyleBox[\"i\", \"TI\"]] \*SuperscriptBox[
StyleBox[\"x\", \"TI\"], 
StyleBox[\"i\", \"TI\"]]\),
TraditionalForm]\). 
nmax: maximum value of photon counts per bin to which the model PCH is calculated
\!\(\*FormBox[SubscriptBox[
StyleBox[\"B\", \"TI\"], 
StyleBox[\"s\", \"TI\"]],
TraditionalForm]\): mean number of photons per bin for species \!\(\*FormBox[
StyleBox[\"s\", \"TI\"],
TraditionalForm]\) when the particle is located at the center of the confocal volume
\!\(\*FormBox[SubscriptBox[
StyleBox[\"n\", \"TI\"], 
StyleBox[\"s\", \"TI\"]],
TraditionalForm]\): mean number of molecules of species \!\(\*FormBox[
StyleBox[\"s\", \"TI\"],
TraditionalForm]\) in the confocal volume
\!\(\*FormBox[SubscriptBox[
StyleBox[\"n\", \"TI\"], \"bg\"],
TraditionalForm]\): mean number of background photons per bin
\!\(\*FormBox[\({{\*SubscriptBox[
StyleBox[\"a\", \"TI\"], 
StyleBox[\"i\", \"TI\"]], \*
StyleBox[\"i\", \"TI\"]} ... }\),
TraditionalForm]\) is a list of coefficients and exponents defining \!\(\*FormBox[\(\*
StyleBox[\"d\", \"TI\"] \*
StyleBox[\"V\", \"TI\"]/\*
StyleBox[\"d\", \"TI\"] \*
StyleBox[\"x\", \"TI\"] \[LongEqual] \*UnderscriptBox[\"\[Sum]\", 
StyleBox[\"i\", \"TI\"],\nLimitsPositioning->True]\*SubscriptBox[
StyleBox[\"a\", \"TI\"], 
StyleBox[\"i\", \"TI\"]] \*SuperscriptBox[
StyleBox[\"x\", \"TI\"], 
StyleBox[\"i\", \"TI\"]]\),
TraditionalForm]\). Note that \!\(\*FormBox[
StyleBox[\"i\", \"TI\"],
TraditionalForm]\) is not necessarily an integer. For example, \!\(\*FormBox[\(\*
StyleBox[\"d\", \"TI\"] \*
StyleBox[\"V\", \"TI\"]/\*
StyleBox[\"d\", \"TI\"] \*
StyleBox[\"x\", \"TI\"] \[LongEqual] \*SuperscriptBox[
StyleBox[\"x\", \"TI\"], 
RowBox[{\"1\", \"/\", \"2\"}]]\),
TraditionalForm]\) describes a 3D Gaussian confocal volume**. 

Kask, P., Palo, K., Ullman, D., and Gall, K. (1999) Proc. Natl. Acad. Sci. U. S. A. 96, 13756\[Hyphen]13761
* Meng, F., Ma, H. (2006) J.Phys. Chem. B, 110,25716\[Hyphen]25720
The PCH is calculated as described in Gopich, I., Szabo, A. (2005) J. Phys. Chem. B, 109, 17683\[Hyphen]17688. ";


FPCHFidaFit  ::usage="FPCHFidaFit[pchdat, \!\(\*FormBox[\({{\*SubscriptBox[
StyleBox[\"B\", \"TI\"], \"1\"]\),
TraditionalForm]\), \!\(\*FormBox[\(\*SubscriptBox[
StyleBox[\"n\", \"TI\"], \"1\"]\(}\)\),
TraditionalForm]\), \!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"B\", \"TI\"], \"2\"]\),
TraditionalForm]\), \!\(\*FormBox[\(\*SubscriptBox[
StyleBox[\"n\", \"TI\"], \"2\"]\(}\)\),
TraditionalForm]\),..\!\(\*FormBox[\(}\),
TraditionalForm]\), \!\(\*FormBox[SubscriptBox[
StyleBox[\"n\", \"TI\"], \"bg\"],
TraditionalForm]\), \!\(\*FormBox[\({{\*SubscriptBox[
StyleBox[\"a\", \"TI\"], 
StyleBox[\"i\", \"TI\"]], \*
StyleBox[\"i\", \"TI\"]} ... }\),
TraditionalForm]\), guess]
FPCHFidaFit fits the FIDA model to pchdat. 
\!\(\*FormBox[SubscriptBox[
StyleBox[\"B\", \"TI\"], 
StyleBox[\"s\", \"TI\"]],
TraditionalForm]\): Mean number of photons per bin for species \!\(\*FormBox[
StyleBox[\"s\", \"TI\"],
TraditionalForm]\) when the particle is located at the center of the confocal volume
\!\(\*FormBox[SubscriptBox[
StyleBox[\"n\", \"TI\"], 
StyleBox[\"s\", \"TI\"]],
TraditionalForm]\): Mean number of molecules of species \!\(\*FormBox[
StyleBox[\"s\", \"TI\"],
TraditionalForm]\) in the confocal volume
\!\(\*FormBox[SubscriptBox[
StyleBox[\"n\", \"TI\"], \"bg\"],
TraditionalForm]\): mean number of background photons per bin
\!\(\*FormBox[\({{\*SubscriptBox[
StyleBox[\"a\", \"TI\"], 
StyleBox[\"i\", \"TI\"]], \*
StyleBox[\"i\", \"TI\"]} ... }\),
TraditionalForm]\): List of coefficients and exponents defining \!\(\*FormBox[\(\*
StyleBox[\"d\", \"TI\"] \*
StyleBox[\"V\", \"TI\"]/\*
StyleBox[\"d\", \"TI\"] \*
StyleBox[\"x\", \"TI\"] \[LongEqual] \*UnderscriptBox[\"\[Sum]\", 
StyleBox[\"i\", \"TI\"],\nLimitsPositioning->True]\*SubscriptBox[
StyleBox[\"a\", \"TI\"], 
StyleBox[\"i\", \"TI\"]] \*SuperscriptBox[
StyleBox[\"x\", \"TI\"], 
StyleBox[\"i\", \"TI\"]]\),
TraditionalForm]\).
See the documentation of FPCHFida for more details. 
The option FConstraints allows constraints to be applied to the fit parameters.
(Default: FConstraints\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)None)
All options of ListLogPlot can be used in FPCH for changing the graphical output.
";


FPCHFidaGlobalFit  ::usage="FPCHFidaGlobalFit[\!\(\*FormBox[\({{\[Null]\),
TraditionalForm]\)pchdat1, \!\(\*FormBox[\({{\*SubscriptBox[
StyleBox[\"B\", \"TI\"], \"11\"], \*SubscriptBox[
StyleBox[\"n\", \"TI\"], \"11\"]}\),
TraditionalForm]\), \!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"B\", \"TI\"], \"12\"], \*SubscriptBox[
StyleBox[\"n\", \"TI\"], \"12\"]}\),
TraditionalForm]\), ..\!\(\*FormBox[\(}\),
TraditionalForm]\), \!\(\*FormBox[\(\*SubscriptBox[
StyleBox[\"n\", \"TI\"], \"bg1\"]\(}\)\),
TraditionalForm]\), \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)pchdat2, \!\(\*FormBox[\({{\*SubscriptBox[
StyleBox[\"B\", \"TI\"], \"21\"], \*SubscriptBox[
StyleBox[\"n\", \"TI\"], \"21\"]}\),
TraditionalForm]\), \!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"B\", \"TI\"], \"22\"], \*SubscriptBox[
StyleBox[\"n\", \"TI\"], \"22\"]}\),
TraditionalForm]\), ..\!\(\*FormBox[\(}\),
TraditionalForm]\), \!\(\*FormBox[\(\*SubscriptBox[
StyleBox[\"n\", \"TI\"], \"bg2\"]\(}\)\),
TraditionalForm]\), ..\!\(\*FormBox[\(\(}\)\(}\)\),
TraditionalForm]\), \!\(\*FormBox[\({{\*SubscriptBox[
StyleBox[\"a\", \"TI\"], 
StyleBox[\"i\", \"TI\"]], \*
StyleBox[\"i\", \"TI\"]} ... }\),
TraditionalForm]\), guess]
FPCHFidaGlobalFit performs a global fit of the FIDA model to the PCH data pchdat1, pchdat2,... 
The model parameters are described in the documentation of FPCHFida. 
The option FConstraints allows constraints to be applied to the fit parameters. (Default: FConstraints\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)None)
All options of ListLogPlot can be used in FPCH for changing the graphical output.
";


FFindBurstsDeltaT  ::usage="FFindBurstsDeltaT[\!\(\*FormBox[\(\[CapitalDelta] \*SubscriptBox[
StyleBox[\"t\", \"TI\"], \"max\"]\),
TraditionalForm]\), \!\(\*FormBox[SubscriptBox[
StyleBox[\"N\", \"TI\"], \"min\"],
TraditionalForm]\), \!\(\*FormBox[SubscriptBox[
StyleBox[\"N\", \"TI\"], \"max\"],
TraditionalForm]\)] 
replaces the current burst list. The new fluorescence photon bursts are identified using the DeltaT method. This algorithm identifies sequences of consecutive photons for which all interphoton times \!\(\*FormBox[\(\*
StyleBox[\"d\", \"TI\"] \*SubscriptBox[
StyleBox[\"t\", \"TI\"], 
StyleBox[\"i\", \"TI\"]]\),
TraditionalForm]\) are less than \!\(\*FormBox[\(\[CapitalDelta] \*SubscriptBox[
StyleBox[\"t\", \"TI\"], \"max\"]\),
TraditionalForm]\) (given in seconds). To correct for different quantum yields and detection efficiencies, the interphoton times are weighted by the reciprocal diagonal elements of the route correction matrix (RCM), i.e., the interphoton time between two photons detected at times \!\(\*FormBox[SubscriptBox[
StyleBox[\"t\", \"TI\"], 
RowBox[{
StyleBox[\"i\", \"TI\"], \"-\", \"1\"}]],
TraditionalForm]\) and \!\(\*FormBox[SubscriptBox[
StyleBox[\"t\", \"TI\"], 
StyleBox[\"i\", \"TI\"]],
TraditionalForm]\) is calculated as \!\(\*FormBox[\(\*
StyleBox[\"d\", \"TI\"] \*SubscriptBox[
StyleBox[\"t\", \"TI\"], 
StyleBox[\"i\", \"TI\"]] \[LongEqual] \((\*SubscriptBox[
StyleBox[\"t\", \"TI\"], 
StyleBox[\"i\", \"TI\"]] - \*SubscriptBox[
StyleBox[\"t\", \"TI\"], 
RowBox[{
StyleBox[\"i\", \"TI\"], \"-\", \"1\"}]])\)/\),
TraditionalForm]\)RCM\!\(\*FormBox[SubscriptBox[\"\[Null]\", 
RowBox[{SubscriptBox[
StyleBox[\"r\", \"TI\"], 
StyleBox[\"i\", \"TI\"]], \",\", SubscriptBox[
StyleBox[\"r\", \"TI\"], 
StyleBox[\"i\", \"TI\"]]}]],
TraditionalForm]\), where RCM\!\(\*FormBox[SubscriptBox[\"\[Null]\", 
RowBox[{SubscriptBox[
StyleBox[\"r\", \"TI\"], 
StyleBox[\"i\", \"TI\"]], \",\", SubscriptBox[
StyleBox[\"r\", \"TI\"], 
StyleBox[\"i\", \"TI\"]]}]],
TraditionalForm]\) is the diagonal element corresponding to the detection route \!\(\*FormBox[SubscriptBox[
StyleBox[\"r\", \"TI\"], 
StyleBox[\"i\", \"TI\"]],
TraditionalForm]\) of the \!\(\*FormBox[
StyleBox[\"i\", \"TI\"],
TraditionalForm]\)th photon.
An identified sequence of consecutive photons is classified as a burst if
\!\(\*FormBox[\(\*SubscriptBox[
StyleBox[\"N\", \"TI\"], \"min\"] < \*SubsuperscriptBox[
StyleBox[\"N\", \"TI\"], \"tot\", \"corr\"] < \*SubscriptBox[
StyleBox[\"N\", \"TI\"], \"max\"]\),
TraditionalForm]\),
where \!\(\*FormBox[SubsuperscriptBox[
StyleBox[\"N\", \"TI\"], \"tot\", \"corr\"],
TraditionalForm]\) is the corrected total number of photons in the sequence given by 
\!\(\*FormBox[\(\*SubsuperscriptBox[
StyleBox[\"N\", \"TI\"], \"tot\", \"corr\"]\(\[LongEqual]\)\),
TraditionalForm]\)Total[ RCM.\!\(\*FormBox[\((\*
StyleBox[\"n\", \"TI\"] - \*
StyleBox[\"b\", \"TI\"] \*
StyleBox[\"T\", \"TI\"])\),
TraditionalForm]\) ].
Here \!\(\*FormBox[\(\*
StyleBox[\"n\", \"TI\"] \[LongEqual] {\*SubscriptBox[
StyleBox[\"n\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"n\", \"TI\"], \"2\"],  .. }\),
TraditionalForm]\) is the list of photon counts of the sequence detected in routes \!\(\*FormBox[\(\*
StyleBox[\"r\", \"TI\"] \[LongEqual] 1, 2,  .. \),
TraditionalForm]\), RCM is the route correction matrix, \!\(\*FormBox[\(\*
StyleBox[\"b\", \"TI\"] \[LongEqual] {\*SubscriptBox[
StyleBox[\"b\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"b\", \"TI\"], \"2\"],  .. }\),
TraditionalForm]\) is the list of background count rates of routes \!\(\*FormBox[\(\*
StyleBox[\"r\", \"TI\"] \[LongEqual] 1, 2,  .. \),
TraditionalForm]\), and \!\(\*FormBox[
StyleBox[\"T\", \"TI\"],
TraditionalForm]\) is the duration of the sequence. The background rates need to be set beforehand with FSetBackground or FDetermineBackground, and the RCM needs to be set with FSetRCM. A burst starts and ends with the first and last photon, respectively, for which \!\(\*FormBox[\(\*
StyleBox[\"d\", \"TI\"] \*SubscriptBox[
StyleBox[\"t\", \"TI\"], 
StyleBox[\"i\", \"TI\"]] < \[CapitalDelta] \*SubscriptBox[
StyleBox[\"t\", \"TI\"], \"max\"]\),
TraditionalForm]\). 
Only photons of active detection routes are used for burst identification (see FSetActiveRoutes). If channel constraints are enabled (see FEnableChannelConstraints) but PIE mode is not enabled, only photon's within the main channel ranges are used for identification (see FSetChannelConstraints and FGetChannelConstraints). 
If PIE is enabled (see FEnablePIE), the identification algorithm can be modified using the FPIEBurstIdentificationMethod option. Possible settings are:
 FPIEBurstIdentificationMethod\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FMainChannelAboveThreshold (default)
 FPIEBurstIdentificationMethod\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FMainChannelOrPieChannelAboveThreshold
 FPIEBurstIdentificationMethod\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FMainChannelPlusPieChannelAboveThreshold
 FPIEBurstIdentificationMethod\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FPieChannelAboveThreshold
 FPIEBurstIdentificationMethod\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FDualChannelBurstSearch
";


FFindBurstsFromTimeBinnedData  ::usage="FFindBurstsFromTimeBinnedData[ \!\(\*FormBox[SubscriptBox[
StyleBox[\"T\", \"TI\"], \"binning\"],
TraditionalForm]\), \!\(\*FormBox[SubsuperscriptBox[
StyleBox[\"N\", \"TI\"], \"min\", \"bin\"],
TraditionalForm]\), \!\(\*FormBox[SubsuperscriptBox[
StyleBox[\"N\", \"TI\"], \"min\", \"burst\"],
TraditionalForm]\), \!\(\*FormBox[SubsuperscriptBox[
StyleBox[\"N\", \"TI\"], \"max\", \"burst\"],
TraditionalForm]\), opts]
replaces the current burst list. The new fluorescence photon bursts are identified using time\[Hyphen]binned data, with \!\(\*FormBox[SubscriptBox[
StyleBox[\"T\", \"TI\"], \"binning\"],
TraditionalForm]\) given in milliseconds. For each bin, the corrected total number of photons \!\(\*FormBox[SubsuperscriptBox[
StyleBox[\"N\", \"TI\"], \"tot\", \"corr\"],
TraditionalForm]\) is calculated from 
\!\(\*FormBox[\(\*SubsuperscriptBox[
StyleBox[\"N\", \"TI\"], \"tot\", \"corr\"]\(\[LongEqual]\)\),
TraditionalForm]\)Total[ RCM.\!\(\*FormBox[\((\*
StyleBox[\"n\", \"TI\"] - \*
StyleBox[\"b\", \"TI\"] \*
StyleBox[\"T\", \"TI\"])\),
TraditionalForm]\) ].
Here \!\(\*FormBox[\(\*
StyleBox[\"n\", \"TI\"] \[LongEqual] {\*SubscriptBox[
StyleBox[\"n\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"n\", \"TI\"], \"2\"],  .. }\),
TraditionalForm]\) is the list of photon counts of the sequence detected in routes \!\(\*FormBox[\(\*
StyleBox[\"r\", \"TI\"] \[LongEqual] 1, 2,  .. \),
TraditionalForm]\), RCM is the route correction matrix, \!\(\*FormBox[\(\*
StyleBox[\"b\", \"TI\"] \[LongEqual] {\*SubscriptBox[
StyleBox[\"b\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"b\", \"TI\"], \"2\"],  .. }\),
TraditionalForm]\) is the list of background count rates of routes \!\(\*FormBox[\(\*
StyleBox[\"r\", \"TI\"] \[LongEqual] 1, 2,  .. \),
TraditionalForm]\), and \!\(\*FormBox[
StyleBox[\"T\", \"TI\"],
TraditionalForm]\) is the duration of the sequence. The background count rates need to be set beforehand with FSetBackground or FDetermineBackground, and the RCM needs to be set with FSetRCM. 
There are two modes that can be selected with the option CombineContiguousBins:
1. CombineContiguousBins\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)True (default): Consecutive bins with \!\(\*FormBox[\(\*SubsuperscriptBox[
StyleBox[\"N\", \"TI\"], \"tot\", \"corr\"] > \*SubsuperscriptBox[
StyleBox[\"N\", \"TI\"], \"min\", \"bin\"]\),
TraditionalForm]\) photons are combined into one photon burst if the total corrected number of photons is greater than (\!\(\*FormBox[\(>\),
TraditionalForm]\)) \!\(\*FormBox[SubsuperscriptBox[
StyleBox[\"N\", \"TI\"], \"min\", \"burst\"],
TraditionalForm]\).
2. CombineContiguousBins\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)False: Consecutive bins are not combined, so all photon bursts have the maximal duration of one time bin. Photon bursts must contain more than \!\(\*FormBox[SubsuperscriptBox[
StyleBox[\"N\", \"TI\"], \"min\", \"bin\"],
TraditionalForm]\) photons in a bin. The value of \!\(\*FormBox[SubsuperscriptBox[
StyleBox[\"N\", \"TI\"], \"min\", \"burst\"],
TraditionalForm]\) is ignored in this mode, but \!\(\*FormBox[SubsuperscriptBox[
StyleBox[\"N\", \"TI\"], \"max\", \"burst\"],
TraditionalForm]\) applies. 

Photon bursts with a total number of photons greater than \!\(\*FormBox[SubsuperscriptBox[
StyleBox[\"N\", \"TI\"], \"max\", \"burst\"],
TraditionalForm]\) are excluded.
Note that in Fretica identified bursts start and end with their first and last photons, respectively. The start and end times of bursts are therefore not identical to the boundaries of the corresponding time bins. These can be calculated from the binning interval if needed. 
 Options for PIE:
 \!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)FPIEBurstIdentificationMethod\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FMainChannelAboveThreshold (default)
 \!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)FPIEBurstIdentificationMethod\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FMainChannelOrPieChannelAboveThreshold
  FPIEBurstIdentificationMethod\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FMainChannelPlusPieChannelAboveThreshold
  FPIEBurstIdentificationMethod\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FPieChannelAboveThreshold
  FPIEBurstIdentificationMethod\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FDualChannelBurstSearch
";


FReduceToBurstPhotons  ::usage="FReduceToBurstPhotons[] deletes all photons which are not part of a photon burst. The TTTR file has to be reopened for undoing this operation. ";


FDeleteSelectedBursts  ::usage="FDeleteSelectedBursts[] deletes all photon bursts from the photon burst list with the attribute \"Selected\" \[LongEqual] 1. ";


FDeleteNonSelectedBursts  ::usage="FDeleteNonSelectedBursts[] deletes all photon bursts from the photon burst list with the attribute \"Selected\" \[LongEqual] 0. ";


FSplitBursts  ::usage="FSplitBursts[binwidth] splits all photon bursts into shorter photon bursts of length binwidth, with binwidth in milliseconds. ";


FExpandBurstsSymmetrically  ::usage="FExpandBurstsSymmetrically[\!\(\*FormBox[
StyleBox[
RowBox[{\"d\", \"t\"}], \"TI\"],
TraditionalForm]\)] expands photon bursts by including all photons detected in the interval \!\(\*FormBox[\(\([\)\(\*SubscriptBox[
StyleBox[\"t\", \"TI\"], \"0\"] - \*
StyleBox[\"d\", \"TI\"] \*
StyleBox[\"t\", \"TI\"], \*SubscriptBox[
StyleBox[\"t\", \"TI\"], \"0\"] + \*
StyleBox[\"d\", \"TI\"] \*
StyleBox[\"t\", \"TI\"]\)\(]\)\),
TraditionalForm]\), where \!\(\*FormBox[SubscriptBox[
StyleBox[\"t\", \"TI\"], \"0\"],
TraditionalForm]\) is the photon burst midpoint in both time directions (times in milliseconds). Overlapping photon bursts are merged into one photon burst. The photon burst can also shrink if \!\(\*FormBox[\(2 \*
StyleBox[\"d\", \"TI\"] \*
StyleBox[\"t\", \"TI\"]\),
TraditionalForm]\) is shorter than the original photon burst duration. ";


FCombineContiguousBins  ::usage="Option for FFindBurstsFromTimeBinnedData. Possible values: True (default) or False. ";


FPIEBurstIdentificationMethod  ::usage="Option for specifying how photon bursts are identified in PIE measurements. See documentation on FFindBurstsFromTimeBinnedData. ";


FMainChannelAboveThreshold  ::usage="Option value of FPIEBurstIdentificationMethod. ";


FMainChannelOrPieChannelAboveThreshold  ::usage="Option value of FPIEBurstIdentificationMethod. ";


FMainChannelPlusPieChannelAboveThreshold  ::usage="Option value of FPIEBurstIdentificationMethod. ";


FPieChannelAboveThreshold ::usage="Option value of FPIEBurstIdentificationMethod. ";


FDualChannelBurstSearch::usage="Option value of FPIEBurstIdentificationMethod. ";


FUpdateBurstCounts  ::usage="FUpdateBurstCounts[] recounts for all photon bursts the numbers of photons for all detection routes. ";


FMCStrace  ::usage="FMCStrace[\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)routelist\!\(\*FormBox[SubscriptBox[\(\[Null]\), \(1\)],
TraditionalForm]\), routelist\!\(\*FormBox[SubscriptBox[\(\[Null]\), \(2\)],
TraditionalForm]\),...\!\(\*FormBox[\(}\),
TraditionalForm]\), binwidth, \!\(\*FormBox[SubscriptBox[
StyleBox[\"t\", \"TI\"], \"1\"],
TraditionalForm]\), \!\(\*FormBox[SubscriptBox[
StyleBox[\"t\", \"TI\"], \"2\"],
TraditionalForm]\)]
returns a list of binned photon (multi\[Hyphen]channel scaler, MCS) traces. routelist\!\(\*FormBox[SubscriptBox[\"\[Null]\", 
StyleBox[\"i\", \"TI\"]],
TraditionalForm]\) defines the combination of detection routes and lifetime channels represented in the \!\(\*FormBox[
StyleBox[\"i\", \"TI\"],
TraditionalForm]\)th MCS trace.
routelist\!\(\*FormBox[SubscriptBox[\"\[Null]\", 
StyleBox[\"i\", \"TI\"]],
TraditionalForm]\) is either of the form \!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"r\", \"TI\"], 
RowBox[{
StyleBox[\"i\", \"TI\"], \"1\"}]]\),
TraditionalForm]\), \!\(\*FormBox[SubscriptBox[
StyleBox[\"r\", \"TI\"], 
RowBox[{
StyleBox[\"i\", \"TI\"], \"2\"}]],
TraditionalForm]\), ...\!\(\*FormBox[\(}\),
TraditionalForm]\) or \!\(\*FormBox[\({{\*SubscriptBox[
StyleBox[\"r\", \"TI\"], 
RowBox[{
StyleBox[\"i\", \"TI\"], \"1\"}]]\),
TraditionalForm]\), \!\(\*FormBox[SubscriptBox[
StyleBox[\"r\", \"TI\"], 
RowBox[{
StyleBox[\"i\", \"TI\"], \"2\"}]],
TraditionalForm]\), ...\!\(\*FormBox[\(}\),
TraditionalForm]\),\!\(\*FormBox[\(\({\*SubscriptBox[
StyleBox[\"c\", \"TI\"], 
RowBox[{
StyleBox[\"i\", \"TI\"], \"1\"}]], \*SubscriptBox[
StyleBox[\"c\", \"TI\"], 
RowBox[{
StyleBox[\"i\", \"TI\"], \"2\"}]]}\)\(}\)\),
TraditionalForm]\), where \!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"r\", \"TI\"], 
RowBox[{
StyleBox[\"i\", \"TI\"], \"1\"}]]\),
TraditionalForm]\), \!\(\*FormBox[SubscriptBox[
StyleBox[\"r\", \"TI\"], 
RowBox[{
StyleBox[\"i\", \"TI\"], \"2\"}]],
TraditionalForm]\), ...\!\(\*FormBox[\(}\),
TraditionalForm]\) is a sequence of ones and zeros defining which detector routes are contained or not contained in the \!\(\*FormBox[
StyleBox[\"i\", \"TI\"],
TraditionalForm]\)th trace. \!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"c\", \"TI\"], 
RowBox[{
StyleBox[\"i\", \"TI\"], \"1\"}]], \*SubscriptBox[
StyleBox[\"c\", \"TI\"], 
RowBox[{
StyleBox[\"i\", \"TI\"], \"2\"}]]}\),
TraditionalForm]\) define lifetime channel constraints. binwidth is the binning in milliseconds. \!\(\*FormBox[SubscriptBox[
StyleBox[\"t\", \"TI\"], \"1\"],
TraditionalForm]\) and \!\(\*FormBox[SubscriptBox[
StyleBox[\"t\", \"TI\"], \"2\"],
TraditionalForm]\) (given in seconds) define the start and end times of the MCS traces. 
 Options:
 \!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)FOutput\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FGraph (default)
 \!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)FOutput\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FData
\!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\) Weights\!\(\*FormBox[\(\(\[Rule]\)\({\*SubscriptBox[
StyleBox[\"w\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"w\", \"TI\"], \"2\"],  ... }\)\),
TraditionalForm]\) multiplies the first trajectory with \!\(\*FormBox[SubscriptBox[
StyleBox[\"w\", \"TI\"], \"1\"],
TraditionalForm]\), the second with \!\(\*FormBox[SubscriptBox[
StyleBox[\"w\", \"TI\"], \"2\"],
TraditionalForm]\), etc.
\!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\) FShowBursts\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)True (default is False) Start and end of each photon burst is indicated by a horizontal line.
\!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\) FShowBurstsLevel\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)value sets \!\(\*FormBox[
StyleBox[\"y\", \"TI\"],
TraditionalForm]\)\[Hyphen]position of the horizontal lines indicating photon bursts.
\!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\) FBurstData\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)All (default) All photon bursts are indicated.
 \!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)FBurstData\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FSelectedBursts  Only selected photon bursts are indicated.
All options of ListPlot can be used for modifying the graphical output. ";


FShowBursts  ::usage="FShowBursts is an option of FMCStrace. ";


FShowBurstsLevel  ::usage="FShowBurstsLevel is an option of FMCStrace. ";


FLifeTimeHisto  ::usage="FLifeTimeHisto[opts] returns fluorescence lifetime histograms.
 Options:
 \!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)FOutput\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FGraph (default)
 \!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)FOutput\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FData
 
 \!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)FPhotonData\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FBursts (only photons in photon bursts, default)
 \!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)FPhotonData\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)All (all photons)
 \!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)FPhotonData\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FNonBursts (all photons not in photon bursts)
 \!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)FPhotonData\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FSelectedBursts (all photons in selected photon bursts)
 
 \!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)FRoutes\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)All (default)
 \!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)FRoutes\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)routelist (e.g. \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)1,3\!\(\*FormBox[\(}\),
TraditionalForm]\) for detection route 1 and 3\!\(\*FormBox[\(}\),
TraditionalForm]\) ";


FRoutes  ::usage="Option for FLifeTimeHisto. ";


FCalcBurstLifeTimes  ::usage="FCalcBurstLifeTimes[route, \!\(\*FormBox[SubscriptBox[
StyleBox[\"t\", \"TI\"], \"0\"],
TraditionalForm]\)] calculates for each photon burst the mean microtime of the photons detected in route. \!\(\*FormBox[SubscriptBox[
StyleBox[\"t\", \"TI\"], \"0\"],
TraditionalForm]\) is subtracted from the result. 
FCalcBurstLifeTimes[route, \!\(\*FormBox[SubscriptBox[
StyleBox[\"t\", \"TI\"], \"0\"],
TraditionalForm]\), \!\(\*SubscriptBox[
StyleBox[\"t\",\nFontSlant->\"Italic\"], \(min\)]\), \!\(\*SubscriptBox[
StyleBox[\"t\",\nFontSlant->\"Italic\"], \(max\)]\)] limits the calculation to the time interval (\!\(\*SubscriptBox[\(t\), \(min\)]\), \!\(\*SubscriptBox[\(t\), \(max\)]\)). All times are in nanoseconds. Only photons of the main channel range are used, when constraints are enabled.
";


FPhotonData  ::usage="Option for FLifeTimeHisto. Possible values: All, FBursts, FNonBursts, and FSelectedBursts. ";


FBursts  ::usage="Option value for FPhotonData. ";


FNonBursts  ::usage="Option value for FPhotonData. ";


FSelectedBursts  ::usage="Option value for FBurstData and FPhotonData. ";


FDetermineBackground  ::usage="FDetermineBackground[] estimates and sets background count rates for all detection routes from the total of all non\[Hyphen]burst photons divided by the total measurement time excluding bursts.
If applied iteratively following photon burst identification, the resulting background rates converge to meaningful values. If PIE is enabled, the background rates in the PIE channels are also determined (see also: FGetPIEBackground). ";


FGetBackground  ::usage="FGetBackground[] returns a list of the background photon count rates (in sec\!\(\*FormBox[SuperscriptBox[\(\[Null]\), \(-1\)],
TraditionalForm]\)) for all detection routes. ";


FSetBackground  ::usage="FSetBackground[bglist] sets the background photon count rates (in sec\!\(\*FormBox[SuperscriptBox[\(\[Null]\), \(-1\)],
TraditionalForm]\)) for the detection routes. ";


FGetPIEBackground  ::usage="FGetPIEBackground[] returns a list of the background photon count rates (in sec\!\(\*FormBox[SuperscriptBox[\(\[Null]\), \(-1\)],
TraditionalForm]\)) for all detection routes for the PIE signal. ";


FSetPIEBackground  ::usage="FSetPIEBackground[bglist] sets the background photon rates (in sec\!\(\*FormBox[SuperscriptBox[\(\[Null]\), \(-1\)],
TraditionalForm]\)) for the detection routes for the PIE signal. ";


FPBurstParameters:=
"
\"n1\", \"n2\", etc.:   Uncorrected detector counts. 
\"n1\!\(\*FormBox[\(_\),
TraditionalForm]\)corr\", \"n2\!\(\*FormBox[\(_\),
TraditionalForm]\)corr\", etc.:   Detector counts corrected for background and RCM, but not for acceptor direct excitation, i.e. \"n\!\(\*FormBox[\(\*
StyleBox[\"i\", \"TI\"] _\),
TraditionalForm]\)corr\" represents the \!\(\*FormBox[
StyleBox[\"i\", \"TI\"],
TraditionalForm]\)th element of the vector \!\(\*FormBox[\(\*SubscriptBox[
StyleBox[\"n\", \"TI\"], 
StyleBox[
RowBox[{\"c\", \"o\", \"r\", \"r\"}], \"TI\"]]\(\[LongEqual]\)\),
TraditionalForm]\)RCM.\!\(\*FormBox[\((\*
StyleBox[\"n\", \"TI\"] - \*
StyleBox[\"b\", \"TI\"] \*
StyleBox[\"g\", \"TI\"])\),
TraditionalForm]\). 
\"n\!\(\*FormBox[\(_\),
TraditionalForm]\)corr\":   Total photon number in photon burst, corrected for background and RCM. 
\"nA\!\(\*FormBox[\(_\),
TraditionalForm]\)raw\", \"nD\!\(\*FormBox[\(_\),
TraditionalForm]\)raw\":   Uncorrected total acceptor and donor counts. 
\"nA\", \"nD\":   Background\[Hyphen] and RCM\[Hyphen]corrected total acceptor and total donor counts, not corrected for acceptor direct excitation. 

\"n1pie\", \"n2pie\", etc.:   Counts in the PIE channels. 
\"n1pie\!\(\*FormBox[\(_\),
TraditionalForm]\)corr\", \"n2pie\!\(\*FormBox[\(_\),
TraditionalForm]\)corr\", etc.:   Background\[Hyphen]corrected counts in the PIE channels. 
\"nApie_raw\", \"nDpie_raw\":   Uncorrected total acceptor and donor counts in the PIE channels. 
\"nApie\", \"nDpie\":   Background corrected total acceptor and total donor counts in the PIE channels.

\"E\" , \"LogNdOverNa\", \"Root6NdOverNa\":   Transfer efficiency and related quantities corrected for background, RCM, and acceptor direct excitation \[Alpha]. E is calculated from (nA-\[Alpha](nA+nD))/(nA+nD-\[Alpha](nA+nD))
\"Epie\":   Transfer efficiency corrected for background, RCM, and acceptor direct excitation \!\(\*
StyleBox[\"d\",\nFontSlant->\"Italic\"]\). \!\(\*
StyleBox[\"E\",\nFontSlant->\"Italic\"]\) is calculated from (nA- \!\(\*
StyleBox[\"d\",\nFontSlant->\"Italic\"]\) nA\!\(\*FormBox[\(_\),
TraditionalForm]\)pie)/(nA+nD- \!\(\*
StyleBox[\"d\",\nFontSlant->\"Italic\"]\) nA\!\(\*FormBox[\(_\),
TraditionalForm]\)pie) with \!\(\*
StyleBox[\"d\",\nFontSlant->\"Italic\"]\)=\!\(\*SubscriptBox[\(\[Gamma]\), 
StyleBox[
RowBox[{\"p\", \"i\", \"e\"}], \"TI\"]]\)(\[Alpha]/(1-\[Alpha]).
\"Spie\" or \"StoichiometryRatio\":   Calculated from (nA+nD)/(nA+nD+\!\(\*FormBox[SubscriptBox[\"\[Gamma]\", 
StyleBox[
RowBox[{\"p\", \"i\", \"e\"}], \"TI\"]],
TraditionalForm]\)(nA\!\(\*FormBox[\(_\),
TraditionalForm]\)pie)). 
\"Eapp\" and \"Sapp\":   cacluate apparent values from the burst counts that are only corrected for background, but not for RCM, \[Alpha] or \[Gamma]pie. 
\"ProximityRatio\":   \"nA\!\(\*FormBox[\(_\),
TraditionalForm]\)raw\"/(\"nA\!\(\*FormBox[\(_\),
TraditionalForm]\)raw\"+\"nD\!\(\*FormBox[\(_\),
TraditionalForm]\)raw\"). 
\"BVA_ProximityRatios\!\(\*
StyleBox[\"n\",\nFontSlant->\"Italic\"]\)\":   Proximity ratios for burst variance analysis (BVA). \!\(\*
StyleBox[\"n\",\nFontSlant->\"Italic\"]\) is any integer larger 2, idnicating the partition of each bursts in segements of \!\(\*
StyleBox[\"n\",\nFontSlant->\"Italic\"]\) photons. 

\"StartTime\", \"EndTime\":   Detection times of the first and last photons in a burst, respectively (in seconds). 
\"BurstDuration\":   Durations (\"EndTime\"\[Hyphen]\"StartTime\") of the photon bursts (in seconds). 
\"tau1\", \"tau2\", etc.:   Mean fluorescence lifetimes. Needs to be calculated by calling FCalcBurstLifeTimes beforehand. 
\"tavgD\", \"tavgA\":   Mean arrival (detection) times of donor and acceptor photons, respectively. 
\"BurstAsymmetry\":   Equivalent to \"tavgA\"\[Hyphen]\"tavgD\". 
\"tavg\":   Mean arrival (detection) times. If PIE is enabled, only the photons in the main lifetime channels are used. 
\"tavg\!\(\*FormBox[\(_\),
TraditionalForm]\)pie\":   Mean arrival (detection) times of photons in PIE lifetime channels. 
\"BurstPIEAsymmetry\":   Equivalent to \"tavg\"\[Hyphen]\"tavg\!\(\*FormBox[\(_\),
TraditionalForm]\)pie\". 
\"DonorAnisotropy\":   calculates \!\(\*FormBox[\(\((\*SubscriptBox[
StyleBox[\"n\", \"TI\"], 
StyleBox[\"p\", \"TI\"]] - \*SubscriptBox[
StyleBox[\"n\", \"TI\"], 
StyleBox[\"s\", \"TI\"]])\)/\((\((1 - 3 \*SubscriptBox[
StyleBox[\"L\", \"TI\"], \"2\"])\) \*SubscriptBox[
StyleBox[\"n\", \"TI\"], 
StyleBox[\"p\", \"TI\"]] + \((2 - 3 \*SubscriptBox[
StyleBox[\"L\", \"TI\"], \"1\"])\) \*SubscriptBox[
StyleBox[\"n\", \"TI\"], 
StyleBox[\"s\", \"TI\"]])\))\),
TraditionalForm]\), where \!\(\*FormBox[SubscriptBox[
StyleBox[\"n\", \"TI\"], 
StyleBox[\"p\", \"TI\"]],
TraditionalForm]\) and \!\(\*FormBox[SubscriptBox[
StyleBox[\"n\", \"TI\"], 
StyleBox[\"s\", \"TI\"]],
TraditionalForm]\) are background and RCM\[Hyphen]corrected photon counts of the parallel and orthogonal donor detection routes, respectively. \!\(\*FormBox[SubscriptBox[
StyleBox[\"L\", \"TI\"], \"1\"],
TraditionalForm]\) and \!\(\*FormBox[SubscriptBox[
StyleBox[\"L\", \"TI\"], \"2\"],
TraditionalForm]\) are correction factors set using FSetAnisotropyL1 and FSetAnisotropyL2. 
\"AcceptorAnisotropy\":   calculates \!\(\*FormBox[\(\((\*SubscriptBox[
StyleBox[\"n\", \"TI\"], 
StyleBox[\"p\", \"TI\"]] - \*SubscriptBox[
StyleBox[\"n\", \"TI\"], 
StyleBox[\"s\", \"TI\"]])\)/\((\((1 - 3 \*SubscriptBox[
StyleBox[\"L\", \"TI\"], \"2\"])\) \*SubscriptBox[
StyleBox[\"n\", \"TI\"], 
StyleBox[\"p\", \"TI\"]] + \((2 - 3 \*SubscriptBox[
StyleBox[\"L\", \"TI\"], \"1\"])\) \*SubscriptBox[
StyleBox[\"n\", \"TI\"], 
StyleBox[\"s\", \"TI\"]])\))\),
TraditionalForm]\), where \!\(\*FormBox[SubscriptBox[
StyleBox[\"n\", \"TI\"], 
StyleBox[\"p\", \"TI\"]],
TraditionalForm]\) and \!\(\*FormBox[SubscriptBox[
StyleBox[\"n\", \"TI\"], 
StyleBox[\"s\", \"TI\"]],
TraditionalForm]\) are background and RCM\[Hyphen]corrected photon counts of the parallel and orthogonal acceptor detection routes, respectively. \!\(\*FormBox[SubscriptBox[
StyleBox[\"L\", \"TI\"], \"1\"],
TraditionalForm]\) and \!\(\*FormBox[SubscriptBox[
StyleBox[\"L\", \"TI\"], \"2\"],
TraditionalForm]\) are correction factors set using FSetAnisotropyL1 and FSetAnisotropyL2. 
\"PIEAcceptorAnisotropy\":   calculates \!\(\*FormBox[\(\((\*SubscriptBox[
StyleBox[\"n\", \"TI\"], 
StyleBox[\"p\", \"TI\"]] - \*SubscriptBox[
StyleBox[\"n\", \"TI\"], 
StyleBox[\"s\", \"TI\"]])\)/\((\((1 - 3 \*SubscriptBox[
StyleBox[\"L\", \"TI\"], \"2\"])\) \*SubscriptBox[
StyleBox[\"n\", \"TI\"], 
StyleBox[\"p\", \"TI\"]] + \((2 - 3 \*SubscriptBox[
StyleBox[\"L\", \"TI\"], \"1\"])\) \*SubscriptBox[
StyleBox[\"n\", \"TI\"], 
StyleBox[\"s\", \"TI\"]])\))\),
TraditionalForm]\), where \!\(\*FormBox[SubscriptBox[
StyleBox[\"n\", \"TI\"], 
StyleBox[\"p\", \"TI\"]],
TraditionalForm]\) and \!\(\*FormBox[SubscriptBox[
StyleBox[\"n\", \"TI\"], 
StyleBox[\"s\", \"TI\"]],
TraditionalForm]\) are background and RCM\[Hyphen]corrected photon counts of the parallel and orthogonal acceptor detection routes, respectively. Only photons with lifetime channels within the set PIE channel ranges are used. \!\(\*FormBox[SubscriptBox[
StyleBox[\"L\", \"TI\"], \"1\"],
TraditionalForm]\) and \!\(\*FormBox[SubscriptBox[
StyleBox[\"L\", \"TI\"], \"2\"],
TraditionalForm]\) are correction factors set using FSetAnisotropyL1 and FSetAnisotropyL2. 
\"n\!\(\*FormBox[\(_\),
TraditionalForm]\)tot\!\(\*FormBox[\(_\),
TraditionalForm]\)asym\":   Calculated from \!\(\*FormBox[\(\((\*SubscriptBox[
StyleBox[\"n\", \"TI\"], \"2\"] - \*SubscriptBox[
StyleBox[\"n\", \"TI\"], \"1\"])\)/\((\*SubscriptBox[
StyleBox[\"n\", \"TI\"], \"1\"] + \*SubscriptBox[
StyleBox[\"n\", \"TI\"], \"2\"])\)\),
TraditionalForm]\), where \!\(\*FormBox[SubscriptBox[
StyleBox[\"n\", \"TI\"], 
RowBox[{\"1\", \",\", \"2\"}]],
TraditionalForm]\) are the total corrected number of photons in the first and second half of the photon burst, respectively. 
\"Selected\":   Value is 1 for selected photon bursts and 0 for non\[Hyphen]selected photon bursts. 
  
\"InterPhotonTimes\":   List of interphoton times, \!\(\*FormBox[\(\*
StyleBox[\"d\", \"TI\"] \*SubscriptBox[
StyleBox[\"t\", \"TI\"], 
StyleBox[\"i\", \"TI\"]] \[LongEqual] \*SubscriptBox[
StyleBox[\"t\", \"TI\"], 
StyleBox[\"i\", \"TI\"]] - \*SubscriptBox[
StyleBox[\"t\", \"TI\"], 
RowBox[{
StyleBox[\"i\", \"TI\"], \"-\", \"1\"}]]\),
TraditionalForm]\) in \!\(\*FormBox[\(\[Mu]\),
TraditionalForm]\)s. 
\"PhotonTimes\":   List of photon times in \!\(\*FormBox[\(\[Mu]\),
TraditionalForm]\)s with respect to first photon in burst.
\"MainChannelPhotonTimes\":   List of photon times in \!\(\*FormBox[\(\[Mu]\),
TraditionalForm]\)s with respect to first photon in burst. Only photons in main channel range.
\"PieChannelPhotonTimes\":   List of photon times in \!\(\*FormBox[\(\[Mu]\),
TraditionalForm]\)s with respect to first photon in burst. Only photons in PIE channel range.
\"DetectionChannels\":   List of the photons' detection routes. 
\"LifeTimeChannels\":   List of the photons' lifetime channels. 
";


FGetFromBurst  ::usage="FGetFromBurst[expr, \!\(\*FormBox[
StyleBox[\"i\", \"TI\"],
TraditionalForm]\)] evaluates expr for the \!\(\*FormBox[
StyleBox[\"i\", \"TI\"],
TraditionalForm]\)th photon burst.
 expr can contain the same strings as in FGetFromBurstList:"<>FPBurstParameters<>"   
Each string in an expression will be replaced by the corresponding list of values for all photon bursts. \!\(\*
StyleBox[\"Hold\",\nFontSlant->\"Italic\"]\) can be used to prevent the expression to be evalutated by Mathematica before the strings are replaced. For example: FGetFromBustList[Hold@Transpose[{\"Epie\",\"Spie\"}] ]. 
  ";


FGetFromBurstList  ::usage="FGetFromBurstList[\!\(\*
StyleBox[\"expr\", \"TI\"]\)] evaluates \!\(\*
StyleBox[\"expr\", \"TI\"]\) for each photon burst and returns the results in a list.
\!\(\*
StyleBox[\"expr\", \"TI\"]\) can contain the following strings:"<>FPBurstParameters<>"
Each string in an expression will be replaced by the corresponding list of values for all photon bursts. \!\(\*
StyleBox[\"Hold\",\nFontSlant->\"Italic\"]\) can be used to prevent the expression to be evalutated by Mathematica before the strings are replaced. For example: FGetFromBustList[Hold@Transpose[{\"Epie\",\"Spie\"}] ]. 
FGetFromBurstList has the following options:
FBurstData\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)All (default)
FBurstData\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FSelectedBursts
";


FGetPhotonList  ::usage="FGetPhotonList[t1,t2] returns for all photons recorded between t1 and t2 (in seconds) the inter\[Hyphen]photon times (in microseconds), the detection routes, and the lifetime channels. ";


FGetBurstListSize  ::usage="FGetBurstListSize[] returns the total number of identified photon bursts. ";


FGetNirFret2cdeFromBurstList  ::usage="FGetNirFret2cdeFromBurstList[taums\!\(\*FormBox[\(_\),
TraditionalForm]\)Real] ";


FBurstData  ::usage="Option for specifying that something is calculated only for the burst photons. ";


FParamHisto  ::usage="FParamHisto[expr,\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)min,max,step\!\(\*FormBox[\(}\),
TraditionalForm]\),opts]
 Options:
 \!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)FOutput\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FGraph (default)
 \!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)FOutput\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FData
 \!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)FBurstData\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)All (default)
 \!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)FBurstData\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FSelectedBursts
 All graphical options of Histogram are accepted for modifying the graphical appearance.
Internally, FGetFromBurstList[expr,opts] is evaluated to obtain the list of values from which the histogram is built. ";


FParamHisto2D  ::usage="FParamHisto2D[expr1,expr2,\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)min1,max1,step1\!\(\*FormBox[\(}\),
TraditionalForm]\),\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)min2,max2,step2\!\(\*FormBox[\(}\),
TraditionalForm]\),opts]
 Options:
 \!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)FOutput\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FGraph (default)
 \!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)FOutput\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FData
 \!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)FOutput\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FGraph3D
 \!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)FBurstData\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)All (default)
 \!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)FBurstData\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FSelectedBursts\!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)
 All options of ListContourPlot and ListPlot3D are accepted.
Internally, Transpose[\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)FGetFromBurstList[expr1,opts],FGetFromBurstList[expr2,opts]\!\(\*FormBox[\(}\),
TraditionalForm]\)] is evaluated to obtain the list of value pairs from which the 2D histogram is built. ";


FGraph3D  ::usage="Option value for FOutput in Histo2D and FParamHisto2D. ";


FSelectBurst  ::usage="FSelectBurst[burstindex\!\(\*FormBox[\(_\),
TraditionalForm]\)Integer,val\!\(\*FormBox[\(_\),
TraditionalForm]\)Integer]. val can be 0 or 1. ";


FSelectBursts  ::usage="FSelectBursts[paramlist\!\(\*FormBox[\(_\),
TraditionalForm]\)List,crit\!\(\*FormBox[\(_\),
TraditionalForm]\)]
Example: FSelectBursts[\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)\"StoichiometryRatio\"\!\(\*FormBox[\(}\),
TraditionalForm]\),(\!\(\*FormBox[\(#\),
TraditionalForm]\)[[1]]\!\(\*FormBox[\(<\),
TraditionalForm]\)0.7)\!\(\*FormBox[\(&\),
TraditionalForm]\)] ";


FLogNormal  ::usage="FLogNormal[e\!\(\*FormBox[\(_\),
TraditionalForm]\),pos\!\(\*FormBox[\(_\),
TraditionalForm]\),ampl\!\(\*FormBox[\(_\),
TraditionalForm]\),width\!\(\*FormBox[\(_\),
TraditionalForm]\),asym\!\(\*FormBox[\(_\),
TraditionalForm]\)] is an empirical peak function used in FFitFretHistogram. ";


FGaussian  ::usage="FGaussian[e\!\(\*FormBox[\(_\),
TraditionalForm]\),pos\!\(\*FormBox[\(_\),
TraditionalForm]\),ampl\!\(\*FormBox[\(_\),
TraditionalForm]\),width\!\(\*FormBox[\(_\),
TraditionalForm]\)] is an empirical peak function used in FFitFretHistogram. ";


FMakeModel  ::usage="FMakeModel is obsolet. Use FMakeFRETPeakModel instead.";


FMakeFRETPeakModel  ::usage="FMakeFRETPeakModel[peakmodel] returns the fit model and model parameters used in FFitFretHistogram. The model consists of a sum of empirical peak functions (Gaussian (\"G\") or lognormal (\"L\") peaks) specified in the list peakmodel. Example: FMakeFRETPeakModel[\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)\"L\",\"G\",\"L\"\!\(\*FormBox[\(}\),
TraditionalForm]\)]. ";


FFindGuess  ::usage="FFindGuess[histodata,peakmodel,peakpositionestimates] makes a parameter guess to be used in FFitFretHistogram. For each peak of the model, either a single value or an interval are given in peakpositionestimates. If an interval is given, the position of the maximum is determined within the limits of that interval. ";


FFRETPeakIntegrate  ::usage="FFRETPeakIntegrate[peakmodel,peakparams,\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)E1,E2\!\(\*FormBox[\(}\),
TraditionalForm]\)]
 returns the areas under the peaks of peakmodel as a list. peakparams needs to be a list of replacement rules, usually the list of best\[Hyphen]fit parameters returned from FFitFretHistogram. E1 and E2 are the integration limits. ";


FPlotFRETFit  ::usage="FPlotFRETFit[histodata:\!\(\*FormBox[\({{_\),
TraditionalForm]\)?NumberQ,\!\(\*FormBox[\(_\),
TraditionalForm]\)?NumberQ,\!\(\*FormBox[\(_\),
TraditionalForm]\)?NumberQ\!\(\*FormBox[\(}\),
TraditionalForm]\)..\!\(\*FormBox[\(}\),
TraditionalForm]\),peakmodel:\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)Repeated[\"G\"\!\(\*FormBox[\(|\),
TraditionalForm]\)\"L\"]\!\(\*FormBox[\(}\),
TraditionalForm]\),fitresult\!\(\*FormBox[\(_\),
TraditionalForm]\),opts:OptionsPattern[]] ";


FSubPopCurveOptions  ::usage="Options for FpdaEHisto. Example: FSubPopCurveOptions\!\(\*FormBox[\(\(\[Rule]\)\({\[Null]\)\),
TraditionalForm]\)PlotRange\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)All, PlotStyle\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)Red, ...\!\(\*FormBox[\(}\),
TraditionalForm]\) or any other valid option for ListLinePlot. ";


FSubPopOptions  ::usage="FSubPopOptions\!\(\*FormBox[\(\(\[Rule]\)\({\[Null]\)\),
TraditionalForm]\)plotoption1, plotoption2, ...\!\(\*FormBox[\(}\),
TraditionalForm]\) Options for FPlotFRETFit and FFitFretHistogram. plotoptioni can be any valid option of Plot. For example, FFitCurveOptions\!\(\*FormBox[\(\(\[Rule]\)\({\[Null]\)\),
TraditionalForm]\)PlotRange\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)All, Filling\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)Bottom, PlotStyle\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)Red\!\(\*FormBox[\(}\),
TraditionalForm]\) ";


FSubPopStyle  ::usage="FSubPopStyle is an option for FPlotFRETFit, FFitFretHistogram, FpdaEHisto, and FpdaEhistoFit. Example: FSubPopStyle\!\(\*FormBox[\(\(\[Rule]\)\({\[Null]\)\),
TraditionalForm]\)Red,Green,Blue\!\(\*FormBox[\(}\),
TraditionalForm]\). ";


FFitCurveOptions  ::usage="Option for PDA functions. ";


FFitCurveStyle  ::usage="FFitCurveStyle\!\(\*FormBox[\(\(\[Rule]\)\({\[Null]\)\),
TraditionalForm]\)...\!\(\*FormBox[\(}\),
TraditionalForm]\) Option of FPlotFRETFit, FFitFretHistogram, FpdaEHisto, and FpdaEhistoFit. ";


FFitFretHistogram  ::usage="FFitFretHistogram fits FRET efficiency histograms with a sum of empirical peak functions (Gaussian (\"G\") or lognormal (\"L\") peaks). A list of histograms can be fitted globally, with both shared and individual fit parameters. 
FFitFretHistogram returns a list containing three elements: best\[Hyphen]fit parameters, a plot with data and fit, and the FittedModel object returned by NonlinearModelFit.
FFitFretHistogram can be used in different ways:
 
 FFitFretHistogram[dat,model,peakpositionestimates] 
 \!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)Example: 
 \!\(\*FormBox[\(\\\ \\\ \\\ \\\ \),
TraditionalForm]\)dat\[LongEqual]FParamHisto[\"E\",\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)\[Hyphen]0.2,1.2,0.03\!\(\*FormBox[\(}\),
TraditionalForm]\),FOutput\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FData];
 \!\(\*FormBox[\(\\\ \\\ \\\ \\\ \),
TraditionalForm]\)FFitFretHistogram[dat,\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)\"L\",\"G\",\"L\"\!\(\*FormBox[\(}\),
TraditionalForm]\),\!\(\*FormBox[\({{\[Null]\),
TraditionalForm]\)\[Hyphen]1.0,0.2\!\(\*FormBox[\(}\),
TraditionalForm]\),0.5,\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)0.6,1\!\(\*FormBox[\(\(}\)\(}\)\),
TraditionalForm]\)]
 FFitFretHistogram[dat,model,guess], where guess must have the same form as the parameters in NonlinearModelFit (see Mathematica documentation).
 \!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)Example:
 \!\(\*FormBox[\(\\\ \\\ \\\ \\\ \),
TraditionalForm]\)dat\[LongEqual]FParamHisto[\"E\",\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)\[Hyphen]0.2,1.2,0.03\!\(\*FormBox[\(}\),
TraditionalForm]\),FOutput\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FData];
 \!\(\*FormBox[\(\\\ \\\ \\\ \\\ \),
TraditionalForm]\)guess\[LongEqual]FFindGuess[dat,model\[LongEqual]\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)\"L\",\"G\",\"L\"\!\(\*FormBox[\(}\),
TraditionalForm]\),\!\(\*FormBox[\({{\[Null]\),
TraditionalForm]\)\[Hyphen]1.0,0.2\!\(\*FormBox[\(}\),
TraditionalForm]\),0.5,\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)0.6,1\!\(\*FormBox[\(\(}\)\(}\)\),
TraditionalForm]\)];\!\(\*FormBox[\(\\\ \\\ \\\ \\\ \\\ \\\ \\\ \\\ \),
TraditionalForm]\)
 \!\(\*FormBox[\(\\\ \\\ \\\ \\\ \),
TraditionalForm]\)FFitFretHistogram[dat,model,guess]
 FFitFretHistogram[\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)Emin,Emax,\!\(\*FormBox[\(\[CapitalDelta]\),
TraditionalForm]\)E\!\(\*FormBox[\(}\),
TraditionalForm]\),model,peakestimates]
 \!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)Example:
 \!\(\*FormBox[\(\\\ \\\ \\\ \\\ \),
TraditionalForm]\)FFitFretHistogram[\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)\[Hyphen]0.2,1.2,0.02\!\(\*FormBox[\(}\),
TraditionalForm]\),\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)\"L\",\"G\",\"L\"\!\(\*FormBox[\(}\),
TraditionalForm]\),\!\(\*FormBox[\({{\[Null]\),
TraditionalForm]\)\[Hyphen]1.0,0.2\!\(\*FormBox[\(}\),
TraditionalForm]\),0.5,\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)0.6,1\!\(\*FormBox[\(\(}\)\(}\)\),
TraditionalForm]\)]
 or
 FFitFretHistogram[\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)Emin,Emax,\!\(\*FormBox[\(\[CapitalDelta]\),
TraditionalForm]\)E\!\(\*FormBox[\(}\),
TraditionalForm]\),model,guess] 

 In the last two cases, the histogram is calculated internally using FParamHisto[\"E\", \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)Emin,Emax,\!\(\*FormBox[\(\[CapitalDelta]\),
TraditionalForm]\)E\!\(\*FormBox[\(}\),
TraditionalForm]\), FOutput \!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\) FData].
 The graphical output is customizable with the options FFitCurveStyle and FSubPopStyle and all options of Histogram.
 Fitting with constraints on the parameters can be activated with the option FConstraints.
 Parameters can be kept fixed with the option FFixParams.
 FFitFretHistogram accepts all options of NonlinearModelFit, FPlotFRETFit, and FParamHisto.
 
 In the examples above, dat can also be a list of histograms: dat\[LongEqual]\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)histo1,histo2,...\!\(\*FormBox[\(}\),
TraditionalForm]\).
 In this case, the histograms are fitted globally. Shared parameters can be specified:
 FFitFretHistogram[dat,model,globalparams,peakestimates], where globalparams is a list of the global fit parameters.
\!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)  Example:
 FFitFretHistogram[\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)histo1,histo2,histo3\!\(\*FormBox[\(}\),
TraditionalForm]\),\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)\"L\",\"G\",\"G\"\!\(\*FormBox[\(}\),
TraditionalForm]\),\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)Pos[2],Width[3]\!\(\*FormBox[\(}\),
TraditionalForm]\),\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)0.05,0.6,0.8\!\(\*FormBox[\(}\),
TraditionalForm]\)]
 Here, the position of the second peak and the width of the third peak are shared parameters for the fits of all histograms.
\!\(\*FormBox[\(\\\ \\\ \\\ \\\ \),
TraditionalForm]\)
  ";


FFixParams  ::usage="Option for FFitFretHistogram. Example: FFixParams\!\(\*FormBox[\(\(\[Rule]\)\({\[Null]\)\),
TraditionalForm]\)Pos[1]\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)0.1\!\(\*FormBox[\(}\),
TraditionalForm]\). ";


FConstraints  ::usage="Option for FFitFretHistogram. Example FConstraints\!\(\*FormBox[\(\(\[Rule]\)\({\[Null]\)\),
TraditionalForm]\)\[Hyphen]0.05\!\(\*FormBox[\(<\),
TraditionalForm]\)\[LongEqual]Pos[1]\!\(\*FormBox[\(}\),
TraditionalForm]\). ";


FDetermineShotNoiseWidths  ::usage="FDetermineShotNoiseWidths[Erange:\!\(\*FormBox[\({_\),
TraditionalForm]\)?NumberQ,\!\(\*FormBox[\(_\),
TraditionalForm]\)?NumberQ,\!\(\*FormBox[\(_\),
TraditionalForm]\)?NumberQ\!\(\*FormBox[\(}\),
TraditionalForm]\),peaks:\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)Repeated[\"G\"\!\(\*FormBox[\(|\),
TraditionalForm]\)\"L\"]\!\(\*FormBox[\(}\),
TraditionalForm]\),peakposguess:\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)Repeated[\!\(\*FormBox[\(_\),
TraditionalForm]\)?NumberQ\!\(\*FormBox[\(\(|\)\({_\)\),
TraditionalForm]\)?NumberQ,\!\(\*FormBox[\(_\),
TraditionalForm]\)?NumberQ\!\(\*FormBox[\(}\),
TraditionalForm]\)]\!\(\*FormBox[\(}\),
TraditionalForm]\),opts:OptionsPattern[]] ";


Ampl  ::usage="Symbol for peak amplitude. ";


Asym  ::usage="Symbol for peak asymmetry. ";


(*e  ::usage="Symbol for transfer efficiency. ";*)


Pos  ::usage="Symbol for peak postion. ";


Width  ::usage="Symbol for peak width. ";


amplitudepeak::usage="Symbol for peak fitting.";
x0peak::usage="Symbol for peak fitting.";
y0peak::usage="Symbol for peak fitting.";
\[Sigma]xpeak::usage="Symbol for peak fitting.";
\[Sigma]ypeak::usage="Symbol for peak fitting.";
anglepeak::usage="Symbol for peak fitting.";


FBurstAsymmetry  ::usage="FBurstAsymmetry[\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)Emin, Emax, dE\!\(\*FormBox[\(}\),
TraditionalForm]\),\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)Amin, Amax, dA \!\(\*FormBox[\(}\),
TraditionalForm]\), \!\(\*FormBox[
StyleBox[\"n\", \"TI\"],
TraditionalForm]\)] creates three plots showing photon burst asymmetry ( \!\(\*FormBox[SubscriptBox[\(\[Alpha]\), \(DA\)],
TraditionalForm]\)) versus transfer efficiency (\!\(\*FormBox[
StyleBox[\"E\", \"TI\"],
TraditionalForm]\)). The first plot shows for each burst a point, where the color depends on \!\(\*FormBox[SubscriptBox[\(\[Alpha]\), \(DA\)],
TraditionalForm]\) being inside (blue) or outside (red) the confidence level \!\(\*FormBox[\(\*
StyleBox[\"n\", \"TI\"]\[Cross]\[Sigma]\),
TraditionalForm]\) . \!\(\*FormBox[\(\[Sigma]\),
TraditionalForm]\) is calculated for each burst from \!\(\*FormBox[\(\[Sigma] \[LongEqual] \*FractionBox[
StyleBox[\"T\", \"TI\"], 
RowBox[{\"2\", SqrtBox[\"3\"]}]] \*SqrtBox[
RowBox[{\"1\", \"/\", SubscriptBox[
StyleBox[\"N\", \"TI\"], 
StyleBox[\"D\", \"TI\"]], \"+\", \"1\", \"/\", SubscriptBox[
StyleBox[\"N\", \"TI\"], 
StyleBox[\"A\", \"TI\"]]}]]\),
TraditionalForm]\). \!\(\*FormBox[
StyleBox[\"T\", \"TI\"],
TraditionalForm]\) is the burst duration. \!\(\*FormBox[SubscriptBox[
StyleBox[\"N\", \"TI\"], 
StyleBox[\"D\", \"TI\"]],
TraditionalForm]\) and \!\(\*FormBox[SubscriptBox[
StyleBox[\"N\", \"TI\"], 
StyleBox[\"A\", \"TI\"]],
TraditionalForm]\) are the uncorrected photon numbers in the donor and acceptor detection routes, respectively. The photon burst asymmetry is defined as \!\(\*FormBox[\(\*SubscriptBox[\(\[Alpha]\), \(DA\)] \[LongEqual] \[LeftAngleBracket]\*SubscriptBox[
StyleBox[\"t\", \"TI\"], 
StyleBox[\"D\", \"TI\"]]\[RightAngleBracket] - \[LeftAngleBracket]\*SubscriptBox[
StyleBox[\"t\", \"TI\"], 
StyleBox[\"A\", \"TI\"]]\[RightAngleBracket]\),
TraditionalForm]\), i.e. the difference between the mean detection times of the donor photons and acceptor photons of the burst (emitted upon donor excitation). The other two plots are contour plots showing only the bursts with \!\(\*FormBox[\(\(|\)\*SubscriptBox[\(\[Alpha]\), \(DA\)]\(|\)\(\[LessEqual]\)
StyleBox[\"n\", \"TI\"] \(\[Sigma]\)\),
TraditionalForm]\) and \!\(\*FormBox[\(\(|\)\*SubscriptBox[\(\[Alpha]\), \(DA\)]\(|\)\(>\)
StyleBox[\"n\", \"TI\"] \(\[Sigma]\)\),
TraditionalForm]\), respectively. ";


FCutAsymmetricBursts  ::usage="FCutAsymmetricBursts[\!\(\*FormBox[
StyleBox[\"n\", \"TI\"],
TraditionalForm]\)] deletes all photon bursts with a photon burst asymmetry, \!\(\*FormBox[SubscriptBox[\(\[Alpha]\), \(DA\)],
TraditionalForm]\), outside the confidence level \!\(\*FormBox[\(\*
StyleBox[\"n\", \"TI\"]\[Cross]\[Sigma]\),
TraditionalForm]\), where \!\(\*FormBox[\(\[Sigma]\),
TraditionalForm]\) is calculated for each burst from \!\(\*FormBox[\(\[Sigma] \[LongEqual] \*FractionBox[
StyleBox[\"T\", \"TI\"], 
RowBox[{\"2\", SqrtBox[\"3\"]}]] \*SqrtBox[
RowBox[{\"1\", \"/\", SubscriptBox[
StyleBox[\"N\", \"TI\"], 
StyleBox[\"D\", \"TI\"]], \"+\", \"1\", \"/\", SubscriptBox[
StyleBox[\"N\", \"TI\"], 
StyleBox[\"A\", \"TI\"]]}]]\),
TraditionalForm]\). \!\(\*FormBox[
StyleBox[\"T\", \"TI\"],
TraditionalForm]\) is the burst duration. \!\(\*FormBox[SubscriptBox[
StyleBox[\"N\", \"TI\"], 
StyleBox[\"D\", \"TI\"]],
TraditionalForm]\) and \!\(\*FormBox[SubscriptBox[
StyleBox[\"N\", \"TI\"], 
StyleBox[\"A\", \"TI\"]],
TraditionalForm]\) are the uncorrected photon numbers in the donor and acceptor detection routes, respectively. The photon burst asymmetry is defined as \!\(\*FormBox[\(\*SubscriptBox[\(\[Alpha]\), \(DA\)] \[LongEqual] \[LeftAngleBracket]\*SubscriptBox[
StyleBox[\"t\", \"TI\"], 
StyleBox[\"D\", \"TI\"]]\[RightAngleBracket] - \[LeftAngleBracket]\*SubscriptBox[
StyleBox[\"t\", \"TI\"], 
StyleBox[\"A\", \"TI\"]]\[RightAngleBracket]\),
TraditionalForm]\), i.e. the difference between the mean detection times of the donor photons and acceptor photons of the burst (emitted upon donor excitation). ";


FPIEBurstAsymmetry  ::usage="FPIEBurstAsymmetry[\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)Emin, Emax, dE\!\(\*FormBox[\(}\),
TraditionalForm]\),\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)Amin, Amax, dA \!\(\*FormBox[\(}\),
TraditionalForm]\), \!\(\*FormBox[
StyleBox[\"n\", \"TI\"],
TraditionalForm]\)] creates three plots showing photon burst asymmetry ( \!\(\*FormBox[SubscriptBox[\(\[Alpha]\), \(PIE\)],
TraditionalForm]\)) versus transfer efficiency (\!\(\*FormBox[
StyleBox[\"E\", \"TI\"],
TraditionalForm]\)). The first plot shows for each burst a point, where the color depends on \!\(\*FormBox[SubscriptBox[\(\[Alpha]\), \(PIE\)],
TraditionalForm]\) being inside (blue) or outside (red) the confidence level \!\(\*FormBox[\(\*
StyleBox[\"n\", \"TI\"]\[Cross]\[Sigma]\),
TraditionalForm]\) \!\(\*FormBox[\(\[Sigma]\),
TraditionalForm]\) is calculated for each burst from \!\(\*FormBox[\(\[Sigma] \[LongEqual] \*FractionBox[
StyleBox[\"T\", \"TI\"], 
RowBox[{\"2\", SqrtBox[\"3\"]}]] \*SqrtBox[
RowBox[{\"1\", \"/\", 
RowBox[{\"(\", 
RowBox[{SubscriptBox[
StyleBox[\"N\", \"TI\"], \"DD\"], \"+\", SubscriptBox[
StyleBox[\"N\", \"TI\"], \"DA\"]}], \")\"}], \"+\", \"1\", \"/\", SubscriptBox[
StyleBox[\"N\", \"TI\"], \"AA\"]}]]\),
TraditionalForm]\). \!\(\*FormBox[
StyleBox[\"T\", \"TI\"],
TraditionalForm]\) is the burst duration. \!\(\*FormBox[SubscriptBox[
StyleBox[\"N\", \"TI\"], \"DD\"],
TraditionalForm]\) and \!\(\*FormBox[SubscriptBox[
StyleBox[\"N\", \"TI\"], \"DA\"],
TraditionalForm]\) are the uncorrected photon numbers in the donor and acceptor detection routes emitted upon donor excitation. \!\(\*FormBox[SubscriptBox[
StyleBox[\"N\", \"TI\"], \"AA\"],
TraditionalForm]\) is the uncorrected photon numbers in acceptor detection routes emitted upon acceptor excitation. The PIE photon burst asymmetry is defined as \!\(\*FormBox[\(\*SubscriptBox[\(\[Alpha]\), \(PIE\)] \[LongEqual] \[LeftAngleBracket]\*SubscriptBox[
StyleBox[\"t\", \"TI\"], \"Dex\"]\[RightAngleBracket] - \[LeftAngleBracket]\*SubscriptBox[
StyleBox[\"t\", \"TI\"], \"Aex\"]\[RightAngleBracket]\),
TraditionalForm]\), i.e. the difference between the mean detection times of the photons emitted upon donor excitation and acceptor excitation, respectively. The other two plots are contour plots showing only the bursts with \!\(\*FormBox[\(\(|\)\*SubscriptBox[\(\[Alpha]\), \(PIE\)]\(|\)\(\[LessEqual]\)
StyleBox[\"n\", \"TI\"] \(\[Sigma]\)\),
TraditionalForm]\) and \!\(\*FormBox[\(\(|\)\*SubscriptBox[\(\[Alpha]\), \(PIE\)]\(|\)\(>\)
StyleBox[\"n\", \"TI\"] \(\[Sigma]\)\),
TraditionalForm]\), respectively. ";


FPIECutAsymmetricBursts  ::usage="FPIECutAsymmetricBursts[\!\(\*FormBox[
StyleBox[\"n\", \"TI\"],
TraditionalForm]\)] deletes all photon bursts with a PIE photon burst asymmetry, \!\(\*FormBox[SubscriptBox[\(\[Alpha]\), \(PIE\)],
TraditionalForm]\), outside the confidence level \!\(\*FormBox[\(\*
StyleBox[\"n\", \"TI\"]\[Cross]\[Sigma]\),
TraditionalForm]\), where \!\(\*FormBox[\(\[Sigma]\),
TraditionalForm]\) is calculated for each burst from \!\(\*FormBox[\(\[Sigma] \[LongEqual] \*FractionBox[
StyleBox[\"T\", \"TI\"], 
RowBox[{\"2\", SqrtBox[\"3\"]}]] \*SqrtBox[
RowBox[{\"1\", \"/\", 
RowBox[{\"(\", 
RowBox[{SubscriptBox[
StyleBox[\"N\", \"TI\"], \"DD\"], \"+\", SubscriptBox[
StyleBox[\"N\", \"TI\"], \"DA\"]}], \")\"}], \"+\", \"1\", \"/\", SubscriptBox[
StyleBox[\"N\", \"TI\"], \"AA\"]}]]\),
TraditionalForm]\). \!\(\*FormBox[
StyleBox[\"T\", \"TI\"],
TraditionalForm]\) is the burst duration. \!\(\*FormBox[SubscriptBox[
StyleBox[\"N\", \"TI\"], \"DD\"],
TraditionalForm]\) and \!\(\*FormBox[SubscriptBox[
StyleBox[\"N\", \"TI\"], \"DA\"],
TraditionalForm]\) are the uncorrected photon numbers in the donor and acceptor detection routes emitted upon donor excitation. \!\(\*FormBox[SubscriptBox[
StyleBox[\"N\", \"TI\"], \"AA\"],
TraditionalForm]\) is the uncorrected photon numbers in acceptor detection routes emitted upon acceptor excitation. The PIE photon burst asymmetry is defined as \!\(\*FormBox[\(\*SubscriptBox[\(\[Alpha]\), \(PIE\)] \[LongEqual] \[LeftAngleBracket]\*SubscriptBox[
StyleBox[\"t\", \"TI\"], \"Dex\"]\[RightAngleBracket] - \[LeftAngleBracket]\*SubscriptBox[
StyleBox[\"t\", \"TI\"], \"Aex\"]\[RightAngleBracket]\),
TraditionalForm]\), i.e. the difference between the mean detection times of the photons emitted upon donor excitation and acceptor excitation, respectively. ";


FUseMicrotime  ::usage="Option used in FFCS. If FUseMicrotime\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)True, the microtime will be added to the macrotime in T3 mode. ";


CorrelikonG12  ::usage="Private symbol. ";


CorrelikonG123  ::usage="Private symbol. ";


CorrelikonN12  ::usage="Private symbol. ";


CorrelikonTauBins  ::usage="Private symbol. ";


CorrelikonTauBins1  ::usage="Private symbol. ";


CorrelikonTauBins2  ::usage="Private symbol. ";


CorrelikonTimeUnitSec  ::usage="Private symbol. ";


CorrelikonTmeasure  ::usage="Private symbol. ";


FFCS  ::usage="FFCS[lagtimes,route1,route2]
 FFCS[lagtimes,route1,route2,tstart,tstop]
 FFCS[lagtimes,route1,route2,\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)c11,c12\!\(\*FormBox[\(}\),
TraditionalForm]\),\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)c21,c22\!\(\*FormBox[\(}\),
TraditionalForm]\)]  (\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)c11,c12\!\(\*FormBox[\(}\),
TraditionalForm]\) and \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)c21,c22\!\(\*FormBox[\(}\),
TraditionalForm]\) are lifetime channel constraints)
 FFCS[lagtimes,route1,route2,\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)c11,c12\!\(\*FormBox[\(}\),
TraditionalForm]\),\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)c21,c22\!\(\*FormBox[\(}\),
TraditionalForm]\),tstart,tstop]
 
FFCS calculates and displays FCS curves. The algorithm described by Laurence et al. (https://doi.org/10.1364/OL.31.000829) is used for calculating the FCS curves.
 lagtimes can be provided as
 1. a list of lag times, e.g., FFCS[\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)t1,t2,t3,...\!\(\*FormBox[\(}\),
TraditionalForm]\), ...]. lagtimes are given in seconds.
 2. three numbers, indicating the decimal logarithms of the shortest and the longest lag times and the step size. For example, in FFCS[\[Hyphen]6,1,0.1,route1,route2], the correlation is calculated for lag times given by Table[(10\!\(\*FormBox[SuperscriptBox[\(\[Null]\), \(\[Wedge]\)],
TraditionalForm]\)logt),\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)logt,\[Hyphen]6,0,0.1\!\(\*FormBox[\(}\),
TraditionalForm]\)]
.
 Detection routes (labeled as \"route1\",\"route2\",\"r11\",\"r21\", etc.) are given as lists of ones and zeros.
 For example 
 FFCS[lagtimes,\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)1,0,1,0\!\(\*FormBox[\(}\),
TraditionalForm]\),\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)0,1,0,1\!\(\*FormBox[\(}\),
TraditionalForm]\)] 
 correlates photons from detectors 1 and 3 with photons from detectors 2 and 4.
 If the parameters tstart and tstop are used, the correlation is calculated only from the photons detected in the time interval (tstart, tstop). tstart, tstop are given in seconds.


Several FCS curves can be calculated in parallel on multi\[Hyphen]core CPUs using the following functions.

 Multiple correlations between different detection route pairs \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)ri1,ri2\!\(\*FormBox[\(}\),
TraditionalForm]\), i\[LongEqual]1,2,3,...
 FFCS[lagtimes, \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\) \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)r11,r12\!\(\*FormBox[\(}\),
TraditionalForm]\), \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)r21,r22\!\(\*FormBox[\(}\),
TraditionalForm]\), ...\!\(\*FormBox[\(}\),
TraditionalForm]\)]
 FFCS[lagtimes, \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\) \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)r11,r12\!\(\*FormBox[\(}\),
TraditionalForm]\), \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)r21,r22\!\(\*FormBox[\(}\),
TraditionalForm]\), ...\!\(\*FormBox[\(}\),
TraditionalForm]\), tstart, tstop]
 FFCS[lagtimes, \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\) \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)r11,r12\!\(\*FormBox[\(}\),
TraditionalForm]\), \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)r21,r22\!\(\*FormBox[\(}\),
TraditionalForm]\), ...\!\(\*FormBox[\(}\),
TraditionalForm]\), \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)c11,c12\!\(\*FormBox[\(}\),
TraditionalForm]\), \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)c21,c22\!\(\*FormBox[\(}\),
TraditionalForm]\)]
 FFCS[lagtimes, \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\) \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)r11,r12\!\(\*FormBox[\(}\),
TraditionalForm]\), \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)r21,r22\!\(\*FormBox[\(}\),
TraditionalForm]\), ...\!\(\*FormBox[\(}\),
TraditionalForm]\), \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)c11,c12\!\(\*FormBox[\(}\),
TraditionalForm]\), \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)c21,c22\!\(\*FormBox[\(}\),
TraditionalForm]\), tstart, tstop]

 Multiple correlations between different detection route and lifetime channel constraint pairs pi\[LongEqual]\!\(\*FormBox[\({{\[Null]\),
TraditionalForm]\)ri1,\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)ci1a,ci1b\!\(\*FormBox[\(\(}\)\(}\)\),
TraditionalForm]\),\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)ri2,\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)ci2a,ci2b\!\(\*FormBox[\(\(\(}\)\(}\)\)\(}\)\),
TraditionalForm]\), i\[LongEqual]1,2,3,..
 FFCS[lagtimes, \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\) p1, p2, ...\!\(\*FormBox[\(}\),
TraditionalForm]\) ]
 FFCS[lagtimes, \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\) p1, p2, ...\!\(\*FormBox[\(}\),
TraditionalForm]\), tstart, tstop]

Options:
\!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)FPhotonData\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)All (default) or FPhotonData\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FSelectedBursts
\!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)FOutput\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FData (default) or FOutput\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FGraph or FOutput\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FRawData
\!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)FUseMicrotime\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)False (default) If FUseMicrotime\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)True, the microtime is added to the macrotime for each T3 record, otherwise only the macrotime is used.
";


(*
FFCSModel  ::usage="FFCSModel[logtaus:{_?NumberQ..},diffs:{_?NumberQ..},velocities:{\[Null]vy_?NumberQ,vz_?NumberQ},w0_?NumberQ,R0_?NumberQ,nrefractive_?NumberQ,opts:OptionsPattern[]] ";
*)


FBunch  ::usage="Legacy code. Use of FBunch is discouraged. Use FnsFCS instead. ";


FFCSW  ::usage="FFCSW[log10tmin, log10tmax, \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)route1, channelweights1\!\(\*FormBox[\(}\),
TraditionalForm]\), \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)route2, channelweights2\!\(\*FormBox[\(}\),
TraditionalForm]\)]
 FFCSW[log10tmin, log10tmax, \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)route1, channelweights1\!\(\*FormBox[\(}\),
TraditionalForm]\), \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)route2, channelweights2\!\(\*FormBox[\(}\),
TraditionalForm]\), tstart, tstop]
 FFCSW[log10tmin, log10tmax, route1, route2] (applies weight 1 to all lifetime channels)
 FFCSW[log10tmin, log10tmax, route1, route2, tstart, tstop] (applies weight 1 to all lifetime channels)

FFCSW correlates the macrotimes between photons of route1 with those of route2, with each photon weighted according to its microtime (or \"lifetime\") channel and/or detection route. The weights for the microtime channels are given as lists in channelweights1 and channelweights2, respectively. FFCSW uses the algorithm described by Wahl et al. (https://doi.org/10.1364/OE.11.003583). The Fretica implementation of the algorithm uses parallel computation on multicore CPUs.
\!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)FCSW can be used for Fluorescence Lifetime Correlation Spectroscopy (FLCS) (see for example: https://doi.org/10.1016/j.ymeth.2018.02.009).

If no weights are given, weight 1 is applied throughout. In this case, FFCSW is an alternative to FFCS with the advantage of parallel execution on multi\[Hyphen]core CPUs.
 
 Detection routes route1 and route2 are given as lists of ones and zeros.
 For example, with route1\[LongEqual]\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)1,0,0,0\!\(\*FormBox[\(}\),
TraditionalForm]\) and route2\[LongEqual]\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)0,1,0,0\!\(\*FormBox[\(}\),
TraditionalForm]\), photons from detector 1 are correlated with photons from detector 2.
 With the parameters tstart and tstop, the correlation is calculated only from the photons detected in the time interval (tstart,tstop). tstart, tstop are given in seconds.
 channelweights1 and channelweights2 can be either lists of real numbers. Or, more general, both of the form: {r1\[Rule]weights1, r2->weights2, ...}. This allows to give diferent weights (weights1, weights2, ...) to different detection routes (r1, r2,...). For example one can write FFCSW[log10tmin, log10tmax, \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\) {1,0,1,0}, { 1\[Rule]{...}, 3\[Rule]{...}\!\(\*FormBox[\(\(\\\ \)\(}\)\),
TraditionalForm]\), {{0,1,0,1}, { 2\[Rule]{...}, 4\[Rule]{...}\!\(\*FormBox[\(\(\(\\\ \)\(}\)\)\(\\\ \)\(}\)\),
TraditionalForm]\)]   

Options:
\!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)FPhotonData\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)All (default) or FPhotonData\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FSelectedBursts
\!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)FOutput\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FData (default) or FOutput\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FGraph or FOutput\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FRawData
\!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)FNumberOfStepsInCascade\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)10 (default) or any other integer value \!\(\*FormBox[\(>\),
TraditionalForm]\)0
";


FnsFCS  ::usage="FnsFCS[routelist1, routelist2, \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)taumin, taumax, dtau\!\(\*FormBox[\(}\),
TraditionalForm]\)]  or 
 FnsFCS[routelist1, routelist2 , \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)taumin, taumax, dtau\!\(\*FormBox[\(}\),
TraditionalForm]\),tstart,tstop] 
calculate an FCS curve for a linear range of lag times spanning from taumin to taumax in steps of dtau. Lag times are given in microseconds. 
tstart and tstop (in seconds) limits the calculation to the photons detected in the corresponding time interval.  If a list of detection\[Hyphen]route pairs is provided, i.e. \!\(\*FormBox[\({{\*
StyleBox[\"r\", \"TI\"] 11, \*
StyleBox[\"r\", \"TI\"] 12}, {\*
StyleBox[\"r\", \"TI\"] 21, \*
StyleBox[\"r\", \"TI\"] 22},  ... }\),
TraditionalForm]\), the corresponding correlations are calculated in parallel.
 Options:
 FOutput\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FData (default) or FOutput\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FRawData
\!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)FPhotonData\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)All (default) or FPhotonData\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FSelectedBursts
";


FnsFCSSecondOrder  ::usage="FnsFCSSecondOrder[routelist1, routelist2, routelist3, \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)tau1min, tau1max, dtau1\!\(\*FormBox[\(}\),
TraditionalForm]\), \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)tau2min, tau2max, dtau2\!\(\*FormBox[\(}\),
TraditionalForm]\)]. Lag times are given in microseconds.
 or 
 FnsFCSSecondOrder[routelist1, routelist2, routelist3, \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)tau1min, tau1max, dtau1\!\(\*FormBox[\(}\),
TraditionalForm]\), \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)tau2min, tau2max, dtau2\!\(\*FormBox[\(}\),
TraditionalForm]\),tstart,tstop], with tstart and tstop in seconds.
 
 If a list of detection\[Hyphen]route pairs is provided, i.e.\!\(\*FormBox[\({{\*
StyleBox[\"r\", \"TI\"] 11, \*
StyleBox[\"r\", \"TI\"] 12}, {\*
StyleBox[\"r\", \"TI\"] 21, \*
StyleBox[\"r\", \"TI\"] 22},  ... }\),
TraditionalForm]\), the corresponding correlations are calculated in parallel. ";


F2DFLCSLifeTimeChannelMap  ::usage="F2DFLCSLifeTimeChannelMap[tstart\!\(\*FormBox[\(_\),
TraditionalForm]\)?NumericQ,tstop\!\(\*FormBox[\(_\),
TraditionalForm]\)?NumericQ,tau:\!\(\*FormBox[\({_\),
TraditionalForm]\)?NumericQ..\!\(\*FormBox[\(}\),
TraditionalForm]\),route1:FRouteList,route2:FRouteList,channelranges:\!\(\*FormBox[\({{_\),
TraditionalForm]\)?FValidChannelQ ,\!\(\*FormBox[\(_\),
TraditionalForm]\)?FValidChannelQ\!\(\*FormBox[\(}\),
TraditionalForm]\)..\!\(\*FormBox[\(}\),
TraditionalForm]\)] ";


F2fFCSFit  ::usage="F2fFCSFit[ fcsdata, \!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"D\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"D\", \"TI\"], \"2\"] ... }, {\*SubscriptBox[
StyleBox[\"v\", \"TI\"], 
StyleBox[\"x\", \"TI\"]], \*SubscriptBox[
StyleBox[\"v\", \"TI\"], 
StyleBox[\"y\", \"TI\"]], \*SubscriptBox[
StyleBox[\"v\", \"TI\"], 
StyleBox[\"z\", \"TI\"]]}, {\*SubscriptBox[
StyleBox[\"k\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"k\", \"TI\"], \"2\"],  ... }, \*SubscriptBox[
StyleBox[\"w\", \"TI\"], \"0\"], \*SubscriptBox[
StyleBox[\"R\", \"TI\"], \"0\"], \*
StyleBox[\"n\", \"TI\"]\),
TraditionalForm]\),guess] 
fits the four 2fFCS curves in fcsdata with the model for a mixture of particles with diffusion coefficients \!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"D\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"D\", \"TI\"], \"2\"] ... }\),
TraditionalForm]\) (given in \!\(\*FormBox[\(\[Mu]\),
TraditionalForm]\)m\!\(\*FormBox[SuperscriptBox[\(\[Null]\), \(2\)],
TraditionalForm]\)/ms) in a fluid with flow velocity \!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"v\", \"TI\"], 
StyleBox[\"x\", \"TI\"]], \*SubscriptBox[
StyleBox[\"v\", \"TI\"], 
StyleBox[\"y\", \"TI\"]], \*SubscriptBox[
StyleBox[\"v\", \"TI\"], 
StyleBox[\"z\", \"TI\"]]}\),
TraditionalForm]\) in \!\(\*FormBox[\(\[Mu]\),
TraditionalForm]\)m/ms. 
The inter\[Hyphen]focus vector is expected to be aligned along the x\[Hyphen]axis. \!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"k\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"k\", \"TI\"], \"2\"],  ... }\),
TraditionalForm]\) are rates (in units of 1/ms) for describing additional correlation components (e.g. triplet blinking). 
The parameters \!\(\*FormBox[SubscriptBox[
StyleBox[\"w\", \"TI\"], \"0\"],
TraditionalForm]\) and \!\(\*FormBox[SubscriptBox[
StyleBox[\"R\", \"TI\"], \"0\"],
TraditionalForm]\) (in units of \!\(\*FormBox[\(\[Mu]\),
TraditionalForm]\)m) are related but not identical to the waist and Rayleigh length of the laser foci. \!\(\*FormBox[
StyleBox[\"n\", \"TI\"],
TraditionalForm]\) is the refractive index of the solution. 
All parameters must either be given as numbers or as symbolic expressions that evaluate to numbers when the fit parameters \!\(\*FormBox[\(\*SubscriptBox[
StyleBox[\"p\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"p\", \"TI\"], \"2\"],  ... \),
TraditionalForm]\) are replaced by numbers. Guess values for these parameters are provided in the form guess\[LongEqual]\!\(\*FormBox[\({{\*SubscriptBox[
StyleBox[\"p\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"g\", \"TI\"], \"1\"]}, {\*SubscriptBox[
StyleBox[\"p\", \"TI\"], \"2\"], \*SubscriptBox[
StyleBox[\"g\", \"TI\"], \"2\"]},  ... }\),
TraditionalForm]\), where \!\(\*FormBox[SubscriptBox[
StyleBox[\"g\", \"TI\"], 
StyleBox[\"i\", \"TI\"]],
TraditionalForm]\) are initial guess values used for the least\[Hyphen]square minimization.
The function returns a list with the minimal \!\(\*FormBox[SuperscriptBox[\(\[Chi]\), \(2\)],
TraditionalForm]\) found, the best\[Hyphen]fit parameters, and a graph of the fcs data and the fits. ";


F2fFCSfocidistance  ::usage="Option of F2fFCSGetModel and F2fFCSFit. ";


F2fFCSFromTTTR  ::usage="F2fFCSFromTTTR[logtaumin, logtaumax, dlogtau, route1, route2, channelrange1, channelrange2, tstart, tend]
or 
F2fFCSFromTTTR[logtaumin, logtaumax, dlogtau, route1, route2, channelrange1, channelrange2] calculates and returns the four FCS curves derived from the currently open 2fFCS meaurement in a format suitable for F2fFCSFit, F2fFCSGetModel, and F2fFCSGetLinearCoefficients. route1 and route2 are route lists defining the parallel and orthogonal detection routes. channelrange1 and channelrange2 are the lifetime channel ranges used for PIE. 
";


F2fFCSGetLinearCoefficients  ::usage="F2fFCSGetLinearCoefficients[ fcsdata, \!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"D\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"D\", \"TI\"], \"2\"] ... }, {\*SubscriptBox[
StyleBox[\"v\", \"TI\"], 
StyleBox[\"x\", \"TI\"]], \*SubscriptBox[
StyleBox[\"v\", \"TI\"], 
StyleBox[\"y\", \"TI\"]], \*SubscriptBox[
StyleBox[\"v\", \"TI\"], 
StyleBox[\"z\", \"TI\"]]}, {\*SubscriptBox[
StyleBox[\"k\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"k\", \"TI\"], \"2\"],  ... }, \*SubscriptBox[
StyleBox[\"w\", \"TI\"], \"0\"], \*SubscriptBox[
StyleBox[\"R\", \"TI\"], \"0\"], \*
StyleBox[\"n\", \"TI\"]\),
TraditionalForm]\),guess] ";


F2fFCSGetModel  ::usage="F2fFCSGetModel[ fcsdata, \!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"D\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"D\", \"TI\"], \"2\"] ... }, {\*SubscriptBox[
StyleBox[\"v\", \"TI\"], 
StyleBox[\"x\", \"TI\"]], \*SubscriptBox[
StyleBox[\"v\", \"TI\"], 
StyleBox[\"y\", \"TI\"]], \*SubscriptBox[
StyleBox[\"v\", \"TI\"], 
StyleBox[\"z\", \"TI\"]]}, {\*SubscriptBox[
StyleBox[\"k\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"k\", \"TI\"], \"2\"],  ... }, \*SubscriptBox[
StyleBox[\"w\", \"TI\"], \"0\"], \*SubscriptBox[
StyleBox[\"R\", \"TI\"], \"0\"], \*
StyleBox[\"n\", \"TI\"]\),
TraditionalForm]\),guess] evaluates the 2fFCS model for the given parameters for the lag times given in fcsdata. Note that the linear coefficients are optimized to maximize \!\(\*FormBox[SuperscriptBox[\(\[Chi]\), \(2\)],
TraditionalForm]\). ";


F2fFCSGlobalFit  ::usage="F2fFCSGlobalFit[ \!\(\*FormBox[\({{\*SubscriptBox[\(fcsdata\), \(1\)], {\*SubscriptBox[
StyleBox[\"D\", \"TI\"], 
RowBox[{\"1\", \",\", \"1\"}]], \*SubscriptBox[
StyleBox[\"D\", \"TI\"], 
RowBox[{\"1\", \",\", \"2\"}]] ... }, {\*SubscriptBox[
StyleBox[\"v\", \"TI\"], 
RowBox[{
StyleBox[\"x\", \"TI\"], \"1\"}]], \*SubscriptBox[
StyleBox[\"v\", \"TI\"], 
RowBox[{
StyleBox[\"y\", \"TI\"], \"1\"}]], \*SubscriptBox[
StyleBox[\"v\", \"TI\"], 
RowBox[{
StyleBox[\"z\", \"TI\"], \"1\"}]]}, {\*SubscriptBox[
StyleBox[\"k\", \"TI\"], 
RowBox[{\"1\", \",\", \"1\"}]], \*SubscriptBox[
StyleBox[\"k\", \"TI\"], 
RowBox[{\"1\", \",\", \"2\"}]],  ... }, \*SubscriptBox[
StyleBox[\"w\", \"TI\"], 
RowBox[{\"0\", \",\", \"1\"}]], \*SubscriptBox[
StyleBox[\"R\", \"TI\"], 
RowBox[{\"0\", \",\", \"1\"}]], \*SubscriptBox[
StyleBox[\"n\", \"TI\"], \"1\"]}\),
TraditionalForm]\), \!\(\*FormBox[\({\*SubscriptBox[\(fcsdata\), \(2\)], {\*SubscriptBox[
StyleBox[\"D\", \"TI\"], 
RowBox[{\"2\", \",\", \"1\"}]], \*SubscriptBox[
StyleBox[\"D\", \"TI\"], 
RowBox[{\"2\", \",\", \"2\"}]] ... }, {\*SubscriptBox[
StyleBox[\"v\", \"TI\"], 
RowBox[{
StyleBox[\"x\", \"TI\"], \"2\"}]], \*SubscriptBox[
StyleBox[\"v\", \"TI\"], 
RowBox[{
StyleBox[\"y\", \"TI\"], \"2\"}]], \*SubscriptBox[
StyleBox[\"v\", \"TI\"], 
RowBox[{
StyleBox[\"z\", \"TI\"], \"2\"}]]}, {\*SubscriptBox[
StyleBox[\"k\", \"TI\"], 
RowBox[{\"2\", \",\", \"1\"}]], \*SubscriptBox[
StyleBox[\"k\", \"TI\"], 
RowBox[{\"2\", \",\", \"2\"}]],  ... }, \*SubscriptBox[
StyleBox[\"w\", \"TI\"], 
RowBox[{\"0\", \",\", \"2\"}]], \*SubscriptBox[
StyleBox[\"R\", \"TI\"], 
RowBox[{\"0\", \",\", \"2\"}]], \*SubscriptBox[
StyleBox[\"n\", \"TI\"], \"2\"]} ... }, guess}\),
TraditionalForm]\). Give shared parameters the same name in each block, and non\[Hyphen]shared parameters individual names. For example, if \!\(\*FormBox[SubscriptBox[
StyleBox[\"v\", \"TI\"], 
StyleBox[\"x\", \"TI\"]],
TraditionalForm]\) is supposed to be the same for all data sets, then replace \!\(\*FormBox[\(\*SubscriptBox[
StyleBox[\"v\", \"TI\"], 
RowBox[{
StyleBox[\"x\", \"TI\"], \"1\"}]], \*SubscriptBox[
StyleBox[\"v\", \"TI\"], 
RowBox[{
StyleBox[\"x\", \"TI\"], \"2\"}]] ... \),
TraditionalForm]\) by \!\(\*FormBox[SubscriptBox[
StyleBox[\"v\", \"TI\"], 
StyleBox[\"x\", \"TI\"]],
TraditionalForm]\) and include \!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"v\", \"TI\"], 
StyleBox[\"x\", \"TI\"]], \*SubscriptBox[
StyleBox[\"v\", \"TI\"], \"guess\"]}\),
TraditionalForm]\) in guess. ";


F2fFCSmagnification  ::usage="Option of F2fFCSGetModel and F2fFCSFit. ";


F2fFCSpinhole  ::usage="Option of F2fFCSGetModel and F2fFCSFit. ";


F2fFCSSettings  ::usage="F2fFCSSettings[\!\(\*FormBox[\({\[Lambda]\),
TraditionalForm]\)ex,\!\(\*FormBox[\(\[Lambda]\),
TraditionalForm]\)em,focidistance,pinhole,magnification\!\(\*FormBox[\(}\),
TraditionalForm]\)] sets the parameters for 2fFCS. The excitation and emission wavelengths, the distance between the foci, and the pinhole diameter must be given in units of micrometers. magnification is the magnification of the microscope objective. ";


F2fFCSLambdaem  ::usage="Option of F2fFCSGetModel and F2fFCSFit. ";


F2fFCSLambdaex  ::usage="Option of F2fFCSGetModel and F2fFCSFit. ";


F2focusFCSChiSqr  ::usage="F2focusFCSChiSqr[diffs:\!\(\*FormBox[\({_\),
TraditionalForm]\)?FRealNumberQ..\!\(\*FormBox[\(}\),
TraditionalForm]\),kTs:\!\(\*FormBox[\({_\),
TraditionalForm]\)?FRealNumberQ..\!\(\*FormBox[\(}\),
TraditionalForm]\),w0\!\(\*FormBox[\(_\),
TraditionalForm]\)?FRealNumberQ,R0\!\(\*FormBox[\(_\),
TraditionalForm]\)?FRealNumberQ,Diff\!\(\*FormBox[\(_\),
TraditionalForm]\)?FRealNumberQ,\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)vx\!\(\*FormBox[\(_\),
TraditionalForm]\)?FRealNumberQ,vy\!\(\*FormBox[\(_\),
TraditionalForm]\)?FRealNumberQ,vz\!\(\*FormBox[\(_\),
TraditionalForm]\)?FRealNumberQ\!\(\*FormBox[\(}\),
TraditionalForm]\)] ";


FTimeCorrelate  ::usage="FTimeCorrelate[lagtimes:\!\(\*FormBox[\({_\),
TraditionalForm]\)?NumberQ..\!\(\*FormBox[\(}\),
TraditionalForm]\),t1:\!\(\*FormBox[\({_\),
TraditionalForm]\)?NumberQ..\!\(\*FormBox[\(}\),
TraditionalForm]\),t2:\!\(\*FormBox[\({_\),
TraditionalForm]\)?NumberQ..\!\(\*FormBox[\(}\),
TraditionalForm]\)] correlates arbitrary time events. Lag times are given in a list. ";


FNumberOfStepsInCascade  ::usage="FNumberOfStepsInCascade is an option of FFCSW. ";


FCorrelateBinnedData  ::usage="FCorrelateBinnedData[dat1\!\(\*FormBox[\(_\),
TraditionalForm]\)List,dat2\!\(\*FormBox[\(_\),
TraditionalForm]\)List,n\!\(\*FormBox[\(_\),
TraditionalForm]\)Integer]
 \!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)dat1 and dat2 must be of equal lengths.
 \!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)The first n correlation values are returned. ";


FRecurrenceHisto  ::usage="FRecurrenceHisto[bl,\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)E1,E2\!\(\*FormBox[\(}\),
TraditionalForm]\),\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)t1,t2\!\(\*FormBox[\(}\),
TraditionalForm]\),\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)Emin,Emax,dE\!\(\*FormBox[\(}\),
TraditionalForm]\),opts] returns the recurrence histogram generated from the photon burst list bl using the initial transfer efficiency range \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)E1,E2\!\(\*FormBox[\(}\),
TraditionalForm]\) and the recurrence time interval \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)t1,t2\!\(\*FormBox[\(}\),
TraditionalForm]\). The histogram categories to be used are given by \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)Emin,Emax,dE\!\(\*FormBox[\(}\),
TraditionalForm]\).
Options:
\!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)FOutput\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FGraph (default)
\!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)FOutput\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FData
\!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)All options of Histogram ";


FRecurrenceHisto2D  ::usage="FRecurrenceHisto2D[bl, \!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"E\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"E\", \"TI\"], \"2\"]}\),
TraditionalForm]\), \!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"t\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"t\", \"TI\"], \"2\"]}\),
TraditionalForm]\), \!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"E\", \"TI\"], \"min\"], \*SubscriptBox[
StyleBox[\"E\", \"TI\"], \"max\"], \*
StyleBox[\"d\", \"TI\"] \*
StyleBox[\"E\", \"TI\"]}\),
TraditionalForm]\), opts] returns the 2D recurrence histogram generated from the photon burst list bl using the initial transfer efficiency range \!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"E\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"E\", \"TI\"], \"2\"]}\),
TraditionalForm]\) and the recurrence time interval \!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"t\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"t\", \"TI\"], \"2\"]}\),
TraditionalForm]\).
The histogram categories to be used are given by\!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"E\", \"TI\"], \"min\"], \*SubscriptBox[
StyleBox[\"E\", \"TI\"], \"max\"], \*
StyleBox[\"d\", \"TI\"] \*
StyleBox[\"E\", \"TI\"]}\),
TraditionalForm]\).
Options:
\!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)All options of Histo2D ";


FRecurrenceHistoN  ::usage="FRecurrenceHistoN[bl, \!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"E\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"E\", \"TI\"], \"2\"]}\),
TraditionalForm]\), \!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"t\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"t\", \"TI\"], \"2\"]}\),
TraditionalForm]\), \!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"E\", \"TI\"], \"min\"], \*SubscriptBox[
StyleBox[\"E\", \"TI\"], \"max\"], \*
StyleBox[\"d\", \"TI\"] \*
StyleBox[\"E\", \"TI\"]}\),
TraditionalForm]\), opts] returns the normalized recurrence histogram generated from the photon burst list bl using the initial transfer efficiency range \!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"E\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"E\", \"TI\"], \"2\"]}\),
TraditionalForm]\) and the recurrence time interval \!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"t\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"t\", \"TI\"], \"2\"]}\),
TraditionalForm]\).
The histogram categories to be used are given by\!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"E\", \"TI\"], \"min\"], \*SubscriptBox[
StyleBox[\"E\", \"TI\"], \"max\"], \*
StyleBox[\"d\", \"TI\"] \*
StyleBox[\"E\", \"TI\"]}\),
TraditionalForm]\).
In addition to the recurrence histogram, the full FRET efficiency histogram is shown. Both are normalized to their maxima. The initial E\[Hyphen]range and the recurrence interval are indicated.
";


FRecurrenceList  ::usage="FRecurrenceList[burstlist\!\(\*FormBox[\(_\),
TraditionalForm]\)List,\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)E1\!\(\*FormBox[\(_\),
TraditionalForm]\)?NumberQ,E2\!\(\*FormBox[\(_\),
TraditionalForm]\)?NumberQ\!\(\*FormBox[\(}\),
TraditionalForm]\),\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)t1\!\(\*FormBox[\(_\),
TraditionalForm]\)?NumberQ,t2\!\(\*FormBox[\(_\),
TraditionalForm]\)?NumberQ\!\(\*FormBox[\(}\),
TraditionalForm]\),opt\!\(\*FormBox[\(___\),
TraditionalForm]\)] ";


FSameMoleculeProbability  ::usage="FSameMoleculeProbability[\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)tmin,tmax\!\(\*FormBox[\(}\),
TraditionalForm]\),\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)bursttimes1,bursttimes2\!\(\*FormBox[\(}\),
TraditionalForm]\),opts] calculates psame(\!\(\*FormBox[\(\[Tau]\),
TraditionalForm]\)) using the cross\[Hyphen]correlation of the photon burst times listed in bursttimes1 and bursttimes2.
FSameMoleculeProbability[\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)tmin,tmax\!\(\*FormBox[\(}\),
TraditionalForm]\),bursttimes\!\(\*FormBox[\(}\),
TraditionalForm]\),opts] calculates psame(\!\(\*FormBox[\(\[Tau]\),
TraditionalForm]\)) using the autocorrelation of the photon burst times listed in bursttimes.

The lagtimes used are \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)tmin,2 tmin,4 tmin,...,10 tmin,12 tmin,14 tmin,...,30 tmin, 34tmin, 38tmin...tmax\!\(\*FormBox[\(}\),
TraditionalForm]\).
For a linear spacing of the lagtimes, use \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)tmin,tmax,dt\!\(\*FormBox[\(}\),
TraditionalForm]\) instead of \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)tmin,tmax\!\(\*FormBox[\(}\),
TraditionalForm]\).


Options:
\!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)FOutput\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FGraph (default)
\!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)FOutput\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FData (The output is a ListLogLinearPlot or ListPlot, depending on the definition of the lagtimes.)
\!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)All options of ListLogLinearPlot and ListPlot
";


FGetFromPiezoScan  ::usage="FGetFromPiezoScan[expr] or FGetFromPiezoScan[expr, frame] evaluates expr for each pixel of a scan image and returns the results in an array.
 expr can contain the following strings: 
  
\"n1\", \"n2\", etc.:   Uncorrected detector counts. 
\"n1\!\(\*FormBox[\(_\),
TraditionalForm]\)corr\", \"n2\!\(\*FormBox[\(_\),
TraditionalForm]\)corr\", etc.:   Detector counts corrected for background and RCM, but not for acceptor direct excitation, i.e. \"n\!\(\*FormBox[\(\*
StyleBox[\"i\", \"TI\"] _\),
TraditionalForm]\)corr\" represents the \!\(\*FormBox[
StyleBox[\"i\", \"TI\"],
TraditionalForm]\)th element of the vector \!\(\*FormBox[\(\*SubscriptBox[
StyleBox[\"n\", \"TI\"], 
StyleBox[
RowBox[{\"c\", \"o\", \"r\", \"r\"}], \"TI\"]]\(\[LongEqual]\)\),
TraditionalForm]\)RCM.\!\(\*FormBox[\((\*
StyleBox[\"n\", \"TI\"] - \*
StyleBox[\"b\", \"TI\"] \*
StyleBox[\"g\", \"TI\"])\),
TraditionalForm]\). 
\"n\!\(\*FormBox[\(_\),
TraditionalForm]\)corr\":   Total photon number in photon burst, corrected for background and RCM. 
\"nA\!\(\*FormBox[\(_\),
TraditionalForm]\)raw\", \"nD\!\(\*FormBox[\(_\),
TraditionalForm]\)raw\":   Uncorrected total acceptor and donor counts. 
\"nA\", \"nD\":   Background\[Hyphen] and RCM\[Hyphen]corrected total acceptor and total donor counts, not corrected for acceptor direct excitation. 

\"n1pie\", \"n2pie\", etc.:   Counts in the PIE channels. 
\"n1pie\!\(\*FormBox[\(_\),
TraditionalForm]\)corr\", \"n2pie\!\(\*FormBox[\(_\),
TraditionalForm]\)corr\", etc.:   Background\[Hyphen]corrected counts in the PIE channels. 
\"nApie_raw\", \"nDpie_raw\":   Uncorrected total acceptor and donor counts in the PIE channels. 
\"nApie\", \"nDpie\":   Background corrected total acceptor and total donor counts in the PIE channels.

\"E\" , \"LogNdOverNa\", \"Root6NdOverNa\":   Transfer efficiency and related quantities corrected for background, RCM, and acceptor direct excitation \[Alpha]. E is calculated from (nA-\[Alpha](nA+nD))/(nA+nD-\[Alpha](nA+nD))
\"Epie\":   Transfer efficiency corrected for background, RCM, and acceptor direct excitation \!\(\*
StyleBox[\"d\",\nFontSlant->\"Italic\"]\). \!\(\*
StyleBox[\"E\",\nFontSlant->\"Italic\"]\) is calculated from (nA- \!\(\*
StyleBox[\"d\",\nFontSlant->\"Italic\"]\) nA\!\(\*FormBox[\(_\),
TraditionalForm]\)pie)/(nA+nD- \!\(\*
StyleBox[\"d\",\nFontSlant->\"Italic\"]\) nA\!\(\*FormBox[\(_\),
TraditionalForm]\)pie) with \!\(\*
StyleBox[\"d\",\nFontSlant->\"Italic\"]\)=\!\(\*SubscriptBox[\(\[Gamma]\), 
StyleBox[
RowBox[{\"p\", \"i\", \"e\"}], \"TI\"]]\)(\[Alpha]/(1-\[Alpha]).
\"Spie\" or \"StoichiometryRatio\":   Calculated from (nA+nD)/(nA+nD+\!\(\*FormBox[SubscriptBox[\"\[Gamma]\", 
StyleBox[
RowBox[{\"p\", \"i\", \"e\"}], \"TI\"]],
TraditionalForm]\)(nA\!\(\*FormBox[\(_\),
TraditionalForm]\)pie)). 
\"Eapp\" and \"Sapp\":   cacluate apparent values from the burst counts that are only corrected for background, but not for RCM, \[Alpha] or \[Gamma]pie. 
\"ProximityRatio\":   \"nA\!\(\*FormBox[\(_\),
TraditionalForm]\)raw\"/(\"nA\!\(\*FormBox[\(_\),
TraditionalForm]\)raw\"+\"nD\!\(\*FormBox[\(_\),
TraditionalForm]\)raw\"). 

\"StartTime\", \"EndTime\":   Detection times of the first and last photons in a burst, respectively (in seconds). 
\"BurstDuration\":   Durations (\"EndTime\"\[Hyphen]\"StartTime\") of the photon bursts (in seconds). 
\"tau1\", \"tau2\", etc.:   Mean fluorescence lifetimes. Needs to be calculated by calling FCalcBurstLifeTimes beforehand. 
\"tavgD\", \"tavgA\":   Mean arrival (detection) times of donor and acceptor photons, respectively. 
\"BurstAsymmetry\":   Equivalent to \"tavgA\"\[Hyphen]\"tavgD\". 
\"tavg\":   Mean arrival (detection) times. If PIE is enabled, only the photons in the main lifetime channels are used. 
\"tavg\!\(\*FormBox[\(_\),
TraditionalForm]\)pie\":   Mean arrival (detection) times of photons in PIE lifetime channels. 
\"BurstPIEAsymmetry\":   Equivalent to \"tavg\"\[Hyphen]\"tavg\!\(\*FormBox[\(_\),
TraditionalForm]\)pie\". 
\"DonorAnisotropy\":   calculates \!\(\*FormBox[\(\((\*SubscriptBox[
StyleBox[\"n\", \"TI\"], 
StyleBox[\"p\", \"TI\"]] - \*SubscriptBox[
StyleBox[\"n\", \"TI\"], 
StyleBox[\"s\", \"TI\"]])\)/\((\((1 - 3 \*SubscriptBox[
StyleBox[\"L\", \"TI\"], \"2\"])\) \*SubscriptBox[
StyleBox[\"n\", \"TI\"], 
StyleBox[\"p\", \"TI\"]] + \((2 - 3 \*SubscriptBox[
StyleBox[\"L\", \"TI\"], \"1\"])\) \*SubscriptBox[
StyleBox[\"n\", \"TI\"], 
StyleBox[\"s\", \"TI\"]])\))\),
TraditionalForm]\), where \!\(\*FormBox[SubscriptBox[
StyleBox[\"n\", \"TI\"], 
StyleBox[\"p\", \"TI\"]],
TraditionalForm]\) and \!\(\*FormBox[SubscriptBox[
StyleBox[\"n\", \"TI\"], 
StyleBox[\"s\", \"TI\"]],
TraditionalForm]\) are background and RCM\[Hyphen]corrected photon counts of the parallel and orthogonal donor detection routes, respectively. \!\(\*FormBox[SubscriptBox[
StyleBox[\"L\", \"TI\"], \"1\"],
TraditionalForm]\) and \!\(\*FormBox[SubscriptBox[
StyleBox[\"L\", \"TI\"], \"2\"],
TraditionalForm]\) are correction factors set using FSetAnisotropyL1 and FSetAnisotropyL2. 
\"AcceptorAnisotropy\":   calculates \!\(\*FormBox[\(\((\*SubscriptBox[
StyleBox[\"n\", \"TI\"], 
StyleBox[\"p\", \"TI\"]] - \*SubscriptBox[
StyleBox[\"n\", \"TI\"], 
StyleBox[\"s\", \"TI\"]])\)/\((\((1 - 3 \*SubscriptBox[
StyleBox[\"L\", \"TI\"], \"2\"])\) \*SubscriptBox[
StyleBox[\"n\", \"TI\"], 
StyleBox[\"p\", \"TI\"]] + \((2 - 3 \*SubscriptBox[
StyleBox[\"L\", \"TI\"], \"1\"])\) \*SubscriptBox[
StyleBox[\"n\", \"TI\"], 
StyleBox[\"s\", \"TI\"]])\))\),
TraditionalForm]\), where \!\(\*FormBox[SubscriptBox[
StyleBox[\"n\", \"TI\"], 
StyleBox[\"p\", \"TI\"]],
TraditionalForm]\) and \!\(\*FormBox[SubscriptBox[
StyleBox[\"n\", \"TI\"], 
StyleBox[\"s\", \"TI\"]],
TraditionalForm]\) are background and RCM\[Hyphen]corrected photon counts of the parallel and orthogonal acceptor detection routes, respectively. \!\(\*FormBox[SubscriptBox[
StyleBox[\"L\", \"TI\"], \"1\"],
TraditionalForm]\) and \!\(\*FormBox[SubscriptBox[
StyleBox[\"L\", \"TI\"], \"2\"],
TraditionalForm]\) are correction factors set using FSetAnisotropyL1 and FSetAnisotropyL2. 
\"PIEAcceptorAnisotropy\":   calculates \!\(\*FormBox[\(\((\*SubscriptBox[
StyleBox[\"n\", \"TI\"], 
StyleBox[\"p\", \"TI\"]] - \*SubscriptBox[
StyleBox[\"n\", \"TI\"], 
StyleBox[\"s\", \"TI\"]])\)/\((\((1 - 3 \*SubscriptBox[
StyleBox[\"L\", \"TI\"], \"2\"])\) \*SubscriptBox[
StyleBox[\"n\", \"TI\"], 
StyleBox[\"p\", \"TI\"]] + \((2 - 3 \*SubscriptBox[
StyleBox[\"L\", \"TI\"], \"1\"])\) \*SubscriptBox[
StyleBox[\"n\", \"TI\"], 
StyleBox[\"s\", \"TI\"]])\))\),
TraditionalForm]\), where \!\(\*FormBox[SubscriptBox[
StyleBox[\"n\", \"TI\"], 
StyleBox[\"p\", \"TI\"]],
TraditionalForm]\) and \!\(\*FormBox[SubscriptBox[
StyleBox[\"n\", \"TI\"], 
StyleBox[\"s\", \"TI\"]],
TraditionalForm]\) are background and RCM\[Hyphen]corrected photon counts of the parallel and orthogonal acceptor detection routes, respectively. Only photons with lifetime channels within the set PIE channel ranges are used. \!\(\*FormBox[SubscriptBox[
StyleBox[\"L\", \"TI\"], \"1\"],
TraditionalForm]\) and \!\(\*FormBox[SubscriptBox[
StyleBox[\"L\", \"TI\"], \"2\"],
TraditionalForm]\) are correction factors set using FSetAnisotropyL1 and FSetAnisotropyL2. 
\"n\!\(\*FormBox[\(_\),
TraditionalForm]\)tot\!\(\*FormBox[\(_\),
TraditionalForm]\)asym\":   Calculated from \!\(\*FormBox[\(\((\*SubscriptBox[
StyleBox[\"n\", \"TI\"], \"2\"] - \*SubscriptBox[
StyleBox[\"n\", \"TI\"], \"1\"])\)/\((\*SubscriptBox[
StyleBox[\"n\", \"TI\"], \"1\"] + \*SubscriptBox[
StyleBox[\"n\", \"TI\"], \"2\"])\)\),
TraditionalForm]\), where \!\(\*FormBox[SubscriptBox[
StyleBox[\"n\", \"TI\"], 
RowBox[{\"1\", \",\", \"2\"}]],
TraditionalForm]\) are the total corrected number of photons in the first and second half of the photon burst, respectively. 
\"Selected\":   Value is 1 for selected photon bursts and 0 for non\[Hyphen]selected photon bursts. 
  
\"InterPhotonTimes\":   List of interphoton times, \!\(\*FormBox[\(\*
StyleBox[\"d\", \"TI\"] \*SubscriptBox[
StyleBox[\"t\", \"TI\"], 
StyleBox[\"i\", \"TI\"]] \[LongEqual] \*SubscriptBox[
StyleBox[\"t\", \"TI\"], 
StyleBox[\"i\", \"TI\"]] - \*SubscriptBox[
StyleBox[\"t\", \"TI\"], 
RowBox[{
StyleBox[\"i\", \"TI\"], \"-\", \"1\"}]]\),
TraditionalForm]\) in \!\(\*FormBox[\(\[Mu]\),
TraditionalForm]\)s. 
\"DetectionChannels\":   List of the photons' detection routes. 
\"LifeTimeChannels\":   List of the photons' lifetime channels. 
Each string in an expression will be replaced by the corresponding array of values for all pixels. Each string in an expression will be replaced by the corresponding list of values for all photon bursts. \!\(\*
StyleBox[\"Hold\",\nFontSlant->\"Italic\"]\) can be used to prevent the expression to be evalutated by Mathematica before the strings are replaced.
 Internally, Fretica organizes the pixels of a scan like a list of photon bursts. Hence, after applying FGetFromPiezoScan, one can perform the same operations on the pixels as on photon bursts. 
";


FGetScanImage  ::usage="Obsolete function. Use FGetFromPiezoScan and FScanImage.
FGetScanImage[] returns the image information of a piezo scan in the form \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)ScanImageX0\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)val,ScanImageY0\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)val,ScanImagePixelResol\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)val, ScanImageData\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)pixcounts\!\(\*FormBox[\(}\),
TraditionalForm]\). 
 pixcounts is a two\[Hyphen]dimensional pixel array in which the photon counts on the detectors are stored as a list. The origin of the image scan and the image resolution are given in units of micrometers. ";


FGetScanImageCoordinatesFromTime  ::usage="FGetScanImageCoordinatesFromTime[time\!\(\*FormBox[\(_\),
TraditionalForm]\)?NumberQ] returns the frame and the coordinate corresponding to time in the form \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)frame,\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)x,y\!\(\*FormBox[\(\(}\)\(}\)\),
TraditionalForm]\). An empty list is returned if time is outside the available frames or outside the scan area. ";


FScanImage  ::usage="FScanImage[intensityarray,\!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"i\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"i\", \"TI\"], \"2\"]}\),
TraditionalForm]\),opt] 
or FScanImage[intensityarray,\!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"i\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"i\", \"TI\"], \"2\"]}\),
TraditionalForm]\),\!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"x\", \"TI\"], \"0\"], \*SubscriptBox[
StyleBox[\"y\", \"TI\"], \"0\"], \[CapitalDelta] \*
StyleBox[\"x\", \"TI\"], \[CapitalDelta] \*
StyleBox[\"y\", \"TI\"]}\),
TraditionalForm]\), opt] 
or FScanImage[parameterarray,\!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"i\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"i\", \"TI\"], \"2\"]}, {\*SubscriptBox[
StyleBox[\"p\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"p\", \"TI\"], \"2\"]}\),
TraditionalForm]\),opt] 
or FScanImage[parameterarray,\!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"i\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"i\", \"TI\"], \"2\"]}, {\*
StyleBox[\"p\", \"TI\"] 1, \*
StyleBox[\"p\", \"TI\"] 2}, {\*SubscriptBox[
StyleBox[\"x\", \"TI\"], \"0\"], \*SubscriptBox[
StyleBox[\"y\", \"TI\"], \"0\"], \[CapitalDelta] \*
StyleBox[\"x\", \"TI\"], \[CapitalDelta] \*
StyleBox[\"y\", \"TI\"]}\),
TraditionalForm]\),opt] 
FScanImage is used to display data returned by FGetFromPiezoScan. The array data need to match one of two possible forms denoted above as intensityarray or parameterarray. 
intensityarray must be a two\[Hyphen]dimensional array of numbers, typically obtained from expressions like FGetFromPiezoScan[\"n1\"+\"n2\"]. 
parameterarray must be a two\[Hyphen]dimensional array of pairs of numbers of the form \!\(\*FormBox[\({\*
StyleBox[\"i\", \"TI\"], \*
StyleBox[\"p\", \"TI\"]}\),
TraditionalForm]\), typically obtained from expressions like FGetFromPiezoScan[ Hold@\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)\"n1\"+\"n2\",\"E\"\!\(\*FormBox[SuperscriptBox[\"}\", 
StyleBox[\"T\",\nFontSlant->\"Plain\"]],
TraditionalForm]\)]. 
If an intensity array is supplied, FScanImage displays a grayscale image of the pixels in the array. In case of a parameter array, the image is colored. \!\(\*FormBox[
StyleBox[\"i\", \"TI\"],
TraditionalForm]\) and \!\(\*FormBox[
StyleBox[\"p\", \"TI\"],
TraditionalForm]\) are displayed as brightness and color hue, respectively. \!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"i\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"i\", \"TI\"], \"2\"]}\),
TraditionalForm]\) defines the brightness range from darkest (black) to brightest. All intensity values below \!\(\*FormBox[SubscriptBox[
StyleBox[\"i\", \"TI\"], \"1\"],
TraditionalForm]\) are displayed in black, all intensities above \!\(\*FormBox[SubscriptBox[
StyleBox[\"i\", \"TI\"], \"2\"],
TraditionalForm]\) are displayed with maximal brightness. \!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"p\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"p\", \"TI\"], \"2\"]}\),
TraditionalForm]\) defines the hue range from blue to red. All pixels with a parameter value below \!\(\*FormBox[SubscriptBox[
StyleBox[\"p\", \"TI\"], \"1\"],
TraditionalForm]\) are displayed in blue, all values above \!\(\*FormBox[SubscriptBox[
StyleBox[\"p\", \"TI\"], \"2\"],
TraditionalForm]\) are displayed in red.
The values of \!\(\*FormBox[
StyleBox[\"i\", \"TI\"],
TraditionalForm]\) and \!\(\*FormBox[
StyleBox[\"p\", \"TI\"],
TraditionalForm]\) for each pixel can be read with the coordinate tool. (Select the image and press the \".\"\[Hyphen]key.)
\!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"x\", \"TI\"], \"0\"], \*SubscriptBox[
StyleBox[\"y\", \"TI\"], \"0\"], \[CapitalDelta] \*
StyleBox[\"x\", \"TI\"], \[CapitalDelta] \*
StyleBox[\"y\", \"TI\"]}\),
TraditionalForm]\) is used to label the axes ticks. \!\(\*FormBox[SubscriptBox[
StyleBox[\"x\", \"TI\"], \"0\"],
TraditionalForm]\) and \!\(\*FormBox[SubscriptBox[
StyleBox[\"y\", \"TI\"], \"0\"],
TraditionalForm]\) define the bottom left corner of the image. \!\(\*FormBox[\(\[CapitalDelta] \*
StyleBox[\"x\", \"TI\"]\),
TraditionalForm]\) and\!\(\*FormBox[\(\[CapitalDelta] \*
StyleBox[\"y\", \"TI\"]\),
TraditionalForm]\) are the pixel resolution in \!\(\*FormBox[
StyleBox[\"x\", \"TI\"],
TraditionalForm]\) and \!\(\*FormBox[
StyleBox[\"y\", \"TI\"],
TraditionalForm]\) direction, respectively.
These numbers are automatically taken from the TTTR file header in case they are not given explicitly.
The graphical output of FScanImage can be changed by applying the options of Graphics.
A color legend can be obtained from FScanImageColorLegend.
 ";


FScanImageColorLegend  ::usage="FScanImageColorLegend[\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)i1\!\(\*FormBox[\(_\),
TraditionalForm]\),i2\!\(\*FormBox[\(\(_\)\(}\)\),
TraditionalForm]\),\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)p1\!\(\*FormBox[\(_\),
TraditionalForm]\),p2\!\(\*FormBox[\(\(_\)\(}\)\),
TraditionalForm]\)] ";


FScanImageParamName  ::usage="FScanImageParamName is an option of FScanImage. ";


FCalculateBurstListFromScanImagePixels  ::usage="FCalculateBurstListFromScanImagePixels[] or FCalculateBurstListFromScanImagePixels[frame\!\(\*FormBox[\(_\),
TraditionalForm]\)Integer] ";


FFastFLIM  ::usage="FastFLIM[routes, \!\(\*FormBox[SubscriptBox[
StyleBox[\"t\", \"TI\"], \"0\"],
TraditionalForm]\), \!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"i\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"i\", \"TI\"], \"2\"]}\),
TraditionalForm]\), \!\(\*FormBox[\({\*SubscriptBox[\(\[Tau]\), \(1\)], \*SubscriptBox[\(\[Tau]\), \(2\)]}\),
TraditionalForm]\), opts] or
FastFLIM[routes, \!\(\*FormBox[SubscriptBox[
StyleBox[\"t\", \"TI\"], \"0\"],
TraditionalForm]\), \!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"i\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"i\", \"TI\"], \"2\"]}\),
TraditionalForm]\), \!\(\*FormBox[\({\*SubscriptBox[\(\[Tau]\), \(1\)], \*SubscriptBox[\(\[Tau]\), \(2\)]}\),
TraditionalForm]\), frame, opts]
return data and and an image resulting from a fast FLIM calculation, where for each pixel the mean of the photon micro times minus \!\(\*FormBox[SubscriptBox[
StyleBox[\"t\", \"TI\"], \"0\"],
TraditionalForm]\) is determined.
Example:
\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)flimdata, flimimage\!\(\*FormBox[\(}\),
TraditionalForm]\) \[LongEqual] FFastFLIM[ \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)1,0,0,1,0,0\!\(\*FormBox[\(}\),
TraditionalForm]\), \!\(\*FormBox[SubscriptBox[
StyleBox[\"t\", \"TI\"], \"0\"],
TraditionalForm]\), \!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"i\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"i\", \"TI\"], \"2\"]}\),
TraditionalForm]\), \!\(\*FormBox[\({\*SubscriptBox[\(\[Tau]\), \(1\)], \*SubscriptBox[\(\[Tau]\), \(2\)]}\),
TraditionalForm]\), opts]
flimdata is an array of \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)intensity, mean arrival time\!\(\*FormBox[\(}\),
TraditionalForm]\) pairs for each pixel.
\!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"i\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"i\", \"TI\"], \"2\"]}\),
TraditionalForm]\) and \!\(\*FormBox[\({\*SubscriptBox[\(\[Tau]\), \(1\)], \*SubscriptBox[\(\[Tau]\), \(2\)]}\),
TraditionalForm]\) define the brightness and hue range as described in FScanImage.
\!\(\*FormBox[SubscriptBox[
StyleBox[\"t\", \"TI\"], \"0\"],
TraditionalForm]\) is subtracted from all mean micro times. 
The graphical output can be modified with the options of Graphics.
";


FDeleteTTTRTimeInterval  ::usage="FDeleteTTTRTimeInterval[\!\(\*FormBox[\({{\[Null]\),
TraditionalForm]\)t1,t2\!\(\*FormBox[\(}\),
TraditionalForm]\), ...\!\(\*FormBox[\(}\),
TraditionalForm]\),opts] deletes all photons between t1 and t2 (given in seconds). Note that the TTTR file needs to be reopened for undoing this operation.
Option: FCloseGap\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)True (Default\[LongEqual]True) By default, the time stamps of the remaining photons are shifted by t1\[Hyphen]t2 to eliminate the gaps resulting from photon deletion. Set to False to keep gaps.
";


FCloseGap  ::usage="Option of FDeleteTTTRTimeInterval. ";


WGdx  ::usage="No help available. ";


WGx0  ::usage="No help available. ";


YGraph  ::usage="No help available. ";


FAExplambdat  ::usage="FAExplambdat[A:\!\(\*FormBox[\({_\),
TraditionalForm]\)?NumberQ..\!\(\*FormBox[\(}\),
TraditionalForm]\),lambda:\!\(\*FormBox[\({_\),
TraditionalForm]\)?NumberQ..\!\(\*FormBox[\(}\),
TraditionalForm]\),times:\!\(\*FormBox[\({_\),
TraditionalForm]\)?NumberQ..\!\(\*FormBox[\(}\),
TraditionalForm]\)] ";


FExpkAbst  ::usage="FExpkAbst[k\!\(\*FormBox[\(_\),
TraditionalForm]\)?NumberQ,times:\!\(\*FormBox[\({_\),
TraditionalForm]\)?NumberQ..\!\(\*FormBox[\(}\),
TraditionalForm]\)] ";


FOneMinusExpkAbst  ::usage="FOneMinusExpkAbst[k\!\(\*FormBox[\(_\),
TraditionalForm]\)?NumberQ,times:\!\(\*FormBox[\({_\),
TraditionalForm]\)?NumberQ..\!\(\*FormBox[\(}\),
TraditionalForm]\)] ";


FV2expKtV1pss  ::usage="FV2expKtV1pss[K:\!\(\*FormBox[\({{_\),
TraditionalForm]\)?NumberQ,\!\(\*FormBox[\(_\),
TraditionalForm]\)?NumberQ\!\(\*FormBox[\(}\),
TraditionalForm]\)..\!\(\*FormBox[\(}\),
TraditionalForm]\),V1pss:\!\(\*FormBox[\({_\),
TraditionalForm]\)?NumberQ..\!\(\*FormBox[\(}\),
TraditionalForm]\),TotV2:\!\(\*FormBox[\({_\),
TraditionalForm]\)?NumberQ..\!\(\*FormBox[\(}\),
TraditionalForm]\),times:\!\(\*FormBox[\({_\),
TraditionalForm]\)?NumberQ..\!\(\*FormBox[\(}\),
TraditionalForm]\)] ";


FEigenSystem  ::usage="FEigenSystem[Km\!\(\*FormBox[\(_\),
TraditionalForm]\)?MatrixQ[NumberQ]] ";


FTSClearStateTrajectories  ::usage="FTSClearStateTrajectories[SpeciesIndex\!\(\*FormBox[\(_\),
TraditionalForm]\)Integer]
FTSClearStateTrajectories[] ";


FTSDistanceTrajectory  ::usage="FTSDistanceTrajectory[ trlist ] transforms particle coordinates contained in trlist to distances to the center of origin. trlist can be any output of FTSGetTrajectories. ";


FTSGetIntensityTrajectory  ::usage="FTSGetIntensityTrajectory[bg:FTSRateList,rmax\!\(\*FormBox[\(_\),
TraditionalForm]\)?NumberQ,w0\!\(\*FormBox[\(_\),
TraditionalForm]\)?NumberQ,start\!\(\*FormBox[\(_\),
TraditionalForm]\)Integer, bincount\!\(\*FormBox[\(_\),
TraditionalForm]\)Integer] ";


FTSGetNumberOfParticleTrajectory  ::usage="FTSGetNumberOfParticleTrajectory[speciesindex\!\(\*FormBox[\(_\),
TraditionalForm]\)Integer,binwidth\!\(\*FormBox[\(_\),
TraditionalForm]\)Integer, rmax\!\(\*FormBox[\(_\),
TraditionalForm]\)?NumberQ] ";


FTSGetNumberOfSpecies  ::usage="FTSGetNumberOfSpecies[] returns the value set by FTSSetNumberOfSpecies. ";


FTSGetRDistribution  ::usage="FTSGetRDistribution[speciesindex\!\(\*FormBox[\(_\),
TraditionalForm]\)Integer,binwidth\!\(\*FormBox[\(_\),
TraditionalForm]\)?NumberQ, bincount\!\(\*FormBox[\(_\),
TraditionalForm]\)Integer] ";


FTSGetTrajectories  ::usage="\!\(\*
StyleBox[\"FTSGetTrajectories\", \"TB\"]\)\!\(\*FormBox[\(\([\)\(\*SubscriptBox[
StyleBox[\"i\", \"TI\"], 
StyleBox[\"s\", \"TI\"]], \*
StyleBox[\"k\", \"TI\"]; ; \*
StyleBox[\"l\", \"TI\"], \[CapitalDelta], \*SubscriptBox[
StyleBox[\"r\", \"TI\"], \"max\"]\)\(]\)\),
TraditionalForm]\) returns a list of simulated trajectories of species \!\(\*FormBox[SubscriptBox[
StyleBox[\"i\", \"TI\"], 
StyleBox[\"s\", \"TI\"]],
TraditionalForm]\)  
\!\(\*FormBox[SubscriptBox[
StyleBox[\"i\", \"TI\"], 
StyleBox[\"s\", \"TI\"]],
TraditionalForm]\):   species index 
\!\(\*FormBox[\(\*
StyleBox[\"k\", \"TI\"]; ; \*
StyleBox[\"l\", \"TI\"]\),
TraditionalForm]\):   Trajectories \!\(\*FormBox[
StyleBox[\"k\", \"TI\"],
TraditionalForm]\) to \!\(\*FormBox[
StyleBox[\"l\", \"TI\"],
TraditionalForm]\) are returned. With \!\(\*FormBox[\(1; ; \*
StyleBox[\"A\", \"TI\"] \*
StyleBox[\"l\", \"TI\"] \*
StyleBox[\"l\", \"TI\"]\),
TraditionalForm]\), all trajectories are returned. 
\!\(\*FormBox[\(\[CapitalDelta]\),
TraditionalForm]\):   For each trajectory, only every \!\(\*FormBox[\(\[CapitalDelta]  th\),
TraditionalForm]\) particle position is returned. 
\!\(\*FormBox[SubscriptBox[
StyleBox[\"r\", \"TI\"], \"max\"],
TraditionalForm]\):   Only positions with \!\(\*FormBox[\(\*
StyleBox[\"r\", \"TI\"] < \*SubscriptBox[
StyleBox[\"r\", \"TI\"], \"max\"]\),
TraditionalForm]\) are returned. With \!\(\*FormBox[\(\*SubscriptBox[
StyleBox[\"r\", \"TI\"], \"max\"] < 0\),
TraditionalForm]\), all positions are returned. 
The output of FTSGetTrajectories is of the form \!\(\*FormBox[\({\*
StyleBox[\"h\", \"TI\"] \*
StyleBox[\"e\", \"TI\"] \*
StyleBox[\"a\", \"TI\"] \*
StyleBox[\"d\", \"TI\"] \*
StyleBox[\"e\", \"TI\"] \*
StyleBox[\"r\", \"TI\"], {\*
StyleBox[\"t\", \"TI\"] \*
StyleBox[\"r\", \"TI\"] 1, \*
StyleBox[\"t\", \"TI\"] \*
StyleBox[\"r\", \"TI\"] 2,  ... }}\),
TraditionalForm]\). It can be passed on to FTSDistanceTrajectory or FTSIntensityTrajectory  ";


FTSIntensityTrajectory  ::usage="\!\(\*
StyleBox[\"FTSIntensityTrajectory\", \"TB\"]\)[trlist,\!\(\*FormBox[\(\*SubscriptBox[
StyleBox[\"I\", \"TI\"], \"0\"], \*SubscriptBox[
StyleBox[\"w\", \"TI\"], \"0\"], \*SubscriptBox[
StyleBox[\"z\", \"TI\"], \"0\"]]\),
TraditionalForm]\) returns a list of trajectories with pairs of time and intensity assuming a Gaussian\[Hyphen]shaped confocal volume centered at the origin.  
trlist:   This can be any output of FTSGetTrajectories. 
\!\(\*FormBox[SubscriptBox[
StyleBox[\"I\", \"TI\"], \"0\"],
TraditionalForm]\):   Intensity detected from a particle located at the origin. 
\!\(\*FormBox[SubscriptBox[
StyleBox[\"w\", \"TI\"], \"0\"],
TraditionalForm]\):   Lateral dimension (semi\[Hyphen]minor axis) of the confocal volume in micrometers. 
\!\(\*FormBox[SubscriptBox[
StyleBox[\"z\", \"TI\"], \"0\"],
TraditionalForm]\):   Axial dimension (semi\[Hyphen]major axis) of the confocal volume in micrometers. 
Depending on the data format in trlist, the intensity as a function of particle position is calculated in cylindrical coordinates according to \!\(\*FormBox[\(\*
StyleBox[\"I\", \"TI\"] \((\[Rho], \*
StyleBox[\"z\", \"TI\"])\) \[LongEqual] \*SubscriptBox[
StyleBox[\"I\", \"TI\"], \"0\"] exp \((\(-\*FractionBox[
RowBox[{\"2\", SuperscriptBox[\"\[Rho]\", \"2\"]}], SubsuperscriptBox[
StyleBox[\"w\", \"TI\"], \"0\", \"2\"]] - \*FractionBox[
RowBox[{\"2\", SuperscriptBox[
StyleBox[\"z\", \"TI\"], \"2\"]}], SubsuperscriptBox[
StyleBox[\"z\", \"TI\"], \"0\", \"2\"]]\))\)\),
TraditionalForm]\) or in spherical coordinates according to \!\(\*FormBox[\(\*
StyleBox[\"I\", \"TI\"] \((\*
StyleBox[\"r\", \"TI\"])\) \[LongEqual] \*SubscriptBox[
StyleBox[\"I\", \"TI\"], \"0\"] exp \((\(-\*FractionBox[
RowBox[{\"2\", SuperscriptBox[
StyleBox[\"r\", \"TI\"], \"2\"]}], SubsuperscriptBox[
StyleBox[\"w\", \"TI\"], \"0\", \"2\"]]\))\)\),
TraditionalForm]\).  ";


FTSMeanNewParticelNumberInSphere  ::usage="FTSMeanNewParticelNumberInSphere[ShpereRadius\!\(\*FormBox[\(_\),
TraditionalForm]\)Real,DiffConstant\!\(\*FormBox[\(_\),
TraditionalForm]\)Real,ParticleConcentration\!\(\*FormBox[\(_\),
TraditionalForm]\)Real,time\!\(\*FormBox[\(_\),
TraditionalForm]\)Real] ";


FTSNewParticleConcentration  ::usage="FTSNewParticleConcentration[SphereRadius\!\(\*FormBox[\(_\),
TraditionalForm]\)Real,DiffConstant\!\(\*FormBox[\(_\),
TraditionalForm]\)Real,ParticleConcentration\!\(\*FormBox[\(_\),
TraditionalForm]\)Real,Radius\!\(\*FormBox[\(_\),
TraditionalForm]\)Real,Time\!\(\*FormBox[\(_\),
TraditionalForm]\)Real] ";


FTSPIEify  ::usage="Use of FTSPIEify is discouraged. ";


FTSRandomPositionInSphere  ::usage="FTSRandomPositionInSphere[SphereRadius\!\(\*FormBox[\(_\),
TraditionalForm]\)?NumberQ,DiffConstant\!\(\*FormBox[\(_\),
TraditionalForm]\)?NumberQ,ParticleConcentration\!\(\*FormBox[\(_\),
TraditionalForm]\)?NumberQ,time\!\(\*FormBox[\(_\),
TraditionalForm]\)?NumberQ] ";


FTSRateList  ::usage="Pattern of the form \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)Repeated[\!\(\*FormBox[\(_\),
TraditionalForm]\)?NumberQ,\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)FNumberOfRoutes\!\(\*FormBox[\(}\),
TraditionalForm]\)]\!\(\*FormBox[\(}\),
TraditionalForm]\) ";


FTSSetNumberOfSpecies  ::usage="\!\(\*
StyleBox[\"FTSSetNumberOfSpecies\", \"TB\"]\)\!\(\*FormBox[\(\([\)\*SubscriptBox[
StyleBox[\"N\", \"TI\"], 
StyleBox[\"s\", \"TI\"]]\(]\)\),
TraditionalForm]\) sets the number \!\(\*FormBox[SubscriptBox[
StyleBox[\"N\", \"TI\"], 
StyleBox[\"s\", \"TI\"]],
TraditionalForm]\) of species to be simulated. 
\!\(\*
StyleBox[\"FTSGetNumberOfSpecies\", \"TB\"]\)\!\(\*FormBox[\([]\),
TraditionalForm]\) returns the value set by FTSSetNumberOfSpecies.  ";


FTSSimulateImmobilizedParticle  ::usage="\!\(\*
StyleBox[\"FTSSimulateImmobilizedParticle\", \"TB\"]\)\!\(\*FormBox[\(\([\)\(\*
StyleBox[\"T\", \"TI\"], \[CapitalDelta] \*
StyleBox[\"t\", \"TI\"]\)\(]\)\),
TraditionalForm]\) generates a trajectory of a particle that is immobilized at the origin, i.e., at the center of the confocal volume.  
\!\(\*FormBox[
StyleBox[\"T\", \"TI\"],
TraditionalForm]\):   Total length of the simulation in units of \!\(\*FormBox[\(\[CapitalDelta] \*
StyleBox[\"t\", \"TI\"]\),
TraditionalForm]\). \!\(\*FormBox[
StyleBox[\"T\", \"TI\"],
TraditionalForm]\) is an integer and defines the total number of simulations steps. 
\!\(\*FormBox[\(\[CapitalDelta] \*
StyleBox[\"t\", \"TI\"]\),
TraditionalForm]\):   Simulation step size in microseconds. ";


FTSSimulateParticleDiffusion  ::usage="\!\(\*
StyleBox[\"FTSSimulateParticleDiffusion\", \"TB\"]\)\!\(\*FormBox[\(\([\)\(\*SubscriptBox[
StyleBox[\"i\", \"TI\"], 
StyleBox[\"s\", \"TI\"]], \*
StyleBox[\"R\", \"TI\"], \*
StyleBox[\"D\", \"TI\"], \*SubscriptBox[
StyleBox[\"c\", \"TI\"], \"0\"], \*
StyleBox[\"T\", \"TI\"], \[CapitalDelta] \*
StyleBox[\"t\", \"TI\"], \*SubscriptBox[
StyleBox[\"T\", \"TI\"], \"new\"], \*SubscriptBox[
StyleBox[\"T\", \"TI\"], \"min\"], \*SubscriptBox[
StyleBox[\"R\", \"TI\"], \"save\"]\)\(]\)\),
TraditionalForm]\) simulates Brownian motion of particles in an open sphere. Particles are simulated until they leave the sphere. Periodically, new particles appear at the inner boundary of the sphere to maintain a constant concentration within the sphere.  
\!\(\*FormBox[SubscriptBox[
StyleBox[\"i\", \"TI\"], 
StyleBox[\"s\", \"TI\"]],
TraditionalForm]\):   The species index \!\(\*FormBox[SubscriptBox[
StyleBox[\"i\", \"TI\"], 
StyleBox[\"s\", \"TI\"]],
TraditionalForm]\) defines the species that will be simulated. \!\(\*FormBox[SubscriptBox[
StyleBox[\"i\", \"TI\"], 
StyleBox[\"s\", \"TI\"]],
TraditionalForm]\) can run from \!\(\*FormBox[\(\(1 ... \) \*
StyleBox[\"N\", \"TI\"]\),
TraditionalForm]\), if FTSSetNumberOfSpecies[\!\(\*FormBox[
StyleBox[\"N\", \"TI\"],
TraditionalForm]\)] was executed before. 
\!\(\*FormBox[
StyleBox[\"R\", \"TI\"],
TraditionalForm]\):   Radius of the simulation sphere in micrometers. 
\!\(\*FormBox[
StyleBox[\"D\", \"TI\"],
TraditionalForm]\):   Diffusion coefficient in \!\(\*FormBox[\(\[Mu] \*SuperscriptBox[\(m\), \(2\)]/\[Mu]  s\),
TraditionalForm]\). 
\!\(\*FormBox[SubscriptBox[
StyleBox[\"c\", \"TI\"], \"0\"],
TraditionalForm]\):   Number concentration of particles in \!\(\*FormBox[\(1/\[Mu] \*SuperscriptBox[\(m\), \(3\)]\),
TraditionalForm]\). 
\!\(\*FormBox[
StyleBox[\"T\", \"TI\"],
TraditionalForm]\):   Total length of the simulation in units of \!\(\*FormBox[\(\[CapitalDelta] \*
StyleBox[\"t\", \"TI\"]\),
TraditionalForm]\). \!\(\*FormBox[
StyleBox[\"T\", \"TI\"],
TraditionalForm]\) is an integer and defines the total number of simulations steps. 
\!\(\*FormBox[\(\[CapitalDelta] \*
StyleBox[\"t\", \"TI\"]\),
TraditionalForm]\):   Simulation step size in microseconds. 
\!\(\*FormBox[SubscriptBox[
StyleBox[\"T\", \"TI\"], \"new\"],
TraditionalForm]\):   Period of time steps after which new particles appear randomly inside the sphere. \!\(\*FormBox[SubscriptBox[
StyleBox[\"T\", \"TI\"], 
StyleBox[
RowBox[{\"n\", \"e\", \"w\"}], \"TI\"]],
TraditionalForm]\) in units of \!\(\*FormBox[\(\[CapitalDelta] \*
StyleBox[\"t\", \"TI\"]\),
TraditionalForm]\) is an integer. 
\!\(\*FormBox[SubscriptBox[
StyleBox[\"T\", \"TI\"], \"min\"],
TraditionalForm]\):   Only particle trajectories longer than \!\(\*FormBox[SubscriptBox[
StyleBox[\"T\", \"TI\"], \"min\"],
TraditionalForm]\) are saved to memory. \!\(\*FormBox[SubscriptBox[
StyleBox[\"T\", \"TI\"], \"min\"],
TraditionalForm]\) in units of \!\(\*FormBox[\(\[CapitalDelta] \*
StyleBox[\"t\", \"TI\"]\),
TraditionalForm]\) is an integer. 
\!\(\*FormBox[SubscriptBox[
StyleBox[\"R\", \"TI\"], \"save\"],
TraditionalForm]\):   Only those particle trajectories are saved to memory that go below \!\(\*FormBox[SubscriptBox[
StyleBox[\"R\", \"TI\"], 
StyleBox[
RowBox[{\"s\", \"a\", \"v\", \"e\"}], \"TI\"]],
TraditionalForm]\) for at least one simulation step. Of those trajectories, only the segments for which \!\(\*FormBox[\(\*
StyleBox[\"r\", \"TI\"] \((\*
StyleBox[\"t\", \"TI\"])\) < \*SubscriptBox[
StyleBox[\"R\", \"TI\"], \"save\"]\),
TraditionalForm]\) and the durations of the gaps between such segments are saved. 
FTSSimulateParticleDiffusion has the options \!\(\*
StyleBox[\"Method\", \"TB\"]\)\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)\"1D\" (default) or \!\(\*
StyleBox[\"Method\", \"TB\"]\)\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)\"2D\". Correspondingly only the radial distances to the origin (\"1D\") or the distances to the z\[Hyphen]axis and the z coordinates (\"2D\") are simulated and saved to memory.  ";


FTSSimulateParticleDiffusionInClosedSphere  ::usage="\!\(\*
StyleBox[\"FTSSimulateParticleDiffusionInClosedSphere\", \"TB\"]\)\!\(\*FormBox[\(\([\)\(\*SubscriptBox[
StyleBox[\"i\", \"TI\"], 
StyleBox[\"s\", \"TI\"]], \*
StyleBox[\"R\", \"TI\"], \*
StyleBox[\"D\", \"TI\"], \*SubscriptBox[
StyleBox[\"n\", \"TI\"], \"0\"], \*
StyleBox[\"T\", \"TI\"], \[CapitalDelta] \*
StyleBox[\"t\", \"TI\"], \)\),
TraditionalForm]\) \!\(\*FormBox[\(\*SubscriptBox[
StyleBox[\"R\", \"TI\"], \"save\"]\(,\)\),
TraditionalForm]\) \!\(\*FormBox[\(\*SubscriptBox[
StyleBox[\"p\", \"TI\"], \"absorb\"]\(]\)\),
TraditionalForm]\) simulates Brownian motion of particles in a closed sphere.  
\!\(\*FormBox[SubscriptBox[
StyleBox[\"i\", \"TI\"], 
StyleBox[\"s\", \"TI\"]],
TraditionalForm]\):   The species index \!\(\*FormBox[SubscriptBox[
StyleBox[\"i\", \"TI\"], 
StyleBox[\"s\", \"TI\"]],
TraditionalForm]\) defines the species that will be simulated. \!\(\*FormBox[SubscriptBox[
StyleBox[\"i\", \"TI\"], 
StyleBox[\"s\", \"TI\"]],
TraditionalForm]\) can run from \!\(\*FormBox[\(\(1 ... \) \*SubscriptBox[
StyleBox[\"N\", \"TI\"], 
StyleBox[\"s\", \"TI\"]]\),
TraditionalForm]\), if FTSSetNumberOfSpecies[\!\(\*FormBox[
StyleBox[\"N\", \"TI\"],
TraditionalForm]\)] was executed before. 
\!\(\*FormBox[
StyleBox[\"R\", \"TI\"],
TraditionalForm]\):   Radius of the simulation sphere in micrometers. 
\!\(\*FormBox[
StyleBox[\"D\", \"TI\"],
TraditionalForm]\):   Diffusion coefficient in \!\(\*FormBox[\(\[Mu] \*SuperscriptBox[\(m\), \(2\)]/\[Mu]  s\),
TraditionalForm]\) 
\!\(\*FormBox[SubscriptBox[
StyleBox[\"n\", \"TI\"], \"0\"],
TraditionalForm]\):   Initial number of particles in the sphere. 
\!\(\*FormBox[
StyleBox[\"T\", \"TI\"],
TraditionalForm]\):   Total length of the simulation in units of \!\(\*FormBox[\(\[CapitalDelta] \*
StyleBox[\"t\", \"TI\"]\),
TraditionalForm]\). \!\(\*FormBox[
StyleBox[\"T\", \"TI\"],
TraditionalForm]\) is an integer and defines the total number of simulations steps. 
\!\(\*FormBox[\(\[CapitalDelta] \*
StyleBox[\"t\", \"TI\"]\),
TraditionalForm]\):   Simulation step size in microseconds. 
\!\(\*FormBox[SubscriptBox[
StyleBox[\"R\", \"TI\"], \"save\"],
TraditionalForm]\):   Only parts with \!\(\*FormBox[\(\*
StyleBox[\"r\", \"TI\"] \((\*
StyleBox[\"t\", \"TI\"])\) < \*SubscriptBox[
StyleBox[\"R\", \"TI\"], \"save\"]\),
TraditionalForm]\) and the lengths of the gaps between such parts are saved. 
\!\(\*FormBox[SubscriptBox[
StyleBox[\"p\", \"TI\"], \"stick\"],
TraditionalForm]\) The probability (\!\(\*FormBox[\(\(0 ... \) 1\),
TraditionalForm]\)) that a particle that hits the boundary is absorbed. If it is not absorbed, it is reflected. ";


FTSSimulateParticleDiffusionInClosedCylinder  ::usage="\!\(\*
StyleBox[\"FTSSimulateParticleDiffusionInClosedCylinder\", \"TB\"]\)\!\(\*FormBox[\(\([\)\(\*SubscriptBox[
StyleBox[\"i\", \"TI\"], 
StyleBox[\"s\", \"TI\"]], \*
StyleBox[\"R\", \"TI\"], \*SubscriptBox[
StyleBox[\"l\", \"TI\"], 
RowBox[{\"1\", \"/\", \"2\"}]], \*
StyleBox[\"D\", \"TI\"], \*SubscriptBox[
StyleBox[\"n\", \"TI\"], \"0\"], \*
StyleBox[\"T\", \"TI\"], \)\),
TraditionalForm]\) \!\(\*FormBox[\(\[CapitalDelta] \*
StyleBox[\"t\", \"TI\"], \*SubscriptBox[
StyleBox[\"R\", \"TI\"], \"save\"], \*SubscriptBox[
StyleBox[\"p\", \"TI\"], \"stick\"]]\),
TraditionalForm]\) simulates Brownian motion of particles in a closed cylinder.  
\!\(\*FormBox[SubscriptBox[
StyleBox[\"i\", \"TI\"], 
StyleBox[\"s\", \"TI\"]],
TraditionalForm]\):   The species index \!\(\*FormBox[SubscriptBox[
StyleBox[\"i\", \"TI\"], 
StyleBox[\"s\", \"TI\"]],
TraditionalForm]\) defines the species that will be simulated. \!\(\*FormBox[SubscriptBox[
StyleBox[\"i\", \"TI\"], 
StyleBox[\"s\", \"TI\"]],
TraditionalForm]\) can run from \!\(\*FormBox[\(\(1 ... \) \*SubscriptBox[
StyleBox[\"N\", \"TI\"], 
StyleBox[\"s\", \"TI\"]]\),
TraditionalForm]\), if FTSSetNumberOfSpecies[\!\(\*FormBox[
StyleBox[\"N\", \"TI\"],
TraditionalForm]\)] was executed before. 
\!\(\*FormBox[
StyleBox[\"R\", \"TI\"],
TraditionalForm]\):   Radius of the simulation cylinder in micrometers. 
\!\(\*FormBox[SubscriptBox[
StyleBox[\"l\", \"TI\"], 
RowBox[{\"1\", \"/\", \"2\"}]],
TraditionalForm]\):   Half\[Hyphen]length of the simulation cylinder in micrometers. 
\!\(\*FormBox[
StyleBox[\"D\", \"TI\"],
TraditionalForm]\):   Diffusion coefficient in \!\(\*FormBox[\(\[Mu] \*SuperscriptBox[\(m\), \(2\)]/\[Mu]  s\),
TraditionalForm]\) 
\!\(\*FormBox[SubscriptBox[
StyleBox[\"n\", \"TI\"], \"0\"],
TraditionalForm]\):   Initial number of particles in the cylinder. 
\!\(\*FormBox[
StyleBox[\"T\", \"TI\"],
TraditionalForm]\):   Total length of the simulation in units of \!\(\*FormBox[\(\[CapitalDelta] \*
StyleBox[\"t\", \"TI\"]\),
TraditionalForm]\). \!\(\*FormBox[
StyleBox[\"T\", \"TI\"],
TraditionalForm]\) is an integer and defines the total number of simulations steps. 
\!\(\*FormBox[\(\[CapitalDelta] \*
StyleBox[\"t\", \"TI\"]\),
TraditionalForm]\):   Simulation step size in microseconds. 
\!\(\*FormBox[SubscriptBox[
StyleBox[\"R\", \"TI\"], \"save\"],
TraditionalForm]\):   Only segments with \!\(\*FormBox[\(\*
StyleBox[\"r\", \"TI\"] \((\*
StyleBox[\"t\", \"TI\"])\) < \*SubscriptBox[
StyleBox[\"R\", \"TI\"], \"save\"]\),
TraditionalForm]\) and the durations of the gaps between such segments are saved. 
\!\(\*FormBox[SubscriptBox[
StyleBox[\"p\", \"TI\"], \"stick\"],
TraditionalForm]\):   The probability (\!\(\*FormBox[\(\(0 ... \) 1\),
TraditionalForm]\)) that a particle that hits the boundary is absorbed. If it is not absorbed, it is reflected. ";


FTSSimulateStateTrajectories  ::usage="\!\(\*
StyleBox[\"FTSSimulateStateTrajectories\", \"TB\"]\)\!\(\*FormBox[\(\([\)\({\*SubscriptBox[
StyleBox[\"i\", \"TI\"], 
StyleBox[\"s\", \"TI\"]], \*
StyleBox[\"B\",\nFontSlant->\"Bold\"], \*SubscriptBox[
StyleBox[\"p\",\nFontSlant->\"Bold\"], \"0\"], \*SubscriptBox[
StyleBox[\"K\",\nFontSlant->\"Bold\"], \"0\"]}\)\(]\)\),
TraditionalForm]\) or 
\!\(\*
StyleBox[\"FTSSimulateStateTrajectories\", \"TB\"]\)\!\(\*FormBox[\(\([\)\({\*SubscriptBox[
StyleBox[\"i\", \"TI\"], 
StyleBox[\"s\", \"TI\"]], \*
StyleBox[\"B\",\nFontSlant->\"Bold\"], \*SubscriptBox[
StyleBox[\"p\",\nFontSlant->\"Bold\"], \"0\"], \*
StyleBox[
RowBox[{\"K_\", \"0\"}],\nFontSlant->\"Bold\"], \*SubscriptBox[
StyleBox[\"K\",\nFontSlant->\"Bold\"], \"1\"]}, \*SubscriptBox[
StyleBox[\"w\", \"TI\"], \"0\"], \*SubscriptBox[
StyleBox[\"z\", \"TI\"], \"0\"], \*SubscriptBox[
StyleBox[\"r\", \"TI\"], \"max\"]\)\(]\)\),
TraditionalForm]\) defines mean photon detection rates of internal states and simulates internal\[Hyphen]state dynamics for all particles of species \!\(\*FormBox[SubscriptBox[
StyleBox[\"i\", \"TI\"], 
StyleBox[\"s\", \"TI\"]],
TraditionalForm]\). The kinetics are given by the rate equation \!\(\*FormBox[\(\*FractionBox[
StyleBox[\"d\", \"TI\"], 
StyleBox[
RowBox[{\"d\", \"t\"}], \"TI\"]] \*
StyleBox[\"p\",\nFontSlant->\"Bold\"] \[LongEqual] \*
StyleBox[\"K\",\nFontSlant->\"Bold\"] \*
StyleBox[\"p\",\nFontSlant->\"Bold\"]\),
TraditionalForm]\), where the (\!\(\*FormBox[\(\*SubscriptBox[
StyleBox[\"N\", \"TI\"], 
StyleBox[
RowBox[{\"s\", \"t\"}], \"TI\"]]\[Cross]\*SubscriptBox[
StyleBox[\"N\", \"TI\"], 
StyleBox[
RowBox[{\"s\", \"t\"}], \"TI\"]]\),
TraditionalForm]\)) rate matrix \!\(\*FormBox[
StyleBox[\"K\",\nFontSlant->\"Bold\"],
TraditionalForm]\) is given by \!\(\*FormBox[\(\*
StyleBox[\"K\",\nFontSlant->\"Bold\"] \[LongEqual] \*SubscriptBox[
StyleBox[\"K\",\nFontSlant->\"Bold\"], \"0\"]\),
TraditionalForm]\) or \!\(\*FormBox[\(\*
StyleBox[\"K\",\nFontSlant->\"Bold\"] \[LongEqual] \*SubscriptBox[
StyleBox[\"K\",\nFontSlant->\"Bold\"], \"0\"] + \*
StyleBox[\"I\", \"TI\"] \((\*
StyleBox[\"r\",\nFontSlant->\"Bold\"])\) \*SubscriptBox[
StyleBox[\"K\",\nFontSlant->\"Bold\"], \"1\"]\),
TraditionalForm]\). The vector \!\(\*FormBox[
StyleBox[\"p\",\nFontSlant->\"Bold\"],
TraditionalForm]\) describes the population of states \!\(\*FormBox[\(\(1 ... \) \*SubscriptBox[
StyleBox[\"N\", \"TI\"], 
StyleBox[
RowBox[{\"s\", \"t\"}], \"TI\"]]\),
TraditionalForm]\) as a function of time.  
\!\(\*FormBox[SubscriptBox[
StyleBox[\"i\", \"TI\"], 
StyleBox[\"s\", \"TI\"]],
TraditionalForm]\):   species index 
\!\(\*FormBox[
StyleBox[\"B\",\nFontSlant->\"Bold\"],
TraditionalForm]\):   This \!\(\*FormBox[\(\*SubscriptBox[
StyleBox[\"N\", \"TI\"], 
StyleBox[
RowBox[{\"s\", \"t\"}], \"TI\"]]\[Cross]\*SubscriptBox[
StyleBox[\"N\", \"TI\"], 
StyleBox[\"d\", \"TI\"]]\),
TraditionalForm]\) matrix defines the mean photon detection rates for a particle that is located at the origin. \!\(\*FormBox[SubscriptBox[
StyleBox[\"N\", \"TI\"], 
StyleBox[
RowBox[{\"s\", \"t\"}], \"TI\"]],
TraditionalForm]\) is the number of states and \!\(\*FormBox[SubscriptBox[
StyleBox[\"N\", \"TI\"], 
StyleBox[\"D\", \"TI\"]],
TraditionalForm]\) the number of detection routes. The matrix element \!\(\*FormBox[SubscriptBox[
StyleBox[\"b\", \"TI\"], 
StyleBox[
RowBox[{\"s\", \"d\"}], \"TI\"]],
TraditionalForm]\) defines the mean photon detection rate on detector \!\(\*FormBox[
StyleBox[\"d\", \"TI\"],
TraditionalForm]\) of a particle in state \!\(\*FormBox[
StyleBox[\"s\", \"TI\"],
TraditionalForm]\). 
\!\(\*FormBox[SubscriptBox[
StyleBox[\"p\",\nFontSlant->\"Bold\"], \"0\"],
TraditionalForm]\):   vector of length \!\(\*FormBox[SubscriptBox[
StyleBox[\"N\", \"TI\"], 
StyleBox[
RowBox[{\"s\", \"t\"}], \"TI\"]],
TraditionalForm]\) containing the initial relative probabilities of a particle to be in state \!\(\*FormBox[\(\(1 ... \) \*SubscriptBox[
StyleBox[\"N\", \"TI\"], 
StyleBox[
RowBox[{\"s\", \"t\"}], \"TI\"]]\),
TraditionalForm]\) at the start of the trajectory. 
\!\(\*FormBox[SubscriptBox[
StyleBox[\"K\",\nFontSlant->\"Bold\"], \"0\"],
TraditionalForm]\):   The part of the rate matrix that is independent of the particle position. 
\!\(\*FormBox[SubscriptBox[
StyleBox[\"K\",\nFontSlant->\"Bold\"], \"1\"],
TraditionalForm]\):   The second version of the command allows position\[Hyphen]dependent processes such as photobleaching to be modeled. The total rate matrix is then given by \!\(\*FormBox[\(\*
StyleBox[\"K\",\nFontSlant->\"Bold\"] \[LongEqual] \*SubscriptBox[
StyleBox[\"K\",\nFontSlant->\"Bold\"], \"0\"] + \*
StyleBox[\"I\", \"TI\"] \((\*
StyleBox[\"r\",\nFontSlant->\"Bold\"])\) \*SubscriptBox[
StyleBox[\"K\",\nFontSlant->\"Bold\"], \"1\"]\),
TraditionalForm]\), where \!\(\*FormBox[\(\*
StyleBox[\"I\", \"TI\"](\*
StyleBox[\"r\",\nFontSlant->\"Bold\"])\),
TraditionalForm]\) is the excitation intensity distribution of the confocal volume. Depending on the format of the trajectories, \!\(\*FormBox[\(\*
StyleBox[\"I\", \"TI\"](\*
StyleBox[\"r\",\nFontSlant->\"Bold\"])\),
TraditionalForm]\) is calculated in cylindrical coordinates according to \!\(\*FormBox[\(\*
StyleBox[\"I\", \"TI\"] \((\[Rho], \*
StyleBox[\"z\", \"TI\"])\) \[LongEqual] exp \((\(-\*FractionBox[
RowBox[{\"2\", SuperscriptBox[\"\[Rho]\", \"2\"]}], SubsuperscriptBox[
StyleBox[\"w\", \"TI\"], \"0\", \"2\"]] - \*FractionBox[
RowBox[{\"2\", SuperscriptBox[
StyleBox[\"z\", \"TI\"], \"2\"]}], SubsuperscriptBox[
StyleBox[\"z\", \"TI\"], \"0\", \"2\"]]\))\)\),
TraditionalForm]\) or in spherical coordinates according to \!\(\*FormBox[\(\*
StyleBox[\"I\", \"TI\"] \((\*
StyleBox[\"r\", \"TI\"])\) \[LongEqual] exp \((\(-\*FractionBox[
RowBox[{\"2\", SuperscriptBox[
StyleBox[\"r\", \"TI\"], \"2\"]}], SubsuperscriptBox[
StyleBox[\"w\", \"TI\"], \"0\", \"2\"]]\))\)\),
TraditionalForm]\). 
\!\(\*FormBox[SubscriptBox[
StyleBox[\"w\", \"TI\"], \"0\"],
TraditionalForm]\):   Lateral dimension (semi\[Hyphen]minor axis) of the confocal volume in micrometers. 
\!\(\*FormBox[SubscriptBox[
StyleBox[\"z\", \"TI\"], \"0\"],
TraditionalForm]\):   Axial dimension (semi\[Hyphen]major axis) of the confocal volume in micrometers. 
\!\(\*FormBox[SubscriptBox[
StyleBox[\"r\", \"TI\"], \"max\"],
TraditionalForm]\):   For distances to the origin with \!\(\*FormBox[\(\(|\)
StyleBox[\"r\",\nFontSlant->\"Bold\"]\(|\)\(>\)\*SubscriptBox[
StyleBox[\"r\", \"TI\"], \"max\"]\),
TraditionalForm]\), the excitation intensity is set to zero, \!\(\*FormBox[\(\*
StyleBox[\"I\", \"TI\"] \((\*
StyleBox[\"r\",\nFontSlant->\"Bold\"])\) \[LongEqual] 0\),
TraditionalForm]\). 
\!\(\*
StyleBox[\"FTSSimulateStateTrajectories\", \"TB\"]\)\!\(\*FormBox[\(\([\)\({\*SubscriptBox[
StyleBox[\"i\", \"TI\"], 
StyleBox[\"s\", \"TI\"]], \*
StyleBox[\"B\",\nFontSlant->\"Bold\"], \*SubscriptBox[
StyleBox[\"p\",\nFontSlant->\"Bold\"], \"0\"]}\)\(]\)\),
TraditionalForm]\) is equivalent to calling FTSSimulateStateTrajectories\!\(\*FormBox[\(\([\)\({\*SubscriptBox[
StyleBox[\"i\", \"TI\"], 
StyleBox[\"s\", \"TI\"]], \*
StyleBox[\"B\",\nFontSlant->\"Bold\"], \*SubscriptBox[
StyleBox[\"p\",\nFontSlant->\"Bold\"], \"0\"], \*SubscriptBox[
StyleBox[\"K\",\nFontSlant->\"Bold\"], \"0\"]}\)\(]\)\),
TraditionalForm]\) with \!\(\*FormBox[SubscriptBox[
StyleBox[\"K\",\nFontSlant->\"Bold\"], \"0\"],
TraditionalForm]\) set to the zero matrix of suitable dimension. Calling \!\(\*
StyleBox[\"FTSSimulateStateTrajectories\", \"TB\"]\)\!\(\*FormBox[\(\([\)\({\*SubscriptBox[
StyleBox[\"i\", \"TI\"], 
StyleBox[\"s\", \"TI\"]], \*
StyleBox[\"B\",\nFontSlant->\"Bold\"]}\)\(]\)\),
TraditionalForm]\) is equivalent to FTSSimulateStateTrajectories\!\(\*FormBox[\(\([\)\({\*SubscriptBox[
StyleBox[\"i\", \"TI\"], 
StyleBox[\"s\", \"TI\"]], \*
StyleBox[\"B\",\nFontSlant->\"Bold\"], {1, 1,  .. }}\)\(]\)\),
TraditionalForm]\) .  ";


FTSSimulateFRETStateTrajectories  ::usage="\!\(\*
StyleBox[\"FTSSimulateFRETStateTrajectories\", \"TB\"]\)\!\(\*FormBox[\(\([\)\({\*SubscriptBox[
StyleBox[\"i\", \"TI\"], 
StyleBox[\"s\", \"TI\"]], fretmodel, \*SubscriptBox[
StyleBox[\"p\",\nFontSlant->\"Bold\"], \"0\"], \*SubscriptBox[
StyleBox[\"K\",\nFontSlant->\"Bold\"], \"0\"], \*
StyleBox[\"rcm\", \"TB\"], \[Alpha]}\)\(]\)\),
TraditionalForm]\) or 
\!\(\*
StyleBox[\"FTSSimulateFRETStateTrajectories\", \"TB\"]\)\!\(\*FormBox[\(\([\)\({\*SubscriptBox[
StyleBox[\"i\", \"TI\"], 
StyleBox[\"s\", \"TI\"]], fretmodel, \*SubscriptBox[
StyleBox[\"p\",\nFontSlant->\"Bold\"], \"0\"], \*
StyleBox[
RowBox[{\"K_\", \"0\"}],\nFontSlant->\"Bold\"], \*SubscriptBox[
StyleBox[\"K\",\nFontSlant->\"Bold\"], \"1\"]\)\),
TraditionalForm]\), \!\(\*FormBox[\(\*
StyleBox[\"rcm\", \"TB\"], \[Alpha]}, \*SubscriptBox[
StyleBox[\"w\", \"TI\"], \"0\"], \*SubscriptBox[
StyleBox[\"z\", \"TI\"], \"0\"], \*SubscriptBox[
StyleBox[\"r\", \"TI\"], \"max\"]]\),
TraditionalForm]\) 
defines photon statistics of internal states and simulates internal\[Hyphen]state dynamics for all particles of species \!\(\*FormBox[SubscriptBox[
StyleBox[\"i\", \"TI\"], 
StyleBox[\"s\", \"TI\"]],
TraditionalForm]\). The kinetics are given by the rate equation \!\(\*FormBox[\(\*FractionBox[
StyleBox[\"d\", \"TI\"], 
StyleBox[
RowBox[{\"d\", \"t\"}], \"TI\"]] \*
StyleBox[\"p\",\nFontSlant->\"Bold\"] \[LongEqual] \*
StyleBox[\"K\",\nFontSlant->\"Bold\"] \*
StyleBox[\"p\",\nFontSlant->\"Bold\"]\),
TraditionalForm]\), where the (\!\(\*FormBox[\(\*SubscriptBox[
StyleBox[\"N\", \"TI\"], 
StyleBox[
RowBox[{\"s\", \"t\"}], \"TI\"]]\[Cross]\*SubscriptBox[
StyleBox[\"N\", \"TI\"], 
StyleBox[
RowBox[{\"s\", \"t\"}], \"TI\"]]\),
TraditionalForm]\)) rate matrix \!\(\*FormBox[
StyleBox[\"K\",\nFontSlant->\"Bold\"],
TraditionalForm]\) is given by \!\(\*FormBox[\(\*
StyleBox[\"K\",\nFontSlant->\"Bold\"] \[LongEqual] \*SubscriptBox[
StyleBox[\"K\",\nFontSlant->\"Bold\"], \"0\"]\),
TraditionalForm]\) or \!\(\*FormBox[\(\*
StyleBox[\"K\",\nFontSlant->\"Bold\"] \[LongEqual] \*SubscriptBox[
StyleBox[\"K\",\nFontSlant->\"Bold\"], \"0\"] + \*
StyleBox[\"I\", \"TI\"] \((\*
StyleBox[\"r\",\nFontSlant->\"Bold\"])\) \*SubscriptBox[
StyleBox[\"K\",\nFontSlant->\"Bold\"], \"1\"]\),
TraditionalForm]\). The vector \!\(\*FormBox[
StyleBox[\"p\",\nFontSlant->\"Bold\"],
TraditionalForm]\) describes the population of states \!\(\*FormBox[\(\(1 ... \) \*SubscriptBox[
StyleBox[\"N\", \"TI\"], 
StyleBox[
RowBox[{\"s\", \"t\"}], \"TI\"]]\),
TraditionalForm]\) as a function of time.  
\!\(\*FormBox[SubscriptBox[
StyleBox[\"i\", \"TI\"], 
StyleBox[\"s\", \"TI\"]],
TraditionalForm]\):   species index 
\!\(\*FormBox[\(fretmodel\),
TraditionalForm]\):   is of the form \!\(\*FormBox[\({{\*SubscriptBox[
StyleBox[\"n\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"e\", \"TI\"], \"1\"], \*SubscriptBox[\(\[Nu]\), \(1\)]},  ... , {\*SubscriptBox[
StyleBox[\"n\", \"TI\"], SubscriptBox[
StyleBox[\"N\", \"TI\"], 
StyleBox[
RowBox[{\"s\", \"t\"}], \"TI\"]]], \*SubscriptBox[
StyleBox[\"e\", \"TI\"], SubscriptBox[
StyleBox[\"N\", \"TI\"], 
StyleBox[
RowBox[{\"s\", \"t\"}], \"TI\"]]], \*SubscriptBox[\"\[Nu]\", SubscriptBox[
StyleBox[\"N\", \"TI\"], 
StyleBox[
RowBox[{\"s\", \"t\"}], \"TI\"]]]}}\),
TraditionalForm]\). 
\!\(\*FormBox[SubscriptBox[
StyleBox[\"p\",\nFontSlant->\"Bold\"], \"0\"],
TraditionalForm]\):   vector of length \!\(\*FormBox[SubscriptBox[
StyleBox[\"N\", \"TI\"], 
StyleBox[
RowBox[{\"s\", \"t\"}], \"TI\"]],
TraditionalForm]\) containing the initial relative probabilities of a particle to be in state \!\(\*FormBox[\(\(1 ... \) \*SubscriptBox[
StyleBox[\"N\", \"TI\"], 
StyleBox[
RowBox[{\"s\", \"t\"}], \"TI\"]]\),
TraditionalForm]\) at the start of the trajectory. 
\!\(\*FormBox[SubscriptBox[
StyleBox[\"K\",\nFontSlant->\"Bold\"], \"0\"],
TraditionalForm]\):   The part of the rate matrix that is independent of the particle position. 
\!\(\*FormBox[SubscriptBox[
StyleBox[\"K\",\nFontSlant->\"Bold\"], \"1\"],
TraditionalForm]\):   The second version of the command allows position\[Hyphen]dependent processes such as photobleaching to be modeled. The total rate matrix is then given by \!\(\*FormBox[\(\*
StyleBox[\"K\",\nFontSlant->\"Bold\"] \[LongEqual] \*SubscriptBox[
StyleBox[\"K\",\nFontSlant->\"Bold\"], \"0\"] + \*
StyleBox[\"I\", \"TI\"] \((\*
StyleBox[\"r\",\nFontSlant->\"Bold\"])\) \*SubscriptBox[
StyleBox[\"K\",\nFontSlant->\"Bold\"], \"1\"]\),
TraditionalForm]\), where \!\(\*FormBox[\(\*
StyleBox[\"I\", \"TI\"](\*
StyleBox[\"r\",\nFontSlant->\"Bold\"])\),
TraditionalForm]\) is the excitation intensity distribution of the confocal volume. Depending on the format of the trajectories, \!\(\*FormBox[\(\*
StyleBox[\"I\", \"TI\"](\*
StyleBox[\"r\",\nFontSlant->\"Bold\"])\),
TraditionalForm]\) is calculated in cylindrical coordinates according to \!\(\*FormBox[\(\*
StyleBox[\"I\", \"TI\"] \((\[Rho], \*
StyleBox[\"z\", \"TI\"])\) \[LongEqual] exp \((\(-\*FractionBox[
RowBox[{\"2\", SuperscriptBox[\"\[Rho]\", \"2\"]}], SubsuperscriptBox[
StyleBox[\"w\", \"TI\"], \"0\", \"2\"]] - \*FractionBox[
RowBox[{\"2\", SuperscriptBox[
StyleBox[\"z\", \"TI\"], \"2\"]}], SubsuperscriptBox[
StyleBox[\"z\", \"TI\"], \"0\", \"2\"]]\))\)\),
TraditionalForm]\) or in spherical coordinates according to \!\(\*FormBox[\(\*
StyleBox[\"I\", \"TI\"] \((\*
StyleBox[\"r\", \"TI\"])\) \[LongEqual] exp \((\(-\*FractionBox[
RowBox[{\"2\", SuperscriptBox[
StyleBox[\"r\", \"TI\"], \"2\"]}], SubsuperscriptBox[
StyleBox[\"w\", \"TI\"], \"0\", \"2\"]]\))\)\),
TraditionalForm]\). 
\!\(\*FormBox[
StyleBox[\"rcm\", \"TB\"],
TraditionalForm]\):   \!\(\*FormBox[\(2\[Cross]2\),
TraditionalForm]\) RCM. 
\!\(\*FormBox[SubscriptBox[
StyleBox[\"w\", \"TI\"], \"0\"],
TraditionalForm]\):   Lateral dimension (semi\[Hyphen]minor axis) of the confocal volume in micrometers. 
\!\(\*FormBox[SubscriptBox[
StyleBox[\"z\", \"TI\"], \"0\"],
TraditionalForm]\):   Axial dimension (semi\[Hyphen]major axis) of the confocal volume in micrometers. 
\!\(\*FormBox[SubscriptBox[
StyleBox[\"r\", \"TI\"], \"max\"],
TraditionalForm]\):   For distances to the origin with \!\(\*FormBox[\(\(|\)
StyleBox[\"r\",\nFontSlant->\"Bold\"]\(|\)\(>\)\*SubscriptBox[
StyleBox[\"r\", \"TI\"], \"max\"]\),
TraditionalForm]\), the excitation intensity is set to zero, \!\(\*FormBox[\(\*
StyleBox[\"I\", \"TI\"] \((\*
StyleBox[\"r\",\nFontSlant->\"Bold\"])\) \[LongEqual] 0\),
TraditionalForm]\). 
For each simulated particle trajectory \!\(\*FormBox[
StyleBox[\"j\", \"TI\"],
TraditionalForm]\) the transfer efficiencies \!\(\*FormBox[\(\*SubscriptBox[
StyleBox[\"E\", \"TI\"], 
RowBox[{
StyleBox[\"j\", \"TI\"], \",\", \"1\"}]] ...  \*SubscriptBox[
StyleBox[\"E\", \"TI\"], 
RowBox[{
StyleBox[\"j\", \"TI\"], \",\", SubscriptBox[
StyleBox[\"N\", \"TI\"], 
StyleBox[
RowBox[{\"s\", \"t\"}], \"TI\"]]}]]\),
TraditionalForm]\) of the internal states \!\(\*FormBox[\(\*
StyleBox[\"s\", \"TI\"] \[LongEqual] \(1 ... \) \*SubscriptBox[
StyleBox[\"N\", \"TI\"], 
StyleBox[
RowBox[{\"s\", \"t\"}], \"TI\"]]\),
TraditionalForm]\) are randomly chosen from the beta distributions \!\(\*FormBox[\(BetaDistribution \(\([\)\(\*SubscriptBox[
StyleBox[\"e\", \"TI\"], 
StyleBox[\"s\", \"TI\"]] \*SubscriptBox[\"\[Nu]\", 
StyleBox[\"s\", \"TI\"]], \((1 - \*SubscriptBox[
StyleBox[\"e\", \"TI\"], 
StyleBox[\"s\", \"TI\"]])\) \*SubscriptBox[\"\[Nu]\", 
StyleBox[\"s\", \"TI\"]]\)\(]\)\)\),
TraditionalForm]\). The photon detection rates on detector 1 (acceptor channel) and detector 2 (donor channel) for photons coming from particle j while being in internal state \!\(\*FormBox[
StyleBox[\"s\", \"TI\"],
TraditionalForm]\) are then given by \!\(\*FormBox[\(Inverse[rcm] . \((\*
StyleBox[\"I\", \"TI\"] \((\*
StyleBox[\"r\",\nFontSlant->\"Bold\"])\) \*SubscriptBox[
StyleBox[\"n\", \"TI\"], 
StyleBox[\"s\", \"TI\"]] {\*SubscriptBox[
StyleBox[\"E\", \"TI\"], 
RowBox[{
StyleBox[\"j\", \"TI\"], \",\", 
StyleBox[\"s\", \"TI\"]}]] + \[Alpha], 1 - \*SubscriptBox[
StyleBox[\"E\", \"TI\"], 
RowBox[{
StyleBox[\"j\", \"TI\"], \",\", 
StyleBox[\"s\", \"TI\"]}]]})\)\),
TraditionalForm]\). 
\!\(\*
StyleBox[\"FTSSimulateFRETStateTrajectories\", \"TB\"]\)\!\(\*FormBox[\(\([\)\({\*SubscriptBox[
StyleBox[\"i\", \"TI\"], 
StyleBox[\"s\", \"TI\"]], fretmodel, \*SubscriptBox[
StyleBox[\"p\",\nFontSlant->\"Bold\"], \"0\"]}\)\(]\)\),
TraditionalForm]\) is equivalent to calling FTSSimulateStateTrajectories\!\(\*FormBox[\(\([\)\({\*SubscriptBox[
StyleBox[\"i\", \"TI\"], 
StyleBox[\"s\", \"TI\"]], fretmodel, \*SubscriptBox[
StyleBox[\"p\",\nFontSlant->\"Bold\"], \"0\"], \*SubscriptBox[
StyleBox[\"K\",\nFontSlant->\"Bold\"], \"0\"]}\)\(]\)\),
TraditionalForm]\) with \!\(\*FormBox[SubscriptBox[
StyleBox[\"K\",\nFontSlant->\"Bold\"], \"0\"],
TraditionalForm]\) set to the zero matrix of suitable dimension. Calling \!\(\*
StyleBox[\"FTSSimulateFRETStateTrajectories\", \"TB\"]\)\!\(\*FormBox[\(\([\)\({\*SubscriptBox[
StyleBox[\"i\", \"TI\"], 
StyleBox[\"s\", \"TI\"]], fretmodel}\)\(]\)\),
TraditionalForm]\) is equivalent to FTSSimulateStateTrajectories\!\(\*FormBox[\(\([\)\({\*SubscriptBox[
StyleBox[\"i\", \"TI\"], 
StyleBox[\"s\", \"TI\"]], fretmodel, {1, 1,  .. }}\)\(]\)\),
TraditionalForm]\) .  ";


FTSSimulateTTTR  ::usage="\!\(\*
StyleBox[\"FTSSimulateTTTR\", \"TB\"]\)\!\(\*FormBox[\(\([\)\({\*SubscriptBox[
StyleBox[\"n\", \"TI\"], 
RowBox[{
StyleBox[\"b\", \"TI\"], 
StyleBox[\"g\", \"TI\"], \",\", \"1\"}]],  ... , \*SubscriptBox[
StyleBox[\"n\", \"TI\"], 
RowBox[{
StyleBox[\"b\", \"TI\"], 
StyleBox[\"g\", \"TI\"], \",\", SubscriptBox[
StyleBox[\"N\", \"TI\"], 
StyleBox[\"d\", \"TI\"]]}]]}, \*SubscriptBox[
StyleBox[\"r\", \"TI\"], \"max\"], \*SubscriptBox[
StyleBox[\"w\", \"TI\"], \"0\"], \*SubscriptBox[
StyleBox[\"z\", \"TI\"], \"0\"]\)\(]\)\),
TraditionalForm]\) simulates photons (TTTR records) using the previously simulated particle trajectories and state trajectories, as well as the photon detection rates of the states. Depending on the format of trajectories, the excitation intensity distribution \!\(\*FormBox[\(\*
StyleBox[\"I\", \"TI\"](\*
StyleBox[\"r\",\nFontSlant->\"Bold\"])\),
TraditionalForm]\) of the confocal volume is given in cylindrical coordinates according to \!\(\*FormBox[\(\*
StyleBox[\"I\", \"TI\"] \((\[Rho], \*
StyleBox[\"z\", \"TI\"])\) \[LongEqual] exp \((\(-\*FractionBox[
RowBox[{\"2\", SuperscriptBox[\"\[Rho]\", \"2\"]}], SubsuperscriptBox[
StyleBox[\"w\", \"TI\"], \"0\", \"2\"]] - \*FractionBox[
RowBox[{\"2\", SuperscriptBox[
StyleBox[\"z\", \"TI\"], \"2\"]}], SubsuperscriptBox[
StyleBox[\"z\", \"TI\"], \"0\", \"2\"]]\))\)\),
TraditionalForm]\) or in spherical coordinates according to \!\(\*FormBox[\(\*
StyleBox[\"I\", \"TI\"] \((\*
StyleBox[\"r\", \"TI\"])\) \[LongEqual] exp \((\(-\*FractionBox[
RowBox[{\"2\", SuperscriptBox[
StyleBox[\"r\", \"TI\"], \"2\"]}], SubsuperscriptBox[
StyleBox[\"w\", \"TI\"], \"0\", \"2\"]]\))\)\),
TraditionalForm]\).  
\!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"n\", \"TI\"], 
RowBox[{
StyleBox[\"b\", \"TI\"], 
StyleBox[\"g\", \"TI\"], \",\", \"1\"}]],  ... , \*SubscriptBox[
StyleBox[\"n\", \"TI\"], 
RowBox[{
StyleBox[\"b\", \"TI\"], 
StyleBox[\"g\", \"TI\"], \",\", SubscriptBox[
StyleBox[\"N\", \"TI\"], 
StyleBox[\"d\", \"TI\"]]}]]}\),
TraditionalForm]\):   List of mean background rates of the detection channels. 
\!\(\*FormBox[SubscriptBox[
StyleBox[\"r\", \"TI\"], \"max\"],
TraditionalForm]\):   For distances to the origin with \!\(\*FormBox[\(\(|\)
StyleBox[\"r\",\nFontSlant->\"Bold\"]\(|\)\(>\)\*SubscriptBox[
StyleBox[\"r\", \"TI\"], \"max\"]\),
TraditionalForm]\), the excitation intensity is set to zero \!\(\*FormBox[\(\*
StyleBox[\"I\", \"TI\"] \((\*
StyleBox[\"r\",\nFontSlant->\"Bold\"])\) \[LongEqual] 0\),
TraditionalForm]\). 
\!\(\*FormBox[SubscriptBox[
StyleBox[\"w\", \"TI\"], \"0\"],
TraditionalForm]\):   Lateral dimension (semi\[Hyphen]minor axis) of the confocal volume in micrometers. 
\!\(\*FormBox[SubscriptBox[
StyleBox[\"z\", \"TI\"], \"0\"],
TraditionalForm]\):   Axial dimension (semi\[Hyphen]major axis) of the confocal volume in micrometers. 
Only macro\[Hyphen]times are simulated. Micro\[Hyphen]times, i.e. lifetime channels, can be simulated for the photons using FTSSimulateTTTRLifeTimes.  ";


FTSSimulateTTTRLifeTimes  ::usage="\!\(\*
StyleBox[\"FTSSimulateTTTRLifeTimes\", \"TB\"]\)[\!\(\*FormBox[\(\*SubscriptBox[
StyleBox[\"n\", \"TI\"], \"bg\"], \*SubscriptBox[
StyleBox[\"r\", \"TI\"], \"max\"], \*SubscriptBox[
StyleBox[\"w\", \"TI\"], \"0\"], \*SubscriptBox[
StyleBox[\"z\", \"TI\"], \"0\"], \),
TraditionalForm]\) chdis, bgdis] simulates microtimes (lifetime channels) for the photons simulated beforehand with FTSSimulateTTTR.  
\!\(\*FormBox[SubscriptBox[
StyleBox[\"n\", \"TI\"], \"bg\"],
TraditionalForm]\):   List of mean background rates of the detection channels: \!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"n\", \"TI\"], 
RowBox[{\"bg\", \",\", \"1\"}]],  ... , \*SubscriptBox[
StyleBox[\"n\", \"TI\"], 
RowBox[{\"bg\", \",\", SubscriptBox[
StyleBox[\"N\", \"TI\"], 
StyleBox[\"d\", \"TI\"]]}]]}\),
TraditionalForm]\) 
\!\(\*FormBox[SubscriptBox[
StyleBox[\"r\", \"TI\"], \"max\"],
TraditionalForm]\):   For distances to the origin with \!\(\*FormBox[\(\(|\)
StyleBox[\"r\",\nFontSlant->\"Bold\"]\(|\)\(>\)\*SubscriptBox[
StyleBox[\"r\", \"TI\"], \"max\"]\),
TraditionalForm]\) the excitation intensity is set to zero \!\(\*FormBox[\(\*
StyleBox[\"I\", \"TI\"] \((\*
StyleBox[\"r\",\nFontSlant->\"Bold\"])\) \[LongEqual] 0\),
TraditionalForm]\). 
\!\(\*FormBox[SubscriptBox[
StyleBox[\"w\", \"TI\"], \"0\"],
TraditionalForm]\):   Lateral dimension (semi\[Hyphen]minor axis) of the confocal volume in micrometers. 
\!\(\*FormBox[SubscriptBox[
StyleBox[\"z\", \"TI\"], \"0\"],
TraditionalForm]\):   Axial dimension (semi\[Hyphen]major axis) of the confocal volume in micrometers. 
chdis:   Nested list, where chdis\!\(\*FormBox[\(\([\)\(\([\)\(\*SubscriptBox[
StyleBox[\"i\", \"TI\"], 
StyleBox[\"s\", \"TI\"]], \*SubscriptBox[
StyleBox[\"i\", \"TI\"], 
StyleBox[
RowBox[{\"s\", \"t\"}], \"TI\"]], \*
StyleBox[\"d\", \"TI\"]\)\(]\)\)\(]\)\),
TraditionalForm]\) is a list of numbers representing the lifetime\[Hyphen]channel distribution on detector \!\(\*FormBox[
StyleBox[\"d\", \"TI\"],
TraditionalForm]\) of fluorescence photons from a particle of species \!\(\*FormBox[SubscriptBox[
StyleBox[\"i\", \"TI\"], 
StyleBox[\"s\", \"TI\"]],
TraditionalForm]\) being in state \!\(\*FormBox[SubscriptBox[
StyleBox[\"i\", \"TI\"], 
StyleBox[
RowBox[{\"s\", \"t\"}], \"TI\"]],
TraditionalForm]\). 
bgdis:   List of length \!\(\*FormBox[SubscriptBox[
StyleBox[\"N\", \"TI\"], 
StyleBox[\"d\", \"TI\"]],
TraditionalForm]\), where bgdis\!\(\*FormBox[\(\([\)\(\([\)
StyleBox[\"d\", \"TI\"]\(]\)\)\(]\)\),
TraditionalForm]\) is a list of numbers representing the lifetime\[Hyphen]channel distribution of background photons on detector \!\(\*FormBox[
StyleBox[\"d\", \"TI\"],
TraditionalForm]\). ";


FSimulateNanoSecondFCS  ::usage="FSimulateNanoSecondFCS[p0\!\(\*FormBox[\(_\),
TraditionalForm]\)List,Kstatic\!\(\*FormBox[\(_\),
TraditionalForm]\)List,KFRET\!\(\*FormBox[\(_\),
TraditionalForm]\)List,VD\!\(\*FormBox[\(_\),
TraditionalForm]\)List,VA\!\(\*FormBox[\(_\),
TraditionalForm]\)List,kFTrajectory\!\(\*FormBox[\(_\),
TraditionalForm]\)List,substeps\!\(\*FormBox[\(_\),
TraditionalForm]\)Integer,taumax\!\(\*FormBox[\(_\),
TraditionalForm]\)Integer,dtau\!\(\*FormBox[\(_\),
TraditionalForm]\)Integer,repeats\!\(\*FormBox[\(_\),
TraditionalForm]\)Integer] FOutput\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FData, or FOutput\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FRawData";


FSimulatePhotonTrajectory  ::usage="FSimulatePhotonTrajectory[p0\!\(\*FormBox[\(_\),
TraditionalForm]\)List,Kstatic\!\(\*FormBox[\(_\),
TraditionalForm]\)List,KFRET\!\(\*FormBox[\(_\),
TraditionalForm]\)List,VD\!\(\*FormBox[\(_\),
TraditionalForm]\)LIST,VA\!\(\*FormBox[\(_\),
TraditionalForm]\)List,kFTrajectory\!\(\*FormBox[\(_\),
TraditionalForm]\)List,substeps\!\(\*FormBox[\(_\),
TraditionalForm]\)Integer] ";


FSimulatePullingInOpticalTrap  ::usage="FSimulatePullingInOpticalTrap[r0:\!\(\*FormBox[\({{_\),
TraditionalForm]\),\!\(\*FormBox[\(\(_\)\(}\)\),
TraditionalForm]\)..\!\(\*FormBox[\(}\),
TraditionalForm]\),dt\!\(\*FormBox[\(_\),
TraditionalForm]\),timesteps\!\(\*FormBox[\(_\),
TraditionalForm]\)Integer,Dm\!\(\*FormBox[\(_\),
TraditionalForm]\)Real,DB\!\(\*FormBox[\(_\),
TraditionalForm]\),x0\!\(\*FormBox[\(_\),
TraditionalForm]\),DeltaG\!\(\*FormBox[\(_\),
TraditionalForm]\),L0\!\(\*FormBox[\(_\),
TraditionalForm]\),k\!\(\*FormBox[\(_\),
TraditionalForm]\),FTrap\!\(\*FormBox[\(_\),
TraditionalForm]\)] ";


FMoveIn2DPot  ::usage="FMoveIn2DPot[\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)x0\!\(\*FormBox[\(_\),
TraditionalForm]\),y0\!\(\*FormBox[\(\(_\)\(}\)\),
TraditionalForm]\),dt\!\(\*FormBox[\(_\),
TraditionalForm]\),timesteps\!\(\*FormBox[\(_\),
TraditionalForm]\)Integer,k\!\(\*FormBox[\(_\),
TraditionalForm]\),ktrans\!\(\*FormBox[\(_\),
TraditionalForm]\),xC\!\(\*FormBox[\(_\),
TraditionalForm]\),k4\!\(\*FormBox[\(_\),
TraditionalForm]\)] ";


FLifeTimeFit  ::usage="FLifeTimeFit[histo, irf, modelfunc[\!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"p\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"p\", \"TI\"], \"2\"],  ... }\),
TraditionalForm]\)], guess, timeshift]

FLifeTimeFit fits the cyclic convolution conv\[LongEqual]modelfunc[\!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"p\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"p\", \"TI\"], \"2\"],  ... }\),
TraditionalForm]\) ]*irf to experimental data represented in histo using the instrument response function irf. 
histo and irf data are supplied in the form \!\(\*FormBox[\({{\*SubscriptBox[
StyleBox[\"t\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"y\", \"TI\"], \"1\"]}\),
TraditionalForm]\), \!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"t\", \"TI\"], \"2\"], \*SubscriptBox[
StyleBox[\"y\", \"TI\"], \"2\"]} ... }\),
TraditionalForm]\).
modelfunc[\!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"p\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"p\", \"TI\"], \"2\"],  ... }\),
TraditionalForm]\) ][t] is the fluorescence decay function, e.g., f[\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)a\!\(\*FormBox[\(_\),
TraditionalForm]\),k\!\(\*FormBox[\(_\),
TraditionalForm]\),c\!\(\*FormBox[\(\(_\)\(}\)\),
TraditionalForm]\)][t\!\(\*FormBox[\(_\),
TraditionalForm]\)]:\[LongEqual]a Exp[\[Hyphen]k t]+c .

Prior to convolution, the sequence of \!\(\*FormBox[
StyleBox[\"y\", \"TI\"],
TraditionalForm]\)\[Hyphen]values in irf is cyclically rotated to the right by the number of steps defined by the integer timeshift. 
Initial guess values for the fit parameters \!\(\*FormBox[SubscriptBox[
StyleBox[\"p\", \"TI\"], \"1\"],
TraditionalForm]\), \!\(\*FormBox[SubscriptBox[
StyleBox[\"p\", \"TI\"], \"2\"],
TraditionalForm]\), etc. are given in guess in the form guess\[LongEqual]\!\(\*FormBox[\({{\*SubscriptBox[
StyleBox[\"p\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"g\", \"TI\"], \"1\"]}\),
TraditionalForm]\), \!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"p\", \"TI\"], \"2\"], \*SubscriptBox[
StyleBox[\"g\", \"TI\"], \"2\"]} ... }\),
TraditionalForm]\), where \!\(\*FormBox[SubscriptBox[
StyleBox[\"g\", \"TI\"], 
StyleBox[\"i\", \"TI\"]],
TraditionalForm]\) are initial guess values.

Example:
FLifeTimeFit[histo, irf, f[\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)a,k,c\!\(\*FormBox[\(}\),
TraditionalForm]\)], \!\(\*FormBox[\({{\[Null]\),
TraditionalForm]\)a,1000\!\(\*FormBox[\(}\),
TraditionalForm]\),\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)k,0.25\!\(\*FormBox[\(}\),
TraditionalForm]\), \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)c,5\!\(\*FormBox[\(\(}\)\(}\)\),
TraditionalForm]\), timeshift]

FLifeTimeFit returns
\!\(\*FormBox[\({{\*SuperscriptBox[\(\[Chi]\), \(2\)]\),
TraditionalForm]\), \!\(\*FormBox[\(\({\*SubscriptBox[
StyleBox[\"p\", \"TI\"], \"1\"] \[Rule] \*SubscriptBox[
StyleBox[\"b\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"p\", \"TI\"], \"2\"] \[Rule] \*SubscriptBox[
StyleBox[\"b\", \"TI\"], \"2\"],  ... }\)\(}\)\),
TraditionalForm]\), fitcurve, residuals \!\(\*FormBox[\(}\),
TraditionalForm]\),
where \!\(\*FormBox[SubscriptBox[
StyleBox[\"b\", \"TI\"], 
StyleBox[\"i\", \"TI\"]],
TraditionalForm]\) is the best fit value for \!\(\*FormBox[SubscriptBox[
StyleBox[\"p\", \"TI\"], 
StyleBox[\"i\", \"TI\"]],
TraditionalForm]\).

For a total of \!\(\*FormBox[
StyleBox[\"N\", \"TI\"],
TraditionalForm]\) histogram bins, \!\(\*FormBox[SuperscriptBox[\(\[Chi]\), \(2\)],
TraditionalForm]\) is defined as

\!\(\*FormBox[\(\*SuperscriptBox[\(\[Chi]\), \(2\)] \[LongEqual] \*FractionBox[\"1\", 
StyleBox[\"N\", \"TI\"]] \*UnderoverscriptBox[\"\[Sum]\", 
RowBox[{
StyleBox[\"n\", \"TI\"], \"\[LongEqual]\", \"1\"}], 
StyleBox[\"N\", \"TI\"],\nLimitsPositioning->True]\*FractionBox[SuperscriptBox[
RowBox[{\"(\", 
RowBox[{\"histo\", 
RowBox[{\"[\", 
RowBox[{\"[\", 
StyleBox[\"n\", \"TI\"], \"]\"}], \"]\"}], \"-\", \"conv\", 
RowBox[{\"[\", 
RowBox[{\"[\", 
StyleBox[\"n\", \"TI\"], \"]\"}], \"]\"}]}], \")\"}], \"2\"], SuperscriptBox[\"\[Sigma]\", \"2\"]] \[LongEqual] \*FractionBox[\"1\", 
StyleBox[\"N\", \"TI\"]] \*UnderoverscriptBox[\"\[Sum]\", 
RowBox[{
StyleBox[\"n\", \"TI\"], \"\[LongEqual]\", \"1\"}], 
StyleBox[\"N\", \"TI\"],\nLimitsPositioning->True]\*FractionBox[SuperscriptBox[
RowBox[{\"(\", 
RowBox[{\"histo\", 
RowBox[{\"[\", 
RowBox[{\"[\", 
StyleBox[\"n\", \"TI\"], \"]\"}], \"]\"}], \"-\", \"conv\", 
RowBox[{\"[\", 
RowBox[{\"[\", 
StyleBox[\"n\", \"TI\"], \"]\"}], \"]\"}]}], \")\"}], \"2\"], 
RowBox[{\"conv\", 
RowBox[{\"[\", 
RowBox[{\"[\", 
StyleBox[\"n\", \"TI\"], \"]\"}], \"]\"}]}]]\),
TraditionalForm]\),

i.e., we assume Poisson\[Hyphen]distributed counts in each bin of the histogram histo.
Sets of combined histograms can be fitted globally by using:
FLifeTimeFit[ \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)histo1, histo2, ...\!\(\*FormBox[\(}\),
TraditionalForm]\), \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)irf1, irf2, ...\!\(\*FormBox[\(}\),
TraditionalForm]\), \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)modelfunc1,modelfunc2, ...\!\(\*FormBox[\(}\),
TraditionalForm]\), guess, \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)timeshift1, timshift2, ...\!\(\*FormBox[\(}\),
TraditionalForm]\)]

Options:
 FOutput\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FGraph (default value), fitcurve and residuals are represented graphically.
 FOutput\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FData, fitcurve and residuals are returned as lists.
 All options of ListLogPlot can be supplied to FLifeTimeFit. ";


FNDAcceptorLifeTimeDecay  ::usage="FNDAcceptorLifeTimeDecay[timelist:\!\(\*FormBox[\({_\),
TraditionalForm]\)Real..\!\(\*FormBox[\(}\),
TraditionalForm]\),RFret\!\(\*FormBox[\(_\),
TraditionalForm]\)Real,kD\!\(\*FormBox[\(_\),
TraditionalForm]\)Real,kA\!\(\*FormBox[\(_\),
TraditionalForm]\)Real,mean\!\(\*FormBox[\(_\),
TraditionalForm]\)Real,sigma\!\(\*FormBox[\(_\),
TraditionalForm]\)Real] ";


FNDDonorLifeTimeDecay  ::usage="FNDDonorLifeTimeDecay[timelist:\!\(\*FormBox[\({_\),
TraditionalForm]\)Real..\!\(\*FormBox[\(}\),
TraditionalForm]\),RFret\!\(\*FormBox[\(_\),
TraditionalForm]\)Real,kD\!\(\*FormBox[\(_\),
TraditionalForm]\)Real,mean\!\(\*FormBox[\(_\),
TraditionalForm]\)Real,sigma\!\(\*FormBox[\(_\),
TraditionalForm]\)Real] ";


FGCAcceptorLifeTimeDecay  ::usage="FGCAcceptorLifeTimeDecay[timelist:\!\(\*FormBox[\({_\),
TraditionalForm]\)Real..\!\(\*FormBox[\(}\),
TraditionalForm]\),RFret\!\(\*FormBox[\(_\),
TraditionalForm]\)Real,kD\!\(\*FormBox[\(_\),
TraditionalForm]\)Real,kA\!\(\*FormBox[\(_\),
TraditionalForm]\)Real,Rrms\!\(\*FormBox[\(_\),
TraditionalForm]\)Real] ";


FGCDonorLifeTimeDecay  ::usage="FGCDonorLifeTimeDecay[timelist:\!\(\*FormBox[\({_\),
TraditionalForm]\)Real..\!\(\*FormBox[\(}\),
TraditionalForm]\),RFret\!\(\*FormBox[\(_\),
TraditionalForm]\)Real,kD\!\(\*FormBox[\(_\),
TraditionalForm]\)Real,Rrms\!\(\*FormBox[\(_\),
TraditionalForm]\)Real] ";


FProximityRatio  ::usage="FProximityRatio[\!\(\*FormBox[\(\[Alpha]\),
TraditionalForm]\),\!\(\*FormBox[\(\[Beta]\),
TraditionalForm]\),\!\(\*FormBox[\(\[Gamma]\),
TraditionalForm]\)][\!\(\*FormBox[\(\[Epsilon]\),
TraditionalForm]\)] returns the proximity ratio calculated from transfer efficiency \!\(\*FormBox[\(\[Epsilon]\),
TraditionalForm]\) and the correction factors 
\!\(\*FormBox[\(\(\\\ \\\ \\\ \\\ \)\(\[Alpha]\)\),
TraditionalForm]\)\[LongEqual] acceptor direct excitation
\!\(\*FormBox[\(\(\\\ \\\ \\\ \\\ \)\(\[Beta]\)\),
TraditionalForm]\)\[LongEqual] crosstalk D\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)A
\!\(\*FormBox[\(\(\\\ \\\ \\\ \\\ \)\(\[Gamma]\)\),
TraditionalForm]\)\[LongEqual] FRET correction factor for quantum yields and detection efficiencies ";


FBetaPeak  ::usage="FBetaPeak[\!\(\*FormBox[\(\[Mu]\),
TraditionalForm]\),v][p] peak function for PDA fitting. It corresponds to PDF[BetaDistribution[a,b],p1]/.\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)a\!\(\*FormBox[\(\(\[Rule]\)\(\[Mu]\)\),
TraditionalForm]\) v,b\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)(1\[Hyphen]\!\(\*FormBox[\(\[Mu]\),
TraditionalForm]\))v\!\(\*FormBox[\(}\),
TraditionalForm]\) ";


FpdaDonly  ::usage="Option for FpdaEHisto and FpdaFitEHisto. If FpdaDonly\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)True, the first population in PDA model is assumed to represent the donor\[Hyphen]only population. In this case, acceptor direct excitation is set to zero for this peak. ";


FpdaEHisto  ::usage="FpdaEHisto[ ehisto, pF, model, \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)bgD, bgA\!\(\*FormBox[\(}\),
TraditionalForm]\) ] calculates a transfer efficiency histogram from a photon distribution analysis (PDA) model.
ehisto is a transfer efficiency histogram of the form \!\(\*FormBox[\({{\[Null]\),
TraditionalForm]\) E1, A1, dE\!\(\*FormBox[\(}\),
TraditionalForm]\),...\!\(\*FormBox[\(}\),
TraditionalForm]\), i.e., it is of the same form as a histogram returned by
FParamHisto[\"E\",erange,FOutput\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FData]
pF\[LongEqual](pF1, pF2,...\!\(\*FormBox[\(}\),
TraditionalForm]\) is a list of fluorescence photon burst size distributions of the individual subpopulations, where pFi is of the form???
model\[LongEqual]\!\(\*FormBox[\({{\*SubscriptBox[
StyleBox[\"a\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"e\", \"TI\"], \"1\"], \*SubscriptBox[\(\[Nu]\), \(1\)]}\),
TraditionalForm]\), \!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"a\", \"TI\"], \"2\"], \*SubscriptBox[
StyleBox[\"e\", \"TI\"], \"2\"], \*SubscriptBox[\(\[Nu]\), \(2\)]}\),
TraditionalForm]\), ...\!\(\*FormBox[\(}\),
TraditionalForm]\) is the PDA model of the subpopulations with
\!\(\*FormBox[SubscriptBox[
StyleBox[\"a\", \"TI\"], 
StyleBox[\"i\", \"TI\"]],
TraditionalForm]\)\[LongEqual] area of \!\(\*FormBox[
StyleBox[\"i\", \"TI\"],
TraditionalForm]\)th peak
\!\(\*FormBox[SubscriptBox[
StyleBox[\"e\", \"TI\"], 
StyleBox[\"i\", \"TI\"]],
TraditionalForm]\)\[LongEqual]mean transfer efficiency of \!\(\*FormBox[
StyleBox[\"i\", \"TI\"],
TraditionalForm]\)th peak
\!\(\*FormBox[SubscriptBox[\"\[Nu]\", 
StyleBox[\"i\", \"TI\"]],
TraditionalForm]\)\[LongEqual]shape parameter of \!\(\*FormBox[
StyleBox[\"i\", \"TI\"],
TraditionalForm]\)th peak
\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)bgD, bgA\!\(\*FormBox[\(}\),
TraditionalForm]\) are the mean background counts per photon burst of the donor and acceptor detection route, respectively.

FpdaEHisto[ ehisto, pF, model] is equivalent to
FpdaEHisto[ ehisto, pF, model, FpdaGetDABackground[] ]
FpdaEHisto[\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)e1,e2,de\!\(\*FormBox[\(}\),
TraditionalForm]\),pF, etc.] is equivalent to
FpdaEHisto[ FParamHisto[\"E\", \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)e1, e2, de\!\(\*FormBox[\(}\),
TraditionalForm]\), FOutput\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FData ], pF, etc.]

Options:
\!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)FOutput\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FGraph (default) or FOutput\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FData
\!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)FPDAMethod\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\) \"Approximate pF by pS \" (default) Use this setting if pF is not the true fluorescence distribution without background, but pS\[LongEqual]pF*pB, the measured signal distribution.
\!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)FpdaDonly\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)True (default) The first subpopulation of the PDA model is assumed to represent the donor\[Hyphen]only population (internally, the acceptor direct excitation is set to zero for this peak).
\!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)FFitCurveOptions\!\(\*FormBox[\(\(\[Rule]\)\({\[Null]\)\),
TraditionalForm]\)PlotRange\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)All, PlotStyle\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)Red, ...\!\(\*FormBox[\(}\),
TraditionalForm]\) Every option of ListLinePlot can be used to change the appearance of the PDA curve.
\!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)FSubPopCurveOptions\!\(\*FormBox[\(\(\[Rule]\)\({\[Null]\)\),
TraditionalForm]\)PlotRange\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)All, PlotStyle\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)Red, ...\!\(\*FormBox[\(}\),
TraditionalForm]\) Every option of ListLinePlot can be used to change the appearance of the subpopulation PDA curves.
\!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)FpdaShowIntrinsicDistribution\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)True The intrinsic transfer efficiency distribution is drawn in a separate panel.
\!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)FpdaIntrinsicDistributionPlotOptions\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)\!\(\*FormBox[\({\),
TraditionalForm]\)PlotStyle \!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\) Darker@Green\!\(\*FormBox[\(}\),
TraditionalForm]\) (default) plot options for the intrinsic transfer efficiency distribution.
\!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)In addition, all options of Histogram are applicable.

Warning: 
\!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)Make sure that the FRET detection routes, the RCM, and the acceptor direct excitation are set correctly in Fretica before using FpdaEHisto.
";


FpdaIntrinsicDistributionPlotOptions  ::usage="Option of FpdaEHisto and FpdaFitEHisto. ";


FpdaEHistoSubpopulations  ::usage="FpdaEHistoSubpopulations[ehisto:\!\(\*FormBox[\({{_\),
TraditionalForm]\) ?NumericQ, \!\(\*FormBox[\(_\),
TraditionalForm]\)?NumericQ, \!\(\*FormBox[\(_\),
TraditionalForm]\)?NumericQ \!\(\*FormBox[\(}\),
TraditionalForm]\)... \!\(\*FormBox[\(}\),
TraditionalForm]\), pF:\!\(\*FormBox[\({{_\),
TraditionalForm]\)?NumericQ..\!\(\*FormBox[\(}\),
TraditionalForm]\)..\!\(\*FormBox[\(}\),
TraditionalForm]\), model:\!\(\*FormBox[\({{_\),
TraditionalForm]\)?NumericQ, \!\(\*FormBox[\(_\),
TraditionalForm]\)?NumericQ, \!\(\*FormBox[\(_\),
TraditionalForm]\)?NumericQ\!\(\*FormBox[\(}\),
TraditionalForm]\)..\!\(\*FormBox[\(}\),
TraditionalForm]\), \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)bgD\!\(\*FormBox[\(_\),
TraditionalForm]\)?NumericQ, bgA\!\(\*FormBox[\(_\),
TraditionalForm]\)?NumericQ\!\(\*FormBox[\(}\),
TraditionalForm]\), opts:OptionsPattern[]] ";


FpdaFitEHisto  ::usage="FpdaFitEHisto[ ehisto, pF, model, guess, \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)bgD, bgA\!\(\*FormBox[\(}\),
TraditionalForm]\) ]
fits the photon distribution analyis (PDA) model to the transfer efficiency histogram ehisto.
ehisto is of the form \!\(\*FormBox[\({{\[Null]\),
TraditionalForm]\)E1, A1, dE\!\(\*FormBox[\(}\),
TraditionalForm]\),...\!\(\*FormBox[\(}\),
TraditionalForm]\), i.e., of the same form as a histogram returned by FParamHisto[\"E\",erange,FOutput\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FData].
pF\[LongEqual](pF1, pF2,...\!\(\*FormBox[\(}\),
TraditionalForm]\) is a list of fluorescence photon burst size distributions of the individual subpopulations, where pFi is of the form???
model\[LongEqual]\!\(\*FormBox[\({{\*SubscriptBox[
StyleBox[\"a\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"e\", \"TI\"], \"1\"], \*SubscriptBox[\(\[Nu]\), \(1\)]}\),
TraditionalForm]\), \!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"a\", \"TI\"], \"2\"], \*SubscriptBox[
StyleBox[\"e\", \"TI\"], \"2\"], \*SubscriptBox[\(\[Nu]\), \(2\)]}\),
TraditionalForm]\), ...\!\(\*FormBox[\(}\),
TraditionalForm]\) is the PDA model of the subpopulations with
\!\(\*FormBox[SubscriptBox[
StyleBox[\"a\", \"TI\"], 
StyleBox[\"i\", \"TI\"]],
TraditionalForm]\)\[LongEqual] area of \!\(\*FormBox[
StyleBox[\"i\", \"TI\"],
TraditionalForm]\)th peak
\!\(\*FormBox[SubscriptBox[
StyleBox[\"e\", \"TI\"], 
StyleBox[\"i\", \"TI\"]],
TraditionalForm]\)\[LongEqual]mean transfer efficiency of \!\(\*FormBox[
StyleBox[\"i\", \"TI\"],
TraditionalForm]\)th peak
\!\(\*FormBox[SubscriptBox[\"\[Nu]\", 
StyleBox[\"i\", \"TI\"]],
TraditionalForm]\)\[LongEqual]shape parameter of \!\(\*FormBox[
StyleBox[\"i\", \"TI\"],
TraditionalForm]\)th peak
guess\[LongEqual]\!\(\*FormBox[\({{\[Null]\),
TraditionalForm]\) paramsymbol,value\!\(\*FormBox[\(}\),
TraditionalForm]\)...\!\(\*FormBox[\(}\),
TraditionalForm]\) is a list of all fit parameters of the model, each provided with an initial guess value. 
\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)bgD, bgA\!\(\*FormBox[\(}\),
TraditionalForm]\) are the mean background counts per photon burst of the donor and acceptor detection routes, respectively.

FpdaFitEHisto[ ehisto, pF, model, guess] is equivalent to
FpdaFitEHisto[ ehisto, pF, model, guess, FpdaGetDABackground[]]
FpdaFitEHisto[\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)e1, e2, de\!\(\*FormBox[\(}\),
TraditionalForm]\), pF, etc.] is equivalent to
FpdaFitEHisto[FParamHisto[\"E\", \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)e1, e2, de\!\(\*FormBox[\(}\),
TraditionalForm]\), FOutput\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FData], pF, etc.]

Global Fit of a list of transfer efficiency histograms::
FpdaFitEHisto[\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)ehisto1, ehisto2, ...\!\(\*FormBox[\(}\),
TraditionalForm]\), pF, \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)model1, model2, ...\!\(\*FormBox[\(}\),
TraditionalForm]\) ,guess, etc.] 


Options:
\!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)FOutput\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FGraph (default) or FOutput\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FData
\!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)FPDAMethod\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\) \"Approximate pF by pS \" (default) Use this setting if pF is not the true fluorescence distribution without background, but pS\[LongEqual]pF*pB, the measured signal distribution.
\!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)FpdaDonly\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)True (default) The first subpopulation of the PDA model is assumed to represent the donor\[Hyphen]only population. (Internally, the acceptor direct excitation is set to zero for this peak. In addition, the intrinsic distribution of this peak is not shown.)
\!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)FConstraints\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)None (default) or FConstraints\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)constrains. E.g. FConstraints\!\(\*FormBox[\(\(\[Rule]\)\((\)\(\*SubscriptBox[
StyleBox[\"e\", \"TI\"], \"1\"] < \(\(0.1\)\(&&\)\) \*SubscriptBox[
StyleBox[\"e\", \"TI\"], \"3\"] > 0.8\)\()\)\),
TraditionalForm]\).
\!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)In addition, all options of FpdaEHisto and FindMinimum are applicable.

Warning: 
\!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)Make sure that the FRET detection routes, the RCM, and the acceptor direct excitation are set correctly in Fretica before using FpdaEHisto.
";


FpdaGetDABackground  ::usage="FpdaGetDABackground[\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\) bg1, bg2, ..\!\(\*FormBox[\(}\),
TraditionalForm]\)]
returns \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\) bgD, bgA\!\(\*FormBox[\(}\),
TraditionalForm]\), which are the mean total background counts per photon burst for all donor and acceptor detection routes, respectively.
\!\(\*FormBox[\(\*
StyleBox[\"b\", \"TI\"] \*SubscriptBox[
StyleBox[\"g\", \"TI\"], 
StyleBox[\"i\", \"TI\"]]\),
TraditionalForm]\) is the background rate of the \!\(\*FormBox[
StyleBox[\"i\", \"TI\"],
TraditionalForm]\)th detection route in counts per second.

FpdaGetDABackground[] is equivalent to
FpdaGetDABackground[ FGetBackground[]] ";


FpdaGetSubPopBurstSizeDistributions  ::usage="FpdaGetSubPopBurstSizeDistributions[\!\(\*FormBox[\({{\[Null]\),
TraditionalForm]\)e11,e22\!\(\*FormBox[\(}\),
TraditionalForm]\), \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)e21,e22\!\(\*FormBox[\(}\),
TraditionalForm]\)...\!\(\*FormBox[\(}\),
TraditionalForm]\),Fmax,\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)Elist,burstsizelist\!\(\*FormBox[\(}\),
TraditionalForm]\)] returns a list of burst size distributions.
\!\(\*FormBox[\(\(\\\ \\\ \\\ \\\ \)\({\[Null]\)\),
TraditionalForm]\)ei1,ei2\!\(\*FormBox[\(}\),
TraditionalForm]\) is the transfer efficiency interval of the \!\(\*FormBox[
StyleBox[\"i\", \"TI\"],
TraditionalForm]\)th photon burst size distribution.
\!\(\*FormBox[\(\\\ \\\ \\\ \\\ \),
TraditionalForm]\)Fmax: Burst size distributions are calculated up to the maximal burst size Fmax.
\!\(\*FormBox[\(\\\ \\\ \\\ \\\ \),
TraditionalForm]\)Elist: List of transfer efficiencies of all photon bursts.
\!\(\*FormBox[\(\\\ \\\ \\\ \\\ \),
TraditionalForm]\)burstsizelist: List of burst sizes of all photon bursts.

FpdaGetSubPopBurstSizeDistributions[\!\(\*FormBox[\({{\[Null]\),
TraditionalForm]\)e11,e22\!\(\*FormBox[\(}\),
TraditionalForm]\), \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)e21,e22\!\(\*FormBox[\(}\),
TraditionalForm]\)...\!\(\*FormBox[\(}\),
TraditionalForm]\),Fmax] is equivalent to FpdaGetSubPopBurstSizeDistributions[eranges,Fmax,FGetFromBurstList[\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)\"E\",\"nA\!\(\*FormBox[\(_\),
TraditionalForm]\)raw\"+\"nD\!\(\*FormBox[\(_\),
TraditionalForm]\)raw\"\!\(\*FormBox[\(}\),
TraditionalForm]\)]]  
";


FpdaIntrinsicDistribution  ::usage="FpdaIntrinsicDistribution[ \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\) \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)a1,e1,v1\!\(\*FormBox[\(}\),
TraditionalForm]\), \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)a2,e2,v2\!\(\*FormBox[\(}\),
TraditionalForm]\), ...\!\(\*FormBox[\(}\),
TraditionalForm]\) ][e] returns the intrinsic transfer efficiency distribution of the input PDA model.
\!\(\*FormBox[SubscriptBox[
StyleBox[\"a\", \"TI\"], 
StyleBox[\"i\", \"TI\"]],
TraditionalForm]\)\[LongEqual] area of \!\(\*FormBox[
StyleBox[\"i\", \"TI\"],
TraditionalForm]\)th peak
\!\(\*FormBox[SubscriptBox[
StyleBox[\"e\", \"TI\"], 
StyleBox[\"i\", \"TI\"]],
TraditionalForm]\)\[LongEqual]mean transfer efficiency of \!\(\*FormBox[
StyleBox[\"i\", \"TI\"],
TraditionalForm]\)th peak
\!\(\*FormBox[SubscriptBox[\"\[Nu]\", 
StyleBox[\"i\", \"TI\"]],
TraditionalForm]\)\[LongEqual]shape parameter of \!\(\*FormBox[
StyleBox[\"i\", \"TI\"],
TraditionalForm]\)th peak
";


FPDAMethod  ::usage="FPDAMethod is an option for PDA calculations.
Default setting FPDAMethod\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)\"Approximate pF by pS \" ";


FpdaShowIntrinsicDistribution  ::usage="FpdaShowIntrinsicDistribution is an option for FpdaEHisto and FpdaFitEHisto. ";


F1DHMMForwardBackward  ::usage="Sorry, no help available yet. ";


F1DHMMInit  ::usage="Sorry, no help available yet. ";


F1DHMMLogLikelihood  ::usage="Sorry, no help available yet. ";


F1DHMMSetPobs  ::usage="Sorry, no help available yet. ";


F1DHMMSetPinPfin  ::usage="Sorry, no help available yet. ";


F1DHMMViterbi  ::usage="Sorry, no help available yet. ";


FHMMBinPhotonByPhotonTrace  ::usage="FHMMBinPhotonByPhotonTrace[\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\) \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)dt1,c1\!\(\*FormBox[\(}\),
TraditionalForm]\), \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)dt2,c2\!\(\*FormBox[\(}\),
TraditionalForm]\) ...\!\(\*FormBox[\(}\),
TraditionalForm]\) , \!\(\*FormBox[SubscriptBox[
StyleBox[\"T\", \"TI\"], \"binning\"],
TraditionalForm]\), channelcount:2] returns
\!\(\*FormBox[\({{\*SubscriptBox[
StyleBox[\"N\", \"TI\"], \"11\"], \*SubscriptBox[
StyleBox[\"N\", \"TI\"], \"12\"],  ... , \*SubscriptBox[
StyleBox[\"N\", \"TI\"], 
RowBox[{\"1\", \"channelcount\"}]]}, {\*SubscriptBox[
StyleBox[\"N\", \"TI\"], \"21\"], \*SubscriptBox[
StyleBox[\"N\", \"TI\"], \"22\"],  ... , \*SubscriptBox[
StyleBox[\"N\", \"TI\"], 
RowBox[{\"2\", \"channelcount\"}]]},  ... }\),
TraditionalForm]\), i.e. the form needed for FHMMInitWithBinnedData. The default for channelcount is 2. ";


FHMMFirstTauZero  ::usage="FHMMFirstTauZero is an option of FHMMInitWithPhotonByPhotonDataFromBurstList. ";


FHMMForwardBackward  ::usage="FHMMForwardBackward[\!\(\*FormBox[
StyleBox[\"K\", \"TI\"],
TraditionalForm]\)] or FHMMForwardBackward[\!\(\*FormBox[
StyleBox[\"K\", \"TI\"],
TraditionalForm]\), photonrates] applies the forward\[Hyphen]backward algorithm to all previously initialized trajectories assuming the rate matrix K. A list of state\[Hyphen]probability trajectories is returned. 
In the first case (i.e. FHMMForwardBackward[\!\(\*FormBox[
StyleBox[\"K\", \"TI\"],
TraditionalForm]\)]), the photon rates that beforehand were set with FHMMSetPhotonRates are used. The second case (i.e. FHMMForwardBackward[\!\(\*FormBox[
StyleBox[\"K\", \"TI\"],
TraditionalForm]\), photonrates]) is equivalent to executing (FHMMSetPhotonRates[photonrates];FHMMForwardBackward[\!\(\*FormBox[
StyleBox[\"K\", \"TI\"],
TraditionalForm]\)]), where photonrate is either a matrix or a list of matrices.

FHMMForwardBackward has the option FHMMpinpfin. The default setting is FHMMpinpfin\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FHMMOnePeq, in which case pini\[LongEqual]peq, with K.peq\[LongEqual]0, and pfinal\[LongEqual]\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)1,1,...\!\(\*FormBox[\(}\),
TraditionalForm]\) are used in the calculations. Alternatively, pini and pfinal can be set for each photon time trace individually using FPHSetPinPfin called with the option FHMMpinpfin\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FMTraceWise. ";


FHMMGetBinnedTraceFromTTTR  ::usage="FHMMGetBinnedTraceFromTTTR[\!\(\*FormBox[SubscriptBox[
StyleBox[\"T\", \"TI\"], \"binning\"],
TraditionalForm]\), \!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"t\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"t\", \"TI\"], \"2\"]}\),
TraditionalForm]\)]
or FHMMGetBinnedTraceFromTTTR[\!\(\*FormBox[SubscriptBox[
StyleBox[\"T\", \"TI\"], \"binning\"],
TraditionalForm]\), \!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"t\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"t\", \"TI\"], \"2\"]}\),
TraditionalForm]\), \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)routes\!\(\*FormBox[SubscriptBox[\(\[Null]\), \(1\)],
TraditionalForm]\), ... ,routes\!\(\*FormBox[SubscriptBox[\"\[Null]\", 
StyleBox[\"L\", \"TI\"]],
TraditionalForm]\) \!\(\*FormBox[\(}\),
TraditionalForm]\)]
returns a binned photon time trace with bin width \!\(\*FormBox[SubscriptBox[
StyleBox[\"T\", \"TI\"], \"binning\"],
TraditionalForm]\) (in seconds) from the TTTR records in the time interval \!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"t\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"t\", \"TI\"], \"2\"]}\),
TraditionalForm]\) (in seconds) of the last opened TTTR file. routes\!\(\*FormBox[SubscriptBox[\"\[Null]\", 
StyleBox[\"i\", \"TI\"]],
TraditionalForm]\) are lists of ones and zeros, e.g. \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)1,0,1,0,0,0\!\(\*FormBox[\(}\),
TraditionalForm]\), that specify which detection routes of the TTTR recording are combined to a detection channel of the HMM. The returned trace is of the form\!\(\*FormBox[\({{\*SubscriptBox[
StyleBox[\"N\", \"TI\"], \"11\"], \*SubscriptBox[
StyleBox[\"N\", \"TI\"], \"12\"],  ... , \*SubscriptBox[
StyleBox[\"N\", \"TI\"], 
RowBox[{\"1\", 
StyleBox[\"L\", \"TI\"]}]]}, {\*SubscriptBox[
StyleBox[\"N\", \"TI\"], \"21\"], \*SubscriptBox[
StyleBox[\"N\", \"TI\"], \"22\"],  ... , \*SubscriptBox[
StyleBox[\"N\", \"TI\"], 
RowBox[{\"2\", 
StyleBox[\"L\", \"TI\"]}]]},  ... }\),
TraditionalForm]\), where \!\(\*FormBox[SubscriptBox[
StyleBox[\"N\", \"TI\"], 
RowBox[{
StyleBox[\"i\", \"TI\"], \",\", 
StyleBox[\"c\", \"TI\"]}]],
TraditionalForm]\) are the counts of the \!\(\*FormBox[
StyleBox[\"i\", \"TI\"],
TraditionalForm]\)th bin in detection channel \!\(\*FormBox[
StyleBox[\"c\", \"TI\"],
TraditionalForm]\). The trace is of the form required for FHMMInitWithBinnedData.
FHMMGetBinnedTraceFromTTTR[\!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"t\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"t\", \"TI\"], \"2\"]}\),
TraditionalForm]\)] is equivalent to
FHMMGetBinnedTraceFromTTTR[\!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"t\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"t\", \"TI\"], \"2\"]}\),
TraditionalForm]\), \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\) FGetAcceptorRoutes[], FGetDonorRoutes[] \!\(\*FormBox[\(}\),
TraditionalForm]\)]. ";


FHMMGetPhotonByPhotonTraceFromTTTR  ::usage="FHMMGetPhotonByPhotonTraceFromTTTR[\!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"t\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"t\", \"TI\"], \"2\"]}\),
TraditionalForm]\)] or
FHMMGetPhotonByPhotonTraceFromTTTR[\!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"t\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"t\", \"TI\"], \"2\"]}\),
TraditionalForm]\),\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)routes\!\(\*FormBox[SubscriptBox[\(\[Null]\), \(1\)],
TraditionalForm]\), ... ,routes\!\(\*FormBox[SubscriptBox[\"\[Null]\", 
StyleBox[\"L\", \"TI\"]],
TraditionalForm]\) \!\(\*FormBox[\(}\),
TraditionalForm]\)]
returns a photon\[Hyphen]by\[Hyphen]photon time trace from the TTTR records in the time interval \!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"t\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"t\", \"TI\"], \"2\"]}\),
TraditionalForm]\) (in seconds) of the last opened TTTR file. routes\!\(\*FormBox[SubscriptBox[\"\[Null]\", 
StyleBox[\"i\", \"TI\"]],
TraditionalForm]\) are lists of ones and zeros, e.g. \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)1,0,1,0,0,0\!\(\*FormBox[\(}\),
TraditionalForm]\), that specify which detection routes of the TTTR recording are combined to a detection channel of the HMM. The returned trace is of the form \!\(\*FormBox[\({{\*
StyleBox[\"d\", \"TI\"] \*SubscriptBox[
StyleBox[\"t\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"c\", \"TI\"], \"1\"]}\),
TraditionalForm]\), \!\(\*FormBox[\({\*
StyleBox[\"d\", \"TI\"] \*SubscriptBox[
StyleBox[\"t\", \"TI\"], \"2\"], \*SubscriptBox[
StyleBox[\"c\", \"TI\"], \"2\"]} \[Ellipsis]}\),
TraditionalForm]\), where \!\(\*FormBox[\(\*
StyleBox[\"d\", \"TI\"] \*SubscriptBox[
StyleBox[\"t\", \"TI\"], 
StyleBox[\"i\", \"TI\"]]\),
TraditionalForm]\) is the inter\[Hyphen]photon time in seconds (i.e. the time interval to the preceding photon), and \!\(\*FormBox[SubscriptBox[
StyleBox[\"c\", \"TI\"], 
StyleBox[\"i\", \"TI\"]],
TraditionalForm]\) is the detection channel of the \!\(\*FormBox[
StyleBox[\"i\", \"TI\"],
TraditionalForm]\)th photon. \!\(\*FormBox[\(\*
StyleBox[\"d\", \"TI\"] \*SubscriptBox[
StyleBox[\"t\", \"TI\"], \"1\"]\),
TraditionalForm]\) is the detection time of the first photon. The trace is of the form required for FHMMInitWithPhotonByPhotonData.
\!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)FHMMGetPhotonByPhotonTraceFromTTTR[\!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"t\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"t\", \"TI\"], \"2\"]}\),
TraditionalForm]\)] is equivalent to
FHMMGetPhotonByPhotonTraceFromTTTR[\!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"t\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"t\", \"TI\"], \"2\"]}\),
TraditionalForm]\), \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\) FGetAcceptorRoutes[], FGetDonorRoutes[] \!\(\*FormBox[\(}\),
TraditionalForm]\)].
";


FHMMInitWithBinnedData  ::usage="FHMMInitWithBinnedData[\!\(\*FormBox[\({\*
StyleBox[\"t\", \"TI\"] \*SubscriptBox[
StyleBox[\"r\", \"TI\"], \"1\"], \*
StyleBox[\"t\", \"TI\"] \*SubscriptBox[
StyleBox[\"r\", \"TI\"], \"2\"],  ... , \*
StyleBox[\"t\", \"TI\"] \*SubscriptBox[
StyleBox[\"r\", \"TI\"], 
StyleBox[\"M\", \"TI\"]], \*SubscriptBox[
StyleBox[\"T\", \"TI\"], \"binning\"]\),
TraditionalForm]\)] initializes Fretica's hidden Markov system for FRET data with \!\(\*FormBox[
StyleBox[\"M\", \"TI\"],
TraditionalForm]\) time\[Hyphen]binned photon time traces of the form \!\(\*FormBox[\(\*
StyleBox[\"t\", \"TI\"] \*SubscriptBox[
StyleBox[\"r\", \"TI\"], 
StyleBox[\"i\", \"TI\"]] \[LongEqual] {{\*SubscriptBox[
StyleBox[\"N\", \"TI\"], 
RowBox[{
StyleBox[\"A\", \"TI\"], \"1\"}]], \*SubscriptBox[
StyleBox[\"N\", \"TI\"], 
RowBox[{
StyleBox[\"D\", \"TI\"], \"1\"}]]}, {\*SubscriptBox[
StyleBox[\"N\", \"TI\"], 
RowBox[{
StyleBox[\"A\", \"TI\"], \"2\"}]], \*SubscriptBox[
StyleBox[\"N\", \"TI\"], 
RowBox[{
StyleBox[\"D\", \"TI\"], \"2\"}]]},  ... }\),
TraditionalForm]\), where \!\(\*FormBox[SubscriptBox[
StyleBox[\"N\", \"TI\"], 
StyleBox[
RowBox[{\"A\", \"i\"}], \"TI\"]],
TraditionalForm]\) and \!\(\*FormBox[SubscriptBox[
StyleBox[\"N\", \"TI\"], 
StyleBox[
RowBox[{\"D\", \"i\"}], \"TI\"]],
TraditionalForm]\) are the acceptor and donor photon counts of the \!\(\*FormBox[
StyleBox[\"i\", \"TI\"],
TraditionalForm]\)th bin. \!\(\*FormBox[SubscriptBox[
StyleBox[\"T\", \"TI\"], \"binning\"],
TraditionalForm]\) is the binning interval. ";


FHMMInitWithPhotonByPhotonData  ::usage="FHMMInitWithPhotonByPhotonData[\!\(\*FormBox[\({\*
StyleBox[\"t\", \"TI\"] \*SubscriptBox[
StyleBox[\"r\", \"TI\"], \"1\"], \*
StyleBox[\"t\", \"TI\"] \*SubscriptBox[
StyleBox[\"r\", \"TI\"], \"2\"],  ... , \*
StyleBox[\"t\", \"TI\"] \*SubscriptBox[
StyleBox[\"r\", \"TI\"], 
StyleBox[\"M\", \"TI\"]]\),
TraditionalForm]\)] initializes Fretica's hidden Markov system with \!\(\*FormBox[
StyleBox[\"M\", \"TI\"],
TraditionalForm]\) photon\[Hyphen]by\[Hyphen]photon time traces of the form \!\(\*FormBox[\({{\*
StyleBox[\"d\", \"TI\"] \*SubscriptBox[
StyleBox[\"t\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"c\", \"TI\"], \"1\"]}\),
TraditionalForm]\), \!\(\*FormBox[\({\*
StyleBox[\"d\", \"TI\"] \*SubscriptBox[
StyleBox[\"t\", \"TI\"], \"2\"], \*SubscriptBox[
StyleBox[\"c\", \"TI\"], \"2\"]} \[Ellipsis]}\),
TraditionalForm]\), where \!\(\*FormBox[\(\*
StyleBox[\"d\", \"TI\"] \*SubscriptBox[
StyleBox[\"t\", \"TI\"], 
StyleBox[\"i\", \"TI\"]]\),
TraditionalForm]\) is the inter\[Hyphen]photon time in seconds (i.e. the time interval to the preceding photon), and \!\(\*FormBox[SubscriptBox[
StyleBox[\"c\", \"TI\"], 
StyleBox[\"i\", \"TI\"]],
TraditionalForm]\) is the detection channel of the \!\(\*FormBox[
StyleBox[\"i\", \"TI\"],
TraditionalForm]\)th photon. (eg. \!\(\*FormBox[
StyleBox[\"c\", \"TI\"],
TraditionalForm]\)\[LongEqual]1 for an acceptor or \!\(\*FormBox[
StyleBox[\"c\", \"TI\"],
TraditionalForm]\)\[LongEqual]2 for a donor photon). The first inter\[Hyphen]photon time t1 is usually set to zero. ";


FHMMInitWithPhotonByPhotonDataFromBurstList  ::usage="FHMMInitWithPhotonByPhotonDataFromBurstList[colormap] uses the burst list to initialize Fretica's hidden Markov system with photon\[Hyphen]by\[Hyphen]photon time traces of the form \!\(\*FormBox[\(\*
StyleBox[\"t\", \"TI\"] \*SubscriptBox[
StyleBox[\"r\", \"TI\"], 
StyleBox[\"j\", \"TI\"]] \[LongEqual] {{\*
StyleBox[\"d\", \"TI\"] \*SubscriptBox[
StyleBox[\"t\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"c\", \"TI\"], \"1\"]}, {\*
StyleBox[\"d\", \"TI\"] \*SubscriptBox[
StyleBox[\"t\", \"TI\"], \"2\"], \*SubscriptBox[
StyleBox[\"c\", \"TI\"], \"2\"]} \[Ellipsis]}\),
TraditionalForm]\), where \!\(\*FormBox[
StyleBox[\"j\", \"TI\"],
TraditionalForm]\) represents the \!\(\*FormBox[
StyleBox[\"j\", \"TI\"],
TraditionalForm]\)th burst. \!\(\*FormBox[\(\*
StyleBox[\"d\", \"TI\"] \*SubscriptBox[
StyleBox[\"t\", \"TI\"], 
StyleBox[\"i\", \"TI\"]]\),
TraditionalForm]\) is the inter\[Hyphen]photon time in seconds (i.e. the time interval to the preceding photon), and \!\(\*FormBox[SubscriptBox[
StyleBox[\"c\", \"TI\"], 
StyleBox[\"i\", \"TI\"]],
TraditionalForm]\) is the detection channel (color) of the \!\(\*FormBox[
StyleBox[\"i\", \"TI\"],
TraditionalForm]\)th photon. colormap is a list of integers. Photons detected in detection route \!\(\*FormBox[
StyleBox[\"r\", \"TI\"],
TraditionalForm]\) are colored with colormap[[\!\(\*FormBox[
StyleBox[\"r\", \"TI\"],
TraditionalForm]\)]], if colormap[[\!\(\*FormBox[
StyleBox[\"r\", \"TI\"],
TraditionalForm]\)]]\!\(\*FormBox[\(>\),
TraditionalForm]\)0. If colormap[[\!\(\*FormBox[
StyleBox[\"r\", \"TI\"],
TraditionalForm]\)]]\[LongEqual]\[LongEqual]0, photons detected in route r are ignored. For example, colormap\[LongEqual]\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)1,2,1,2,0,0\!\(\*FormBox[\(}\),
TraditionalForm]\) colors photons detected in detection routes one and three as 1 and those in detection routes two and four as 2, while photons in route five and six are ignored. 
If lifetime channel constraints are enabled (e.g. in PIE mode), all photons of a burst not fulfilling the main\[Hyphen]channel constraints are ignored.
Options:
FHMMFirstTauZero\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)True (default) sets the first inter\[Hyphen]photon time in each trace to zero (\!\(\*FormBox[\(\*
StyleBox[\"d\", \"TI\"] \*SubscriptBox[
StyleBox[\"t\", \"TI\"], \"1\"] \[LongEqual] 0\),
TraditionalForm]\)). FHMMFirstTauZero\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)False sets the first inter\[Hyphen]photon time to the time difference between detection of the first photon of the current burst and the last photon of the preceding burst.
FBurstData\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)All (default) all bursts are used.
FBurstData\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FSelected only selected bursts are used.
";


FHMMLogLikelihood  ::usage="FHMMLogLikelihood[\!\(\*FormBox[
StyleBox[\"K\", \"TI\"],
TraditionalForm]\)] or
FHMMLogLikelihood[\!\(\*FormBox[
StyleBox[\"K\", \"TI\"],
TraditionalForm]\), photonrates]
returns the total log\[Hyphen]likelihood of the HMM summed over all previously initialized trajectories assuming the rate matrix \!\(\*FormBox[
StyleBox[\"K\", \"TI\"],
TraditionalForm]\). 
In the first case (i.e. FHMMLogLikelihood[\!\(\*FormBox[
StyleBox[\"K\", \"TI\"],
TraditionalForm]\)]) the photon rates that beforehand were set with FHMMSetPhotonRates are used.
The second case (i.e. FHMMLogLikelihood[\!\(\*FormBox[
StyleBox[\"K\", \"TI\"],
TraditionalForm]\), photonrates]) is equivalent to executing
(FHMMSetPhotonRates[photonrates]; FHMMLogLikelihood[\!\(\*FormBox[
StyleBox[\"K\", \"TI\"],
TraditionalForm]\)]),
where photonrates is either a matrix or a list of matrices.

FHMMLogLikelihood has the option FHMMpinpfin.
The default setting is FHMMpinpfin\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FHMMOnePeq, in which case pini\[LongEqual]peq with K.peq\[LongEqual]0, and pfinal\[LongEqual]\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)1,1,...\!\(\*FormBox[\(}\),
TraditionalForm]\) are used in the calculations.
Alternatively, pini and pfinal can be set individually for each trace using FHMMSetPinPfin. The option is then FHMMpinpfin\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FHMMTraceWise. ";


FHMMPeqOne  ::usage="FHMMPeqOne is an option value for FHMMpinpfin. ";


FHMMpinpfin  ::usage="FHMMpinpfin is an option for FHMMLogLikelihood and FHMMViterbi. ";


FHMMSetPhotonRates  ::usage="FHMMSetPhotonRates[photonrates] or
FHMMSetPhotonRates[ \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)photonrates\!\(\*FormBox[SubscriptBox[\(\[Null]\), \(1\)],
TraditionalForm]\), ... ,photonrates\!\(\*FormBox[\(\*SubscriptBox[\"\[Null]\", 
StyleBox[\"M\", \"TI\"]]\(}\)\),
TraditionalForm]\)] sets the mean photon rates assumed for \!\(\*FormBox[
StyleBox[\"M\", \"TI\"],
TraditionalForm]\) photon traces that were beforehand initialized using FHMMInitWithPhotonByPhotonData or FHMMInitWithBinnedData. The first version sets identical photon rates for all \!\(\*FormBox[
StyleBox[\"M\", \"TI\"],
TraditionalForm]\) traces, the second version sets the photon rates individually for each trace.
\!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)photonrates or photonrates\!\(\*FormBox[SubscriptBox[\"\[Null]\", 
StyleBox[\"i\", \"TI\"]],
TraditionalForm]\) are matrices, where the element photonrates\!\(\*FormBox[SubscriptBox[\"\[Null]\", 
RowBox[{\"(\", 
StyleBox[\"i\", \"TI\"], \")\"}]],
TraditionalForm]\)[[\!\(\*FormBox[
StyleBox[\"r\", \"TI\"],
TraditionalForm]\), \!\(\*FormBox[
StyleBox[\"s\", \"TI\"],
TraditionalForm]\)]] is the mean photon rate detected in detection route \!\(\*FormBox[
StyleBox[\"r\", \"TI\"],
TraditionalForm]\) if the system is in state \!\(\*FormBox[
StyleBox[\"s\", \"TI\"],
TraditionalForm]\). ";


FHMMSetPinPfin  ::usage="FHMMSetPinPfin[ pinpfin ] sets the \!\(\*FormBox[SubscriptBox[
StyleBox[\"p\", \"TI\"], 
StyleBox[
RowBox[{\"i\", \"n\"}], \"TI\"]],
TraditionalForm]\) and \!\(\*FormBox[SubscriptBox[
StyleBox[\"p\", \"TI\"], 
StyleBox[
RowBox[{\"f\", \"i\", \"n\"}], \"TI\"]],
TraditionalForm]\) vectors for the photon time traces (initialized using FHMMInitWithBinnedData or FHMMInitWithPhotonByPhotonData). The command is required if FHMMLogLikelihood or FHMMViterbi are going to be called with the option FHMMpinpfin\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FHMMTraceWise.

pinpfin can be of the form \!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"p\", \"TI\"], 
StyleBox[
RowBox[{\"i\", \"n\"}], \"TI\"]], \*SubscriptBox[
StyleBox[\"p\", \"TI\"], 
StyleBox[
RowBox[{\"f\", \"i\", \"n\"}], \"TI\"]]}\),
TraditionalForm]\), where \!\(\*FormBox[SubscriptBox[
StyleBox[\"p\", \"TI\"], 
StyleBox[
RowBox[{\"i\", \"n\"}], \"TI\"]],
TraditionalForm]\) and \!\(\*FormBox[SubscriptBox[
StyleBox[\"p\", \"TI\"], 
StyleBox[
RowBox[{\"f\", \"i\", \"n\"}], \"TI\"]],
TraditionalForm]\) are state population vectors. In this case, the vectors will be assumed to be the same for all photon time traces. Alternatively, state population vectors can be set individually for each photon time trace with pinpfin of the form \!\(\*FormBox[\({{\*SubscriptBox[
StyleBox[\"p\", \"TI\"], 
RowBox[{
StyleBox[\"i\", \"TI\"], 
StyleBox[\"n\", \"TI\"], \"1\"}]], \*SubscriptBox[
StyleBox[\"p\", \"TI\"], 
RowBox[{
StyleBox[\"f\", \"TI\"], 
StyleBox[\"i\", \"TI\"], 
StyleBox[\"n\", \"TI\"], \"1\"}]]},  ... , {\*SubscriptBox[
StyleBox[\"p\", \"TI\"], 
StyleBox[
RowBox[{\"i\", \"n\", \"M\"}], \"TI\"]], \*SubscriptBox[
StyleBox[\"p\", \"TI\"], 
StyleBox[
RowBox[{\"f\", \"i\", \"n\", \"M\"}], \"TI\"]]}\),
TraditionalForm]\), where \!\(\*FormBox[
StyleBox[\"M\", \"TI\"],
TraditionalForm]\) is the number of traces that the HM system was initialized with. ";


FHMMSimulateBinnedTrace  ::usage="FHMMSimulateBinnedTrace[\!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"n\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"n\", \"TI\"], \"2\"],  ... }\),
TraditionalForm]\), \!\(\*FormBox[
StyleBox[\"K\", \"TI\"],
TraditionalForm]\), \!\(\*FormBox[SubscriptBox[
StyleBox[\"p\", \"TI\"], 
StyleBox[
RowBox[{\"i\", \"n\", \"i\"}], \"TI\"]],
TraditionalForm]\), length, \!\(\*FormBox[SubscriptBox[
StyleBox[\"T\", \"TI\"], \"binning\"],
TraditionalForm]\)]
returns \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)mcs, statetrajectory\!\(\*FormBox[\(}\),
TraditionalForm]\), where mcs is a simulated binned photon time trace assuming the hidden Markov model with rate matrix \!\(\*FormBox[
StyleBox[\"K\", \"TI\"],
TraditionalForm]\) and an initial population vector \!\(\*FormBox[SubscriptBox[
StyleBox[\"p\", \"TI\"], 
StyleBox[
RowBox[{\"i\", \"n\", \"i\"}], \"TI\"]],
TraditionalForm]\). \!\(\*FormBox[SubscriptBox[
StyleBox[\"n\", \"TI\"], 
StyleBox[\"c\", \"TI\"]],
TraditionalForm]\) is a vector containing the photon rates of the states of the \!\(\*FormBox[
StyleBox[\"c\", \"TI\"],
TraditionalForm]\)th detection channel. The total time of the trajectory is given by length, and the binning interval by \!\(\*FormBox[SubscriptBox[
StyleBox[\"T\", \"TI\"], \"binning\"],
TraditionalForm]\). mcs is of the form required for FHMMInitWithBinnedData. statetrajectory is the underlying simulated state trajectory; it is of the form \!\(\*FormBox[\({{\*SubscriptBox[
StyleBox[\"t\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"s\", \"TI\"], \"1\"]}\),
TraditionalForm]\), \!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"t\", \"TI\"], \"2\"], \*SubscriptBox[
StyleBox[\"s\", \"TI\"], \"2\"]}\),
TraditionalForm]\), \!\(\*FormBox[\(\(\[Ellipsis]\)\(}\)\),
TraditionalForm]\), where the pair \!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"t\", \"TI\"], 
StyleBox[\"i\", \"TI\"]], \*SubscriptBox[
StyleBox[\"s\", \"TI\"], 
StyleBox[\"i\", \"TI\"]]}\),
TraditionalForm]\) signifies a state change at time \!\(\*FormBox[SubscriptBox[
StyleBox[\"t\", \"TI\"], 
StyleBox[\"i\", \"TI\"]],
TraditionalForm]\) to state \!\(\*FormBox[SubscriptBox[
StyleBox[\"s\", \"TI\"], 
StyleBox[\"i\", \"TI\"]],
TraditionalForm]\). Note that internally, photons are first simulated and then binned. ";


FHMMSimulatePhotonByPhotonTrace  ::usage="FHMMSimulatePhotonByPhotonTrace[\!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"n\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"n\", \"TI\"], \"2\"],  ... }\),
TraditionalForm]\), \!\(\*FormBox[
StyleBox[\"K\", \"TI\"],
TraditionalForm]\), \!\(\*FormBox[SubscriptBox[
StyleBox[\"p\", \"TI\"], 
StyleBox[
RowBox[{\"i\", \"n\", \"i\"}], \"TI\"]],
TraditionalForm]\), length] or
FHMMSimulatePhotonByPhotonTrace[\!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"n\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"n\", \"TI\"], \"2\"],  ... }\),
TraditionalForm]\), statetrajectory, length]
return \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)photontrace, statetrajectory\!\(\*FormBox[\(}\),
TraditionalForm]\), where photontrace is a simulated photon\[Hyphen]by\[Hyphen]photon time trace assuming the hidden Markov model with rate matrix \!\(\*FormBox[
StyleBox[\"K\", \"TI\"],
TraditionalForm]\), using either an initial population vector \!\(\*FormBox[SubscriptBox[
StyleBox[\"p\", \"TI\"], 
StyleBox[
RowBox[{\"i\", \"n\", \"i\"}], \"TI\"]],
TraditionalForm]\) or a given state trajectory defined by statetrajectory. \!\(\*FormBox[SubscriptBox[
StyleBox[\"n\", \"TI\"], 
StyleBox[\"c\", \"TI\"]],
TraditionalForm]\) is a vector containing the photon rates of the states of the \!\(\*FormBox[
StyleBox[\"c\", \"TI\"],
TraditionalForm]\)th detection channel. The total time of the trajectory is given by length.
statetrajectory is of the form \!\(\*FormBox[\({{\*SubscriptBox[
StyleBox[\"t\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"s\", \"TI\"], \"1\"]}\),
TraditionalForm]\), \!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"t\", \"TI\"], \"2\"], \*SubscriptBox[
StyleBox[\"s\", \"TI\"], \"2\"]}\),
TraditionalForm]\), \!\(\*FormBox[\(\(\[Ellipsis]\)\(}\)\),
TraditionalForm]\), where the pair \!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"t\", \"TI\"], 
StyleBox[\"i\", \"TI\"]], \*SubscriptBox[
StyleBox[\"s\", \"TI\"], 
StyleBox[\"i\", \"TI\"]]}\),
TraditionalForm]\) signifies a state change at time \!\(\*FormBox[SubscriptBox[
StyleBox[\"t\", \"TI\"], 
StyleBox[\"i\", \"TI\"]],
TraditionalForm]\) to state \!\(\*FormBox[SubscriptBox[
StyleBox[\"s\", \"TI\"], 
StyleBox[\"i\", \"TI\"]],
TraditionalForm]\).
The trace returned from FHMMSimulatePhotonByPhotonTrace is of the form \!\(\*FormBox[\({{\*
StyleBox[\"d\", \"TI\"] \*SubscriptBox[
StyleBox[\"t\", \"TI\"], \"1\"], \*SubscriptBox[
StyleBox[\"c\", \"TI\"], \"1\"]}, {\*
StyleBox[\"d\", \"TI\"] \*SubscriptBox[
StyleBox[\"t\", \"TI\"], \"2\"], \*SubscriptBox[
StyleBox[\"c\", \"TI\"], \"2\"]} \[Ellipsis]}\),
TraditionalForm]\), where \!\(\*FormBox[\(\*
StyleBox[\"d\", \"TI\"] \*SubscriptBox[
StyleBox[\"t\", \"TI\"], 
StyleBox[\"i\", \"TI\"]]\),
TraditionalForm]\) is the interphoton time (i.e. the time interval to the preceding photon), and \!\(\*FormBox[SubscriptBox[
StyleBox[\"c\", \"TI\"], 
StyleBox[\"i\", \"TI\"]],
TraditionalForm]\) is the detection channel (color) of the \!\(\*FormBox[
StyleBox[\"i\", \"TI\"],
TraditionalForm]\)th photon. \!\(\*FormBox[\(\*
StyleBox[\"d\", \"TI\"] \*SubscriptBox[
StyleBox[\"t\", \"TI\"], \"1\"]\),
TraditionalForm]\) is set to zero. The trace is of the form required as input for FHMMInitWithPhotonByPhotonData. ";


FHMMTraceWise  ::usage="FMTraceWise is an option value for FHMMpinpfin. ";


FHMMTransitionStatesLogLikelihoods  ::usage="FHMMTransitionStatesLogLikelihoods[\!\(\*FormBox[
StyleBox[\"K\", \"TI\"],
TraditionalForm]\):\!\(\*FormBox[\({_\),
TraditionalForm]\)?SquareMatrixQ..\!\(\*FormBox[\(}\),
TraditionalForm]\),tslevels\!\(\*FormBox[\(_\),
TraditionalForm]\)List] ";


FHMMViterbi  ::usage="FHMMViterbi[\!\(\*FormBox[
StyleBox[\"K\", \"TI\"],
TraditionalForm]\)] or
FHMMViterbi[\!\(\*FormBox[
StyleBox[\"K\", \"TI\"],
TraditionalForm]\), photonrates]
apply the Viterbi algorithm to all previously initialized trajectories assuming the rate matrix K. A list of most likely state trajectories is returned in the form of an FDwellList. 
In the first case (i.e. FHMMViterbi[\!\(\*FormBox[
StyleBox[\"K\", \"TI\"],
TraditionalForm]\)]), the photon rates that beforehand were set with FHMMSetPhotonRates are used.
The second case (i.e. FHMMViterbi[\!\(\*FormBox[
StyleBox[\"K\", \"TI\"],
TraditionalForm]\), photonrates]) is equivalent to executing 
(FHMMSetPhotonRates[photonrates]; FHMMViterbi[\!\(\*FormBox[
StyleBox[\"K\", \"TI\"],
TraditionalForm]\)]),
where photonrates is either a matrix or a list of matrices.

FHMMViterbi has the option FHMMpinpfin. 
The default setting is FHMMpinpfin\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FHMMOnePeq, in which case \!\(\*FormBox[\(\*SubscriptBox[
StyleBox[\"p\", \"TI\"], 
StyleBox[
RowBox[{\"i\", \"n\", \"i\"}], \"TI\"]] \[LongEqual] \*SubscriptBox[
StyleBox[\"p\", \"TI\"], 
StyleBox[
RowBox[{\"e\", \"q\"}], \"TI\"]]\),
TraditionalForm]\), with \!\(\*FormBox[\(\*
StyleBox[\"K\", \"TI\"] . \*SubscriptBox[
StyleBox[\"p\", \"TI\"], 
StyleBox[
RowBox[{\"e\", \"q\"}], \"TI\"]] \[LongEqual] 0\),
TraditionalForm]\), and \!\(\*FormBox[SubscriptBox[
StyleBox[\"p\", \"TI\"], 
StyleBox[
RowBox[{\"f\", \"i\", \"n\", \"a\", \"l\"}], \"TI\"]],
TraditionalForm]\)\[LongEqual]\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)1,1,...\!\(\*FormBox[\(}\),
TraditionalForm]\) are used in the calculations.
Alternatively, \!\(\*FormBox[SubscriptBox[
StyleBox[\"p\", \"TI\"], 
StyleBox[
RowBox[{\"i\", \"n\", \"i\"}], \"TI\"]],
TraditionalForm]\) and \!\(\*FormBox[SubscriptBox[
StyleBox[\"p\", \"TI\"], 
StyleBox[
RowBox[{\"f\", \"i\", \"n\", \"a\", \"l\"}], \"TI\"]],
TraditionalForm]\) can be set for each photon time trace individually using FPHSetPinPfin. FHMMViterbi is then called with the option FHMMpinpfin\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FMTraceWise. ";


FDwell  ::usage="Element of an FDwellList. ";


FDwellList  ::usage="FHMMViterbi returns an FDwellList[ traj1, traj2, traj3 ,\!\(\*FormBox[\(\[Ellipsis]\),
TraditionalForm]\) ], with traji of the form FDwellList[ dwell1, dwell2, dwell3, \!\(\*FormBox[\(\[Ellipsis]\),
TraditionalForm]\)] where dwellj is of the form 
\!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)FDwell[tj, statej\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)statej+1, dtj, \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)nAj, nDj\!\(\*FormBox[\(}\),
TraditionalForm]\)] with 
\!\(\*FormBox[\(\\\ \\\ \\\ \\\ \),
TraditionalForm]\)tj \[LongEqual] start time of dwell j 
\!\(\*FormBox[\(\\\ \\\ \\\ \\\ \),
TraditionalForm]\)dtj \[LongEqual] dwell time
\!\(\*FormBox[\(\\\ \\\ \\\ \\\ \),
TraditionalForm]\)statej \[LongEqual] most likely state from tj to tj+dtj
\!\(\*FormBox[\(\\\ \\\ \\\ \\\ \),
TraditionalForm]\)statej+1 \[LongEqual] most likely state after tj+dtj
\!\(\*FormBox[\(\(\\\ \\\ \\\ \\\ \)\({\[Null]\)\),
TraditionalForm]\)nAj, nDj\!\(\*FormBox[\(}\),
TraditionalForm]\) \[LongEqual] acceptor and donor photons counted during dwell time
\!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)Example: dwells\[LongEqual] FHMMViterbi[\!\(\*FormBox[
StyleBox[\"K\", \"TI\"],
TraditionalForm]\)] can be used like a function to extract information. 
\!\(\*FormBox[\(\\\ \\\ \\\ \\\ \),
TraditionalForm]\)dwells[\"dt\"] returns \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\) \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)dt values of trajectory 1\!\(\*FormBox[\(}\),
TraditionalForm]\), \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)dt values of trajectory 2\!\(\*FormBox[\(}\),
TraditionalForm]\), \!\(\*FormBox[\(\[Ellipsis]\),
TraditionalForm]\) \!\(\*FormBox[\(}\),
TraditionalForm]\)
 dwells[[7]][\"dt\"] returns \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)dt values of trajectory 7\!\(\*FormBox[\(}\),
TraditionalForm]\)
\!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)
\!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)Supported arguments: \"t\", \"transition\", \"state\", \"dt\", \"Na\", \"Nd\", \"PhotonRates\".

\!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)In addition, the following functions are defined:

\!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)dwells[\"mcs\", t0, ratefunc] returns for each trajectory in dwells an mcs curve with time offset t0. 
\!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)ratefunc[state] is a function that returns the photon detection rate of state, e.g. ratefunc\[LongEqual]\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)na1,na2,na3\!\(\*FormBox[\(}\),
TraditionalForm]\)[[\!\(\*FormBox[\(#\),
TraditionalForm]\)]]\!\(\*FormBox[\(&\),
TraditionalForm]\)
\!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)dwells[\"stategraph\", t0, scale, offset] returns a state trajectory for each trajectory in dwells.
\!\(\*FormBox[\(\\\ \\\ \),
TraditionalForm]\)
Dwells can be filtered for transitions using patterns, e.g., dwells[3\!\(\*FormBox[\(\(\[Rule]\)\(_\)\),
TraditionalForm]\)] returns all dwells for which the transition s1\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)s2 matches the pattern 3\!\(\*FormBox[\(\(\[Rule]\)\(_\)\),
TraditionalForm]\). ";


FJoinSelftransitions  ::usage="FJoinSelftransitions[dwells:FDwellList[\!\(\*FormBox[\(_\),
TraditionalForm]\)FDwell..]] ";


FRenameStates  ::usage="FRenameStates[dwells, \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\) old1\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)new1, old2\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)new2, \!\(\*FormBox[\(\(\[Ellipsis]\)\(}\)\),
TraditionalForm]\)] first renames states and then updates the trajectories by combining neighboring dwells without transition to a different state.
E.g.: With FRenameStates[dwells, \!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)3\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)1\!\(\*FormBox[\(}\),
TraditionalForm]\)], 2\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)1\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)3\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)1\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)3\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)1\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)2 becomes 2\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)1\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)2, and the dwell times of the combined dwells are summed up. ";


FSplitTrajectory  ::usage="FSplitTrajectory[dwells, T] splits the trajectories contained in dwells into shorter trajectories, each of time length T. ";


FGHMMInitWithBinnedData  ::usage="No help available. ";


FGHMMInitWithPhotonByPhotonData  ::usage="No help available. ";


FGHMMLogLikelihood  ::usage="No help available. ";


FGHMMSetNumberOfModels  ::usage="FGHMMSetNumberOfModels[modelsize] ";


FGHMMSetPhotonRates  ::usage="No help available. ";


FGHMMSetPinPfin  ::usage="No help available. ";


FGHMMViterbi  ::usage="No help available. ";


FFretHMMForwardBackward  ::usage="FFretHMMForwardBackward[\!\(\*FormBox[
StyleBox[\"K\", \"TI\"],
TraditionalForm]\)] or
FFretHMMForwardBackward[\!\(\*FormBox[
StyleBox[\"K\", \"TI\"],
TraditionalForm]\), photonrates]
applies the forward\[Hyphen]backward algorithm to all previously initialized trajectories assuming the rate matrix \!\(\*FormBox[
StyleBox[\"K\", \"TI\"],
TraditionalForm]\). A list of state\[Hyphen]probability trajectories is returned. 
In the first case (i.e. FFretHMMForwardBackward[\!\(\*FormBox[
StyleBox[\"K\", \"TI\"],
TraditionalForm]\)]), the photon rates set with FFretHMMSetPhotonRates are used. With FFretHMMForwardBackward[\!\(\*FormBox[
StyleBox[\"K\", \"TI\"],
TraditionalForm]\), photonrates], the photon rates given in photonrates are used. 
photonrates is a list that contains for each trajectory \!\(\*FormBox[
StyleBox[\"i\", \"TI\"],
TraditionalForm]\) an expression of the form
\!\(\*FormBox[\({{{\*SubscriptBox[
StyleBox[\"F\", \"TI\"], 
RowBox[{
StyleBox[\"i\", \"TI\"], \",\", \"1\"}]], \*SubscriptBox[\"\[Mu]\", 
RowBox[{
StyleBox[\"i\", \"TI\"], \",\", \"1\"}]], \*SubscriptBox[\"\[Nu]\", 
RowBox[{
StyleBox[\"i\", \"TI\"], \",\", \"1\"}]]}, {\*SubscriptBox[
StyleBox[\"F\", \"TI\"], 
RowBox[{
StyleBox[\"i\", \"TI\"], \",\", \"2\"}]], \*SubscriptBox[\"\[Mu]\", 
RowBox[{
StyleBox[\"i\", \"TI\"], \",\", \"2\"}]], \*SubscriptBox[\"\[Nu]\", 
RowBox[{
StyleBox[\"i\", \"TI\"], \",\", \"2\"}]]} ... }, \*
StyleBox[\"b\", \"TI\"] \*SubscriptBox[
StyleBox[\"g\", \"TI\"], 
RowBox[{
StyleBox[\"A\", \"TI\"], \",\", 
StyleBox[\"i\", \"TI\"]}]], \*
StyleBox[\"b\", \"TI\"] \*SubscriptBox[
StyleBox[\"g\", \"TI\"], 
RowBox[{
StyleBox[\"D\", \"TI\"], \",\", 
StyleBox[\"i\", \"TI\"]}]]}\),
TraditionalForm]\).
The first list contains for each state \!\(\*FormBox[
StyleBox[\"s\", \"TI\"],
TraditionalForm]\) of the kinetic model the expression \!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"F\", \"TI\"], 
RowBox[{
StyleBox[\"i\", \"TI\"], \",\", 
StyleBox[\"s\", \"TI\"]}]], \*SubscriptBox[\"\[Mu]\", 
RowBox[{
StyleBox[\"i\", \"TI\"], \",\", 
StyleBox[\"s\", \"TI\"]}]], \*SubscriptBox[\"\[Nu]\", 
RowBox[{
StyleBox[\"i\", \"TI\"], \",\", 
StyleBox[\"s\", \"TI\"]}]]}\),
TraditionalForm]\), where \!\(\*FormBox[SubscriptBox[
StyleBox[\"F\", \"TI\"], 
RowBox[{
StyleBox[\"i\", \"TI\"], \",\", 
StyleBox[\"s\", \"TI\"]}]],
TraditionalForm]\) is the mean total fluorescence detection rate (without background), \!\(\*FormBox[SubscriptBox[\"\[Mu]\", 
RowBox[{
StyleBox[\"i\", \"TI\"], \",\", 
StyleBox[\"s\", \"TI\"]}]],
TraditionalForm]\) is the probability that a detected fluorescence photon is detected on the acceptor detection route, and \!\(\*FormBox[SubscriptBox[\"\[Nu]\", 
RowBox[{
StyleBox[\"i\", \"TI\"], \",\", 
StyleBox[\"s\", \"TI\"]}]],
TraditionalForm]\) is a parameter describing the intrinsic broadening of state \!\(\*FormBox[
StyleBox[\"s\", \"TI\"],
TraditionalForm]\) in proximity ratio space. \!\(\*FormBox[\(\*
StyleBox[\"b\", \"TI\"] \*SubscriptBox[
StyleBox[\"g\", \"TI\"], 
RowBox[{
StyleBox[\"A\", \"TI\"], \",\", 
StyleBox[\"i\", \"TI\"]}]]\),
TraditionalForm]\) and \!\(\*FormBox[\(\*
StyleBox[\"b\", \"TI\"] \*SubscriptBox[
StyleBox[\"g\", \"TI\"], 
RowBox[{
StyleBox[\"D\", \"TI\"], \",\", 
StyleBox[\"i\", \"TI\"]}]]\),
TraditionalForm]\) are the acceptor and donor background rates, respectively, of trajectory \!\(\*FormBox[
StyleBox[\"i\", \"TI\"],
TraditionalForm]\).

FFretHMMForwardBackward has the option FHMMpinpfin. The default setting is FHMMpinpfin\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FHMMOnePeq in which case pini\[LongEqual]peq with \!\(\*FormBox[\(\*
StyleBox[\"K\", \"TI\"] . \*
StyleBox[\"p\", \"TI\"] \*
StyleBox[\"e\", \"TI\"] \*
StyleBox[\"q\", \"TI\"] \[LongEqual] 0\),
TraditionalForm]\), and pfinal\[LongEqual]\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)1,1,...\!\(\*FormBox[\(}\),
TraditionalForm]\) are used in the calculations. Alternatively, pini and pfinal can be set individually for each trace using FPHSetPinPfin. The option is then FHMMpinpfin\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FMTraceWise. ";


FFretHMMInitWithBinnedData  ::usage="FFretHMMInitWithBinnedData[\!\(\*FormBox[\({\*
StyleBox[\"t\", \"TI\"] \*SubscriptBox[
StyleBox[\"r\", \"TI\"], \"1\"], \*
StyleBox[\"t\", \"TI\"] \*SubscriptBox[
StyleBox[\"r\", \"TI\"], \"2\"],  ... , \*
StyleBox[\"t\", \"TI\"] \*SubscriptBox[
StyleBox[\"r\", \"TI\"], 
StyleBox[\"M\", \"TI\"]], \*SubscriptBox[
StyleBox[\"T\", \"TI\"], \"binning\"]\),
TraditionalForm]\)] initializes Fretica's hidden Markov system for FRET data with \!\(\*FormBox[
StyleBox[\"M\", \"TI\"],
TraditionalForm]\) binned photon time traces of the form \!\(\*FormBox[\(\*
StyleBox[\"t\", \"TI\"] \*SubscriptBox[
StyleBox[\"r\", \"TI\"], 
StyleBox[\"i\", \"TI\"]] \[LongEqual] {{\*SubscriptBox[
StyleBox[\"N\", \"TI\"], 
RowBox[{
StyleBox[\"A\", \"TI\"], \"1\"}]], \*SubscriptBox[
StyleBox[\"N\", \"TI\"], 
RowBox[{
StyleBox[\"D\", \"TI\"], \"1\"}]]}, {\*SubscriptBox[
StyleBox[\"N\", \"TI\"], 
RowBox[{
StyleBox[\"A\", \"TI\"], \"2\"}]], \*SubscriptBox[
StyleBox[\"N\", \"TI\"], 
RowBox[{
StyleBox[\"D\", \"TI\"], \"2\"}]]},  ... }\),
TraditionalForm]\), where \!\(\*FormBox[SubscriptBox[
StyleBox[\"N\", \"TI\"], 
StyleBox[
RowBox[{\"A\", \"i\"}], \"TI\"]],
TraditionalForm]\) and \!\(\*FormBox[SubscriptBox[
StyleBox[\"N\", \"TI\"], 
StyleBox[
RowBox[{\"D\", \"i\"}], \"TI\"]],
TraditionalForm]\) are the acceptor and donor photon counts, respectively, of the \!\(\*FormBox[
StyleBox[\"i\", \"TI\"],
TraditionalForm]\)th bin. \!\(\*FormBox[SubscriptBox[
StyleBox[\"T\", \"TI\"], \"binning\"],
TraditionalForm]\) is the binning interval. ";


FFretHMMLogLikelihood  ::usage="FFretHMMLogLikelihood[\!\(\*FormBox[
StyleBox[\"K\", \"TI\"],
TraditionalForm]\)] or
FFretHMMLogLikelihood[\!\(\*FormBox[
StyleBox[\"K\", \"TI\"],
TraditionalForm]\), photonrates]
returns the total log\[Hyphen]likelihood of the HMM summed over all previously initialized trajectories assuming the rate matrix \!\(\*FormBox[
StyleBox[\"K\", \"TI\"],
TraditionalForm]\). 
For FFretHMMLogLikelihood[\!\(\*FormBox[
StyleBox[\"K\", \"TI\"],
TraditionalForm]\)], the photon rates set with FFretHMMSetPhotonRates are used. With FFretHMMLogLikelihood[\!\(\*FormBox[
StyleBox[\"K\", \"TI\"],
TraditionalForm]\), photonrates], the photon rates given in photonrates are used. 
photonrates is a list that contains, for each trajectory \!\(\*FormBox[
StyleBox[\"i\", \"TI\"],
TraditionalForm]\), an expression of the form
\!\(\*FormBox[\({{{\*SubscriptBox[
StyleBox[\"F\", \"TI\"], 
RowBox[{
StyleBox[\"i\", \"TI\"], \",\", \"1\"}]], \*SubscriptBox[\"\[Mu]\", 
RowBox[{
StyleBox[\"i\", \"TI\"], \",\", \"1\"}]], \*SubscriptBox[\"\[Nu]\", 
RowBox[{
StyleBox[\"i\", \"TI\"], \",\", \"1\"}]]}, {\*SubscriptBox[
StyleBox[\"F\", \"TI\"], 
RowBox[{
StyleBox[\"i\", \"TI\"], \",\", \"2\"}]], \*SubscriptBox[\"\[Mu]\", 
RowBox[{
StyleBox[\"i\", \"TI\"], \",\", \"2\"}]], \*SubscriptBox[\"\[Nu]\", 
RowBox[{
StyleBox[\"i\", \"TI\"], \",\", \"2\"}]]} ... }, \*
StyleBox[\"b\", \"TI\"] \*SubscriptBox[
StyleBox[\"g\", \"TI\"], 
RowBox[{
StyleBox[\"A\", \"TI\"], \",\", 
StyleBox[\"i\", \"TI\"]}]], \*
StyleBox[\"b\", \"TI\"] \*SubscriptBox[
StyleBox[\"g\", \"TI\"], 
RowBox[{
StyleBox[\"D\", \"TI\"], \",\", 
StyleBox[\"i\", \"TI\"]}]]}\),
TraditionalForm]\).
The first list contains for each state \!\(\*FormBox[
StyleBox[\"s\", \"TI\"],
TraditionalForm]\) of the kinetic model the expression \!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"F\", \"TI\"], 
RowBox[{
StyleBox[\"i\", \"TI\"], \",\", 
StyleBox[\"s\", \"TI\"]}]], \*SubscriptBox[\"\[Mu]\", 
RowBox[{
StyleBox[\"i\", \"TI\"], \",\", 
StyleBox[\"s\", \"TI\"]}]], \*SubscriptBox[\"\[Nu]\", 
RowBox[{
StyleBox[\"i\", \"TI\"], \",\", 
StyleBox[\"s\", \"TI\"]}]]}\),
TraditionalForm]\), where \!\(\*FormBox[SubscriptBox[
StyleBox[\"F\", \"TI\"], 
RowBox[{
StyleBox[\"i\", \"TI\"], \",\", 
StyleBox[\"s\", \"TI\"]}]],
TraditionalForm]\) is the mean total fluorescence detection rate (without background), \!\(\*FormBox[SubscriptBox[\"\[Mu]\", 
RowBox[{
StyleBox[\"i\", \"TI\"], \",\", 
StyleBox[\"s\", \"TI\"]}]],
TraditionalForm]\) is the probability that a detected fluorescence photon is detected on the acceptor detection route, and \!\(\*FormBox[SubscriptBox[\"\[Nu]\", 
RowBox[{
StyleBox[\"i\", \"TI\"], \",\", 
StyleBox[\"s\", \"TI\"]}]],
TraditionalForm]\) is a parameter describing the intrinsic broadening of state \!\(\*FormBox[
StyleBox[\"s\", \"TI\"],
TraditionalForm]\) in proximity ratio space. \!\(\*FormBox[\(\*
StyleBox[\"b\", \"TI\"] \*SubscriptBox[
StyleBox[\"g\", \"TI\"], 
RowBox[{
StyleBox[\"A\", \"TI\"], \",\", 
StyleBox[\"i\", \"TI\"]}]]\),
TraditionalForm]\) and \!\(\*FormBox[\(\*
StyleBox[\"b\", \"TI\"] \*SubscriptBox[
StyleBox[\"g\", \"TI\"], 
RowBox[{
StyleBox[\"D\", \"TI\"], \",\", 
StyleBox[\"i\", \"TI\"]}]]\),
TraditionalForm]\) are the acceptor and donor background rates, respectively, of trajectory \!\(\*FormBox[
StyleBox[\"i\", \"TI\"],
TraditionalForm]\).

FFretHMMLogLikelihood has the option FHMMpinpfin. The default setting is FHMMpinpfin\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FHMMOnePeq, in which case pini\[LongEqual]peq with \!\(\*FormBox[\(\*
StyleBox[\"K\", \"TI\"] . \*
StyleBox[\"p\", \"TI\"] \*
StyleBox[\"e\", \"TI\"] \*
StyleBox[\"q\", \"TI\"] \[LongEqual] 0\),
TraditionalForm]\), and pfinal\[LongEqual]\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)1,1,...\!\(\*FormBox[\(}\),
TraditionalForm]\) are used in the calculations. Alternatively, pini and pfinal can be set individually for each trace using FFretHMMSetPinPfin. The option is then FHMMpinpfin\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FMTraceWise. ";


FFretHMMSetPhotonRates  ::usage="FFretHMMSetPhotonRates[photonrates] sets the acceptor and donor photon detection rates assumed for the photon time traces that were beforehand initialized using FFretHMMInitWithBinnedData.
photonrates is a list that contains, for each trajectory \!\(\*FormBox[
StyleBox[\"i\", \"TI\"],
TraditionalForm]\), an expression of the form
\!\(\*FormBox[\({{\*SubscriptBox[
StyleBox[\"F\", \"TI\"], 
RowBox[{
StyleBox[\"i\", \"TI\"], \",\", \"1\"}]], \*SubscriptBox[\"\[Mu]\", 
RowBox[{
StyleBox[\"i\", \"TI\"], \",\", \"1\"}]], \*SubscriptBox[\"\[Nu]\", 
RowBox[{
StyleBox[\"i\", \"TI\"], \",\", \"1\"}]]}, {\*SubscriptBox[
StyleBox[\"F\", \"TI\"], 
RowBox[{
StyleBox[\"i\", \"TI\"], \",\", \"2\"}]], \*SubscriptBox[\"\[Mu]\", 
RowBox[{
StyleBox[\"i\", \"TI\"], \",\", \"2\"}]], \*SubscriptBox[\"\[Nu]\", 
RowBox[{
StyleBox[\"i\", \"TI\"], \",\", \"2\"}]]} ... }, \*
StyleBox[\"b\", \"TI\"] \*SubscriptBox[
StyleBox[\"g\", \"TI\"], 
RowBox[{
StyleBox[\"A\", \"TI\"], \",\", 
StyleBox[\"i\", \"TI\"]}]], \*
StyleBox[\"b\", \"TI\"] \*SubscriptBox[
StyleBox[\"g\", \"TI\"], 
RowBox[{
StyleBox[\"D\", \"TI\"], \",\", 
StyleBox[\"i\", \"TI\"]}]]}\),
TraditionalForm]\).
The first list contains for each state \!\(\*FormBox[
StyleBox[\"s\", \"TI\"],
TraditionalForm]\) of the kinetic model the expression \!\(\*FormBox[\({{\*SubscriptBox[
StyleBox[\"F\", \"TI\"], 
RowBox[{
StyleBox[\"i\", \"TI\"], \",\", 
StyleBox[\"s\", \"TI\"]}]], \*SubscriptBox[\"\[Mu]\", 
RowBox[{
StyleBox[\"i\", \"TI\"], \",\", 
StyleBox[\"s\", \"TI\"]}]], \*SubscriptBox[\"\[Nu]\", 
RowBox[{
StyleBox[\"i\", \"TI\"], \",\", 
StyleBox[\"s\", \"TI\"]}]]}\),
TraditionalForm]\), where \!\(\*FormBox[SubscriptBox[
StyleBox[\"F\", \"TI\"], 
RowBox[{
StyleBox[\"i\", \"TI\"], \",\", 
StyleBox[\"s\", \"TI\"]}]],
TraditionalForm]\) is the mean total fluorescence detection rate (without background), \!\(\*FormBox[SubscriptBox[\"\[Mu]\", 
RowBox[{
StyleBox[\"i\", \"TI\"], \",\", 
StyleBox[\"s\", \"TI\"]}]],
TraditionalForm]\) is the probability that a detected fluorescence photon is detected on the acceptor detection route, and \!\(\*FormBox[SubscriptBox[\"\[Nu]\", 
RowBox[{
StyleBox[\"i\", \"TI\"], \",\", 
StyleBox[\"s\", \"TI\"]}]],
TraditionalForm]\) is a parameter describing the intrinsic broadening of state \!\(\*FormBox[
StyleBox[\"s\", \"TI\"],
TraditionalForm]\) in proximity ratio space. \!\(\*FormBox[\(\*
StyleBox[\"b\", \"TI\"] \*SubscriptBox[
StyleBox[\"g\", \"TI\"], 
RowBox[{
StyleBox[\"A\", \"TI\"], \",\", 
StyleBox[\"i\", \"TI\"]}]]\),
TraditionalForm]\) and \!\(\*FormBox[\(\*
StyleBox[\"b\", \"TI\"] \*SubscriptBox[
StyleBox[\"g\", \"TI\"], 
RowBox[{
StyleBox[\"D\", \"TI\"], \",\", 
StyleBox[\"i\", \"TI\"]}]]\),
TraditionalForm]\) are the acceptor and donor background rates, respectively, of trajectory \!\(\*FormBox[
StyleBox[\"i\", \"TI\"],
TraditionalForm]\). ";


FFretHMMSetPinPfin  ::usage="FFretHMMSetPinPfin[ pinpfin ] sets the \!\(\*FormBox[SubscriptBox[
StyleBox[\"p\", \"TI\"], 
StyleBox[
RowBox[{\"i\", \"n\"}], \"TI\"]],
TraditionalForm]\) and \!\(\*FormBox[SubscriptBox[
StyleBox[\"p\", \"TI\"], 
StyleBox[
RowBox[{\"f\", \"i\", \"n\"}], \"TI\"]],
TraditionalForm]\) vectors for the photon time traces (initialized using FFretHMMInitWithBinnedData). The command is required if FFretHMMLogLikelihood or FFretHMMViterbi are going to be called with the option FHMMpinpfin\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FMTraceWise.
pinpfin can be of the form \!\(\*FormBox[\({\*SubscriptBox[
StyleBox[\"p\", \"TI\"], \"in\"], \*SubscriptBox[
StyleBox[\"p\", \"TI\"], \"fin\"]}\),
TraditionalForm]\), where \!\(\*FormBox[SubscriptBox[
StyleBox[\"p\", \"TI\"], \"in\"],
TraditionalForm]\) and \!\(\*FormBox[SubscriptBox[
StyleBox[\"p\", \"TI\"], \"fin\"],
TraditionalForm]\) are state population vectors. In this case, the vectors will be assumed to be the same for all photon time traces. Alternatively, state population vectors can be set for the photon time traces individually with pinpfin of the form \!\(\*FormBox[\({{\*SubscriptBox[
StyleBox[\"p\", \"TI\"], \"in1\"], \*SubscriptBox[
StyleBox[\"p\", \"TI\"], \"fin1\"]},  ... , {\*SubscriptBox[
StyleBox[\"p\", \"TI\"], 
RowBox[{\"in\", 
StyleBox[\"M\", \"TI\"]}]], \*SubscriptBox[
StyleBox[\"p\", \"TI\"], 
RowBox[{\"fin\", 
StyleBox[\"M\", \"TI\"]}]]}}\),
TraditionalForm]\), where \!\(\*FormBox[
StyleBox[\"M\", \"TI\"],
TraditionalForm]\) is the number of traces that the HM system was initialized with. ";


FFretHMMSimulateBinnedTrace  ::usage="FFretHMMSimulateBinnedTrace[Km\!\(\*FormBox[\(_\),
TraditionalForm]\)?FNumericSquareMatrixQ, \!\(\*FormBox[\({{\[Null]\),
TraditionalForm]\)Fmean, mu, nu, bgA, bgD\!\(\*FormBox[\(}\),
TraditionalForm]\)..\!\(\*FormBox[\(}\),
TraditionalForm]\), Smax, t, binning] ";


FFretHMMViterbi  ::usage="FFretHMMViterbi[\!\(\*FormBox[
StyleBox[\"K\", \"TI\"],
TraditionalForm]\)] or FFretHMMViterbi[\!\(\*FormBox[
StyleBox[\"K\", \"TI\"],
TraditionalForm]\), photonrates] applies the Viterbi algorithm to all previously initialized trajectories assuming the rate matrix K. A list of most likely state trajectories is returned in form of a FDwellList. 
For FFretHMMViterbi[\!\(\*FormBox[
StyleBox[\"K\", \"TI\"],
TraditionalForm]\)], the photon rates set with FFretHMMSetPhotonRates are used. With FHMMViterbi[\!\(\*FormBox[
StyleBox[\"K\", \"TI\"],
TraditionalForm]\), photonrates], the photon rates given in photonrates are used. 
photonrates is a list that contains, for each trajectory \!\(\*FormBox[
StyleBox[\"i\", \"TI\"],
TraditionalForm]\), an expression of the form
\!\(\*FormBox[\({{{\*SubscriptBox[
StyleBox[\"F\", \"TI\"], 
RowBox[{
StyleBox[\"i\", \"TI\"], \",\", \"1\"}]], \*SubscriptBox[\"\[Mu]\", 
RowBox[{
StyleBox[\"i\", \"TI\"], \",\", \"1\"}]], \*SubscriptBox[\"\[Nu]\", 
RowBox[{
StyleBox[\"i\", \"TI\"], \",\", \"1\"}]]}, {\*SubscriptBox[
StyleBox[\"F\", \"TI\"], 
RowBox[{
StyleBox[\"i\", \"TI\"], \",\", \"2\"}]], \*SubscriptBox[\"\[Mu]\", 
RowBox[{
StyleBox[\"i\", \"TI\"], \",\", \"2\"}]], \*SubscriptBox[\"\[Nu]\", 
RowBox[{
StyleBox[\"i\", \"TI\"], \",\", \"2\"}]]} ... }, \*SubscriptBox[\"bg\", 
RowBox[{
StyleBox[\"A\", \"TI\"], \",\", 
StyleBox[\"i\", \"TI\"]}]], \*SubscriptBox[\"bg\", 
RowBox[{
StyleBox[\"D\", \"TI\"], \",\", 
StyleBox[\"i\", \"TI\"]}]]}\),
TraditionalForm]\).
The first list contains for each state \!\(\*FormBox[
StyleBox[\"s\", \"TI\"],
TraditionalForm]\) of the kinetic model the expression \!\(\*FormBox[\({{\*SubscriptBox[
StyleBox[\"F\", \"TI\"], 
RowBox[{
StyleBox[\"i\", \"TI\"], \",\", 
StyleBox[\"s\", \"TI\"]}]], \*SubscriptBox[\"\[Mu]\", 
RowBox[{
StyleBox[\"i\", \"TI\"], \",\", 
StyleBox[\"s\", \"TI\"]}]], \*SubscriptBox[\"\[Nu]\", 
RowBox[{
StyleBox[\"i\", \"TI\"], \",\", 
StyleBox[\"s\", \"TI\"]}]]}\),
TraditionalForm]\), where \!\(\*FormBox[SubscriptBox[
StyleBox[\"F\", \"TI\"], 
RowBox[{
StyleBox[\"i\", \"TI\"], \",\", 
StyleBox[\"s\", \"TI\"]}]],
TraditionalForm]\) is the mean fluorescence rate (without background), \!\(\*FormBox[SubscriptBox[\"\[Mu]\", 
RowBox[{
StyleBox[\"i\", \"TI\"], \",\", 
StyleBox[\"s\", \"TI\"]}]],
TraditionalForm]\) is the probability that a detected fluorescence photon is detected on the acceptor detection route, and \!\(\*FormBox[SubscriptBox[\"\[Nu]\", 
RowBox[{
StyleBox[\"i\", \"TI\"], \",\", 
StyleBox[\"s\", \"TI\"]}]],
TraditionalForm]\) is a parameter describing the intrinsic broadening of state \!\(\*FormBox[
StyleBox[\"s\", \"TI\"],
TraditionalForm]\) in proximity ratio space. \!\(\*FormBox[SubscriptBox[\"bg\", 
RowBox[{
StyleBox[\"A\", \"TI\"], \",\", 
StyleBox[\"i\", \"TI\"]}]],
TraditionalForm]\) and \!\(\*FormBox[SubscriptBox[\"bg\", 
RowBox[{
StyleBox[\"D\", \"TI\"], \",\", 
StyleBox[\"i\", \"TI\"]}]],
TraditionalForm]\) are the acceptor and donor background rates, respectively, of trajectory \!\(\*FormBox[
StyleBox[\"i\", \"TI\"],
TraditionalForm]\). 
FFretHMMViterbi has the option FHMMpinpfin. The default setting is FHMMpinpfin\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FHMMOnePeq, in which case pini\[LongEqual]peq with \!\(\*FormBox[\(\*
StyleBox[\"K\", \"TI\"] . \*
StyleBox[\"p\", \"TI\"] \*
StyleBox[\"e\", \"TI\"] \*
StyleBox[\"q\", \"TI\"] \[LongEqual] 0\),
TraditionalForm]\), and pfinal\[LongEqual]\!\(\*FormBox[\({\[Null]\),
TraditionalForm]\)1,1,...\!\(\*FormBox[\(}\),
TraditionalForm]\) are used in the calculations. Alternatively, pini and pfinal can be set individually for each trace using FPHSetPinPfin. The option is then FHMMpinpfin\!\(\*FormBox[\(\[Rule]\),
TraditionalForm]\)FMTraceWise. ";


FHmmAppendToTrajectoryList  ::usage="Deprecated command. ";


FHmmClearTrajectoryList  ::usage="Deprecated command. ";


FHmmInitTrajectoryList  ::usage="Deprecated command. ";


FHmmLikelihood  ::usage="Deprecated command. ";


FHmmLikelihoodPeqFromK  ::usage="Deprecated command. ";


FHmmSetPhotonRates  ::usage="Deprecated command. ";


FHmmTrajectory  ::usage="Deprecated command. ";


FHmmViterbi  ::usage="Deprecated command. ";


FHmmViterbiPeqFromK  ::usage="Deprecated command. ";


FMLHAppendToBurstList  ::usage="Deprecated command. ";


FMLHBurstListLength  ::usage="Deprecated command. ";


FMLHClearBurstList  ::usage="Deprecated command. ";


FMLHFret  ::usage="Deprecated command. ";


FMLHGetBursts  ::usage="Deprecated command. ";


FMLHGetLikelihood  ::usage="Deprecated command. ";


FMLHGetLikelihoodPeqFromK  ::usage="Deprecated command. ";


FMLHGetLikelihoodpeqFromKconstNtot  ::usage="Deprecated command. ";


FMLHInitBurstList  ::usage="Deprecated command. ";


FMLHRecolor  ::usage="Deprecated command. ";


FMLHSetPhotonRates  ::usage="Deprecated command. ";


FMLHTrajectory  ::usage="Deprecated command. ";


FMLHTransitionStatesGetLikelihoods  ::usage="Deprecated command. ";


FMLHViterbi  ::usage="Deprecated command. ";


FMLHViterbiPeqFromK  ::usage="Deprecated command. ";


EndPackage[]
